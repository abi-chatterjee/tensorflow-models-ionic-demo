(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~mobilenet-mobilenet-module~object-detection-object-detection-module~posenet-posenet-module"],{

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js ***!
  \***************************************************************************/
/*! exports provided: DataType, SaverDef */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataType", function() { return DataType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaverDef", function() { return SaverDef; });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/** DataType enum. */
var DataType;
(function (DataType) {
    DataType[DataType["DT_INVALID"] = 0] = "DT_INVALID";
    DataType[DataType["DT_FLOAT"] = 1] = "DT_FLOAT";
    DataType[DataType["DT_DOUBLE"] = 2] = "DT_DOUBLE";
    DataType[DataType["DT_INT32"] = 3] = "DT_INT32";
    DataType[DataType["DT_UINT8"] = 4] = "DT_UINT8";
    DataType[DataType["DT_INT16"] = 5] = "DT_INT16";
    DataType[DataType["DT_INT8"] = 6] = "DT_INT8";
    DataType[DataType["DT_STRING"] = 7] = "DT_STRING";
    DataType[DataType["DT_COMPLEX64"] = 8] = "DT_COMPLEX64";
    DataType[DataType["DT_INT64"] = 9] = "DT_INT64";
    DataType[DataType["DT_BOOL"] = 10] = "DT_BOOL";
    DataType[DataType["DT_QINT8"] = 11] = "DT_QINT8";
    DataType[DataType["DT_QUINT8"] = 12] = "DT_QUINT8";
    DataType[DataType["DT_QINT32"] = 13] = "DT_QINT32";
    DataType[DataType["DT_BFLOAT16"] = 14] = "DT_BFLOAT16";
    DataType[DataType["DT_FLOAT_REF"] = 101] = "DT_FLOAT_REF";
    DataType[DataType["DT_DOUBLE_REF"] = 102] = "DT_DOUBLE_REF";
    DataType[DataType["DT_INT32_REF"] = 103] = "DT_INT32_REF";
    DataType[DataType["DT_UINT8_REF"] = 104] = "DT_UINT8_REF";
    DataType[DataType["DT_INT16_REF"] = 105] = "DT_INT16_REF";
    DataType[DataType["DT_INT8_REF"] = 106] = "DT_INT8_REF";
    DataType[DataType["DT_STRING_REF"] = 107] = "DT_STRING_REF";
    DataType[DataType["DT_COMPLEX64_REF"] = 108] = "DT_COMPLEX64_REF";
    DataType[DataType["DT_INT64_REF"] = 109] = "DT_INT64_REF";
    DataType[DataType["DT_BOOL_REF"] = 110] = "DT_BOOL_REF";
    DataType[DataType["DT_QINT8_REF"] = 111] = "DT_QINT8_REF";
    DataType[DataType["DT_QUINT8_REF"] = 112] = "DT_QUINT8_REF";
    DataType[DataType["DT_QINT32_REF"] = 113] = "DT_QINT32_REF";
    DataType[DataType["DT_BFLOAT16_REF"] = 114] = "DT_BFLOAT16_REF";
})(DataType || (DataType = {}));
var SaverDef;
(function (SaverDef) {
    /** CheckpointFormatVersion enum. */
    let CheckpointFormatVersion;
    (function (CheckpointFormatVersion) {
        CheckpointFormatVersion[CheckpointFormatVersion["LEGACY"] = 0] = "LEGACY";
        CheckpointFormatVersion[CheckpointFormatVersion["V1"] = 1] = "V1";
        CheckpointFormatVersion[CheckpointFormatVersion["V2"] = 2] = "V2";
    })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));
})(SaverDef || (SaverDef = {}));
//# sourceMappingURL=compiled_api.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js ***!
  \************************************************************************************/
/*! exports provided: ExecutionContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExecutionContext", function() { return ExecutionContext; });
/**
 * ExecutionContext captures the runtime environment of the node. It keeps
 * track of the current frame and iteration for the control flow ops.
 *
 * For example, typical Dynamic RNN model may contain loops, for which
 * TensorFlow will generate graphs with Enter/Exit nodes to control the
 * current execution frame, and NextIteration Nodes for iteration id increment.
 * For model with branch logic, TensorFLow will generate Switch/Merge ops.
 */
class ExecutionContext {
    constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {
        this.weightMap = weightMap;
        this.tensorArrayMap = tensorArrayMap;
        this.tensorListMap = tensorListMap;
        this.functionMap = functionMap;
        this.rootContext = { id: 0, frameName: '', iterationId: 0 };
        this.contexts = [this.rootContext];
        this.lastId = 0;
        this.generateCurrentContextIds();
    }
    newFrame(id, frameName) {
        return { id, frameName, iterationId: 0 };
    }
    /**
     * Set the current context
     * @param contexts: ExecutionContextInfo[] the current path of execution
     * frames
     */
    set currentContext(contexts) {
        if (this.contexts !== contexts) {
            this.contexts = contexts;
            this.generateCurrentContextIds();
        }
    }
    get currentContext() {
        return this.contexts;
    }
    /**
     * Returns the current context in string format.
     */
    get currentContextId() {
        return this._currentContextIds[0];
    }
    /**
     * Returns the current context and all parent contexts in string format.
     * This allow access to the nodes in the current and parent frames.
     */
    get currentContextIds() {
        return this._currentContextIds;
    }
    generateCurrentContextIds() {
        const names = [];
        for (let i = 0; i < this.contexts.length - 1; i++) {
            const contexts = this.contexts.slice(0, this.contexts.length - i);
            names.push(this.contextIdforContexts(contexts));
        }
        names.push('');
        this._currentContextIds = names;
    }
    contextIdforContexts(contexts) {
        return contexts ?
            contexts
                .map(context => (context.id === 0 && context.iterationId === 0) ?
                '' :
                `${context.frameName}-${context.iterationId}`)
                .join('/') :
            '';
    }
    /**
     * Enter a new frame, a new context is pushed on the current context list.
     * @param frameId new frame id
     */
    enterFrame(frameId) {
        if (this.contexts) {
            this.lastId++;
            this.contexts = this.contexts.slice();
            this.contexts.push(this.newFrame(this.lastId, frameId));
            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
        }
    }
    /**
     * Exit the current frame, the last context is removed from the current
     * context list.
     */
    exitFrame() {
        if (this.contexts && this.contexts.length > 1) {
            this.contexts = this.contexts.slice();
            this.contexts.splice(-1);
            this.currentContextIds.shift();
        }
        else {
            throw new Error('Cannot exit frame, the context is empty');
        }
    }
    /**
     * Enter the next iteration of a loop, the iteration id of last context is
     * increased.
     */
    nextIteration() {
        if (this.contexts && this.contexts.length > 0) {
            this.contexts = this.contexts.slice();
            this.lastId++;
            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);
            context.iterationId += 1;
            context.id = this.lastId;
            this.contexts.splice(-1, 1, context);
            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
        }
        else {
            throw new Error('Cannot increase frame iteration, the context is empty');
        }
    }
    getWeight(name) {
        return this.weightMap[name];
    }
    addTensorArray(tensorArray) {
        this.tensorArrayMap[tensorArray.id] = tensorArray;
    }
    getTensorArray(id) {
        return this.tensorArrayMap[id];
    }
    addTensorList(tensorList) {
        this.tensorListMap[tensorList.id] = tensorList;
    }
    getTensorList(id) {
        return this.tensorListMap[id];
    }
    dispose(keepIds) {
        for (const key in this.tensorArrayMap) {
            this.tensorArrayMap[key].clearAndClose(keepIds);
        }
        for (const key in this.tensorListMap) {
            this.tensorListMap[key].clearAndClose(keepIds);
        }
    }
}
//# sourceMappingURL=execution_context.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js ***!
  \*********************************************************************************/
/*! exports provided: GraphExecutor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphExecutor", function() { return GraphExecutor; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operations/executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/* harmony import */ var _operations_operation_executor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations/operation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js");
/* harmony import */ var _execution_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./execution_context */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js");
/* harmony import */ var _model_analysis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model_analysis */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





class GraphExecutor {
    /**
     *
     * @param graph Graph the model or function graph to be executed.
     * @param parent When building function exector you need to set the parent
     * executor. Since the weights and function executor maps are set at parant
     * level, that function executor can access the function maps and weight maps
     * through the parent.
     */
    constructor(graph, parent) {
        this.graph = graph;
        this.parent = parent;
        this.compiledMap = new Map();
        this._weightMap = {};
        this.SEPERATOR = ',';
        this._functions = {};
        this._functionExecutorMap = {};
        this._outputs = graph.outputs;
        this._inputs = graph.inputs;
        this._initNodes = graph.initNodes;
        this._signature = graph.signature;
        this._functions = graph.functions;
        // create sub-graph executors
        if (graph.functions != null) {
            Object.keys(graph.functions).forEach(name => {
                this._functionExecutorMap[name] =
                    new GraphExecutor(graph.functions[name], this);
            });
        }
    }
    get weightIds() {
        return this.parent ? this.parent.weightIds : this._weightIds;
    }
    get functionExecutorMap() {
        return this.parent ? this.parent.functionExecutorMap :
            this._functionExecutorMap;
    }
    get weightMap() {
        return this.parent ? this.parent.weightMap : this._weightMap;
    }
    set weightMap(weightMap) {
        const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));
        this._weightIds = [].concat(...weightIds);
        this._weightMap = weightMap;
    }
    /**
     * Set `ResourceManager` shared by executors of a model.
     * @param resourceManager: `ResourceManager` of the `GraphModel`.
     */
    set resourceManager(resourceManager) {
        this._resourceManager = resourceManager;
    }
    get inputs() {
        return this._inputs.map(node => {
            return {
                name: node.name,
                shape: node.attrParams['shape'] ?
                    node.attrParams['shape'].value :
                    undefined,
                dtype: node.attrParams['dtype'] ?
                    node.attrParams['dtype'].value :
                    undefined
            };
        });
    }
    get outputs() {
        return this._outputs.map(node => {
            return {
                name: node.name,
                shape: node.attrParams['shape'] ?
                    node.attrParams['shape'].value :
                    undefined,
                dtype: node.attrParams['dtype'] ?
                    node.attrParams['dtype'].value :
                    undefined
            };
        });
    }
    get inputNodes() {
        return this._inputs.map(node => node.signatureKey || node.name);
    }
    get outputNodes() {
        return this._outputs.map((node) => {
            const name = node.signatureKey || node.name;
            return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;
        });
    }
    get functions() {
        return Object.keys(this._functions).reduce((map, key) => {
            map[key] = this._functions[key].signature;
            return map;
        }, {});
    }
    getCompilationKey(inputs, outputs) {
        const sortedInputs = inputs.map(node => node.name).sort();
        const sortedOutputs = outputs.map(node => node.name).sort();
        return sortedInputs.join(this.SEPERATOR) + '--' +
            sortedOutputs.join(this.SEPERATOR);
    }
    /**
     * Compiles the inference graph and returns the minimal set of nodes that are
     * required for execution, in the correct execution order.
     */
    compile(inputs, outputs) {
        const executionInfo = Object(_model_analysis__WEBPACK_IMPORTED_MODULE_4__["getExecutionSubgraph"])(inputs, outputs, this.weightMap, this._initNodes);
        const { missingInputs, dynamicNode, syncInputs } = executionInfo;
        if (dynamicNode != null) {
            throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` +
                `the dynamic op '${dynamicNode.op}'. Please use ` +
                `model.executeAsync() instead. Alternatively, to avoid the ` +
                `dynamic ops, specify the inputs [${syncInputs}]`);
        }
        if (missingInputs.length > 0) {
            const outNames = outputs.map(n => n.name);
            const inNames = Object.keys(inputs);
            throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` +
                `[${inNames}]. Missing the following inputs: [${missingInputs}]`);
        }
        return Object(_model_analysis__WEBPACK_IMPORTED_MODULE_4__["getNodesInTopologicalOrder"])(this.graph, this.weightMap, executionInfo);
    }
    /**
     * Executes the inference for given input tensors.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs Optional. output node name from the Tensorflow model, if
     * no outputs are specified, the default outputs of the model would be used.
     * You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     */
    execute(inputs, outputs) {
        inputs = this.mapInputs(inputs);
        const names = Object.keys(inputs).sort();
        this.checkInputs(inputs);
        this.checkInputShapeAndType(inputs);
        outputs = this.mapOutputs(outputs);
        this.checkOutputs(outputs);
        const inputNodes = names.map(name => this.graph.nodes[Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name)[0]]);
        const outputNodeNames = outputs.map(name => Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name)[0]);
        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);
        // If no outputs are specified, then use the default outputs of the model.
        if (outputNodes.length === 0) {
            outputNodes = this._outputs;
        }
        const compilationKey = this.getCompilationKey(inputNodes, outputNodes);
        // Do nothing if the compiled graph cache contains the input.
        let orderedNodes = this.compiledMap.get(compilationKey);
        if (orderedNodes == null) {
            orderedNodes = this.compile(inputs, outputNodes);
            this.compiledMap.set(compilationKey, orderedNodes);
        }
        const tensorArrayMap = {};
        const tensorListMap = {};
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
            const context = new _execution_context__WEBPACK_IMPORTED_MODULE_3__["ExecutionContext"](this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);
            const tensorsMap = Object.assign({}, this.weightMap);
            Object.keys(inputs).forEach(name => {
                const [nodeName, index] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name);
                const tensors = [];
                tensors[index] = inputs[name];
                tensorsMap[nodeName] = tensors;
            });
            const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
            const intermediateTensorConsumerCount = {};
            for (let i = 0; i < orderedNodes.length; i++) {
                const node = orderedNodes[i];
                if (!tensorsMap[node.name]) {
                    const tensors = Object(_operations_operation_executor__WEBPACK_IMPORTED_MODULE_2__["executeOp"])(node, tensorsMap, context, this._resourceManager);
                    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].isPromise(tensors)) {
                        throw new Error(`The execution of the op '${node.op}' returned a promise. ` +
                            `Please use model.executeAsync() instead.`);
                    }
                    tensorsMap[node.name] = tensors;
                    this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);
                }
            }
            // dispose the context for the root executor
            if (this.parent == null) {
                context.dispose(tensorsToKeep);
            }
            return outputs.map(name => Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(name, tensorsMap, context));
        });
    }
    getFrozenTensorIds(tensorMap) {
        const ids = [].concat.apply([], Object.keys(tensorMap)
            .map(key => tensorMap[key])
            .map(tensors => tensors.map(tensor => tensor.id)));
        return new Set(ids);
    }
    checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {
        // Skip output nodes and any control flow nodes, since its dependency is
        // tricky to track correctly.
        if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {
            return;
        }
        tensorMap[nodeName].forEach(tensor => {
            if (tensor != null) {
                intermediateTensorConsumerCount[tensor.id] =
                    (intermediateTensorConsumerCount[tensor.id] || 0) +
                        node.children.length;
            }
        });
        node.inputs.forEach(input => {
            // Skip any control flow nodes, since its dependency is tricky to track
            // correctly.
            if (input.category !== 'control') {
                const tensors = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getTensorsForCurrentContenxt"])(input.name, tensorMap, context);
                if (tensors != null) {
                    tensors.forEach(tensor => {
                        if (tensor && !tensorsToKeep.has(tensor.id)) {
                            const count = intermediateTensorConsumerCount[tensor.id];
                            if (count === 1) {
                                tensor.dispose();
                                delete intermediateTensorConsumerCount[tensor.id];
                            }
                            else if (count != null) {
                                // only intermediate nodes has count set, inputs and weights are
                                // not.
                                intermediateTensorConsumerCount[tensor.id]--;
                            }
                        }
                    });
                }
            }
        });
    }
    /**
     * Executes the inference for given input tensors in Async fashion.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs output node name from the Tensorflow model, if no outputs
     * are specified, the default outputs of the model would be used. You can
     * inspect intermediate nodes of the model by adding them to the outputs
     * array.
     */
    async executeAsync(inputs, outputs) {
        return this._executeAsync(inputs, outputs);
    }
    /**
     * Executes the inference for given input tensors in Async fashion.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs Optional. output node name from the Tensorflow model,
     * if no outputs are specified, the default outputs of the model would be
     * used. You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     * @param isFunctionExecution Optional. Flag for executing a function.
     * @param tensorArrayMap Optional, global TensorArray map by id. Used for
     * function execution.
     * @param tensorArrayMap Optinal global TensorList map by id. Used for
     * function execution.
     */
    async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {
        if (!isFunctionExecution) {
            inputs = this.mapInputs(inputs);
            this.checkInputs(inputs);
            this.checkInputShapeAndType(inputs);
            outputs = this.mapOutputs(outputs);
            this.checkOutputs(outputs);
        }
        const context = new _execution_context__WEBPACK_IMPORTED_MODULE_3__["ExecutionContext"](this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);
        // Graph with control flow op requires runtime evaluation of the execution
        // order, while without control flow the execution order is pre-determined
        // in the compile method.
        const tensorMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);
        const results = outputs.map(name => Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(name, tensorMap, context));
        // dispose all the intermediate tensors
        const outputIds = results.map(t => t.id);
        const inputIds = Object.keys(inputs).map(name => inputs[name].id);
        const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);
        Object.keys(tensorMap).forEach(key => {
            const tensorArray = tensorMap[key];
            tensorArray.forEach(tensor => {
                if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {
                    tensor.dispose();
                }
            });
        });
        // dispose the context for the root executor
        if (this.parent == null) {
            context.dispose(keepIds);
        }
        return results;
    }
    async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {
        const mappedInputs = inputs.reduce((map, tensor, index) => {
            map[this.inputs[index].name] = tensor;
            return map;
        }, {});
        return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);
    }
    /**
     * When there are control flow nodes in the graph, the graph execution use
     * ExecutionContext to keep track of the frames and loop iterators.
     * @param inputs placeholder tensors for the graph.
     * @param context the execution context object for current execution.
     * @param outputNames Optional. output node name from the Tensorflow model,
     * if no outputs are specified, the default outputs of the model would be
     * used. You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     * @param isFunctionExecution Flag for executing a function.
     */
    async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {
        const names = Object.keys(inputs);
        const inputNodes = names.map(name => this.graph.nodes[Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name)[0]]);
        const outputNodeNames = outputNames.map(name => Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name)[0]);
        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);
        // If no outputs are specified, then use the default outputs of the model.
        if (outputNodes.length === 0) {
            outputNodes = this._outputs;
        }
        const { usedNodes, missingInputs, dynamicNode, syncInputs } = Object(_model_analysis__WEBPACK_IMPORTED_MODULE_4__["getExecutionSubgraph"])(inputs, outputNodes, this.weightMap, this._initNodes);
        // First nodes to execute include inputNodes, weights, and initNodes.
        const stack = [
            ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])
        ].map(node => {
            return { node, contexts: context.currentContext };
        });
        const tensorsMap = Object.assign({}, this.weightMap);
        Object.keys(inputs).forEach(name => {
            const [nodeName, index] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name);
            const tensors = [];
            tensors[index] = inputs[name];
            tensorsMap[nodeName] = tensors;
        });
        const intermediateTensorConsumerCount = {};
        const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
        const added = {};
        while (stack.length > 0) {
            const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);
            await Promise.all(promises);
        }
        if (dynamicNode == null && !isFunctionExecution) {
            console.warn(`This model execution did not contain any nodes with control flow ` +
                `or dynamic output shapes. You can use model.execute() instead.`);
        }
        const missingOutputs = outputNodes
            .filter(node => !Object(_model_analysis__WEBPACK_IMPORTED_MODULE_4__["isControlFlow"])(node) &&
            !Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(node.name, tensorsMap, context))
            .map(node => node.name);
        if (missingOutputs.length > 0) {
            let alternativeMsg = '';
            if (dynamicNode != null) {
                alternativeMsg =
                    `Alternatively, to avoid the dynamic ops, use model.execute() ` +
                        `and specify the inputs [${syncInputs}]`;
            }
            throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` +
                `inputs [${names}]. Consider providing the following inputs: ` +
                `[${missingInputs}]. ${alternativeMsg}`);
        }
        return tensorsMap;
    }
    processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {
        const promises = [];
        while (stack.length > 0) {
            const item = stack.pop();
            context.currentContext = item.contexts;
            let nodeName = '';
            // The tensor of the Enter op with isConstant set should be set
            // in the parent scope, so it will be available as constant for the
            // whole loop.
            if (item.node.op === 'Enter' &&
                Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('isConstant', item.node, tensorMap, context)) {
                [nodeName] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getNodeNameAndIndex"])(item.node.name, context);
            }
            // only process nodes that are not in the tensorMap yet, this include
            // inputNodes and internal initNodes.
            if (tensorMap[item.node.name] == null) {
                const tensors = Object(_operations_operation_executor__WEBPACK_IMPORTED_MODULE_2__["executeOp"])(item.node, tensorMap, context, this._resourceManager);
                if (!nodeName) {
                    [nodeName] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getNodeNameAndIndex"])(item.node.name, context);
                }
                const currentContext = context.currentContext;
                if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].isPromise(tensors)) {
                    promises.push(tensors.then(t => {
                        tensorMap[nodeName] = t;
                        context.currentContext = currentContext;
                        this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                        return t;
                    }));
                }
                else {
                    tensorMap[nodeName] = tensors;
                    this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                    this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                }
            }
            else {
                this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
            }
        }
        return promises;
    }
    processChildNodes(node, stack, context, tensorMap, added, usedNodes) {
        node.children.forEach((childNode) => {
            const [nodeName,] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getNodeNameAndIndex"])(childNode.name, context);
            if (added[nodeName] || !usedNodes.has(childNode.name)) {
                return;
            }
            // Merge op can be pushed if any of its inputs has value.
            if (childNode.op === 'Merge') {
                if (childNode.inputNames.some(name => {
                    return !!Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(name, tensorMap, context);
                })) {
                    added[nodeName] = true;
                    stack.push({ contexts: context.currentContext, node: childNode });
                }
            }
            else // Otherwise all inputs must to have value.
             if (childNode.inputNames.every(name => {
                return !!Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(name, tensorMap, context);
            })) {
                added[nodeName] = true;
                stack.push({ contexts: context.currentContext, node: childNode });
            }
        });
    }
    /**
     * Releases the memory used by the weight tensors.
     */
    dispose() {
        Object.keys(this.weightMap)
            .forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));
    }
    checkInputShapeAndType(inputs) {
        Object.keys(inputs).forEach(name => {
            const input = inputs[name];
            const [nodeName,] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name);
            const node = this.graph.nodes[nodeName];
            if (node.attrParams['shape'] && node.attrParams['shape'].value) {
                const shape = node.attrParams['shape'].value;
                const match = shape.length === input.shape.length &&
                    input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);
                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].assert(match, () => `The shape of dict['${node.name}'] provided in ` +
                    `model.execute(dict) must be [${shape}], but was ` +
                    `[${input.shape}]`);
            }
            if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {
                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` +
                    `model.execute(dict) must be ` +
                    `${node.attrParams['dtype'].value}, but was ${input.dtype}`);
            }
        });
    }
    mapInputs(inputs) {
        const result = {};
        for (const inputName in inputs) {
            if (this._signature != null && this._signature.inputs != null &&
                this._signature.inputs[inputName] != null) {
                const tensor = this._signature.inputs[inputName];
                result[tensor.name] = inputs[inputName];
            }
            else {
                result[inputName] = inputs[inputName];
            }
        }
        return result;
    }
    checkInputs(inputs) {
        const notInGraph = Object.keys(inputs).filter(name => {
            const [nodeName] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name);
            return this.graph.nodes[nodeName] == null;
        });
        if (notInGraph.length > 0) {
            throw new Error(`The dict provided in model.execute(dict) has ` +
                `keys: [${notInGraph}] that are not part of graph`);
        }
    }
    mapOutputs(outputs) {
        return outputs.map(name => {
            if (this._signature != null && this._signature.outputs != null &&
                this._signature.outputs[name] != null) {
                const tensor = this._signature.outputs[name];
                return tensor.name;
            }
            return name;
        }, {});
    }
    checkOutputs(outputs) {
        outputs.forEach(name => {
            const [normalizedName] = Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__["parseNodeName"])(name);
            if (!this.graph.nodes[normalizedName]) {
                throw new Error(`The output '${name}' is not found in the graph`);
            }
        });
    }
}
//# sourceMappingURL=graph_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js ***!
  \******************************************************************************/
/*! exports provided: TFHUB_SEARCH_PARAM, DEFAULT_MODEL_NAME, GraphModel, loadGraphModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TFHUB_SEARCH_PARAM", function() { return TFHUB_SEARCH_PARAM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MODEL_NAME", function() { return DEFAULT_MODEL_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphModel", function() { return GraphModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadGraphModel", function() { return loadGraphModel; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _operations_operation_mapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operations/operation_mapper */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js");
/* harmony import */ var _graph_executor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./graph_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js");
/* harmony import */ var _resource_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resource_manager */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const TFHUB_SEARCH_PARAM = '?tfjs-format=file';
const DEFAULT_MODEL_NAME = 'model.json';
/**
 * A `tf.GraphModel` is a directed, acyclic graph built from a
 * SavedModel GraphDef and allows inference execution.
 *
 * A `tf.GraphModel` can only be created by loading from a model converted from
 * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using
 * the command line converter tool and loaded via `tf.loadGraphModel`.
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */
class GraphModel {
    /**
     * @param modelUrl url for the model, or an `io.IOHandler`.
     * @param weightManifestUrl url for the weight file generated by
     * scripts/convert.py script.
     * @param requestOption options for Request, which allows to send credentials
     * and custom headers.
     * @param onProgress Optional, progress callback function, fired periodically
     * before the load is completed.
     */
    constructor(modelUrl, loadOptions = {}) {
        this.modelUrl = modelUrl;
        this.loadOptions = loadOptions;
        this.version = 'n/a';
        if (loadOptions == null) {
            this.loadOptions = {};
        }
        this.resourceManager = new _resource_manager__WEBPACK_IMPORTED_MODULE_3__["ResourceManager"]();
    }
    // Returns the version information for the tensorflow model GraphDef.
    get modelVersion() {
        return this.version;
    }
    get inputNodes() {
        return this.executor.inputNodes;
    }
    get outputNodes() {
        return this.executor.outputNodes;
    }
    get inputs() {
        return this.executor.inputs;
    }
    get outputs() {
        return this.executor.outputs;
    }
    get weights() {
        return this.executor.weightMap;
    }
    findIOHandler() {
        const path = this.modelUrl;
        if (path.load != null) {
            // Path is an IO Handler.
            this.handler = path;
        }
        else if (this.loadOptions.requestInit != null) {
            this.handler = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["io"].browserHTTPRequest(path, this.loadOptions);
        }
        else {
            const handlers = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["io"].getLoadHandlers(path, this.loadOptions);
            if (handlers.length === 0) {
                // For backward compatibility: if no load handler can be found,
                // assume it is a relative http path.
                handlers.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["io"].browserHTTPRequest(path, this.loadOptions));
            }
            else if (handlers.length > 1) {
                throw new Error(`Found more than one (${handlers.length}) load handlers for ` +
                    `URL '${[path]}'`);
            }
            this.handler = handlers[0];
        }
    }
    /**
     * Loads the model and weight files, construct the in memory weight map and
     * compile the inference graph.
     */
    async load() {
        this.findIOHandler();
        if (this.handler.load == null) {
            throw new Error('Cannot proceed with model loading because the IOHandler provided ' +
                'does not have the `load` method implemented.');
        }
        const artifacts = await this.handler.load();
        return this.loadSync(artifacts);
    }
    /**
     * Synchronously construct the in memory weight map and
     * compile the inference graph. Also initialize hashtable if any.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */
    loadSync(artifacts) {
        this.artifacts = artifacts;
        const graph = this.artifacts.modelTopology;
        let signature = {};
        if (this.artifacts.userDefinedMetadata != null) {
            signature = // tslint:disable-next-line:no-any
                this.artifacts.userDefinedMetadata.signature;
        }
        this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;
        const weightMap = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["io"].decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
        this.executor = new _graph_executor__WEBPACK_IMPORTED_MODULE_2__["GraphExecutor"](_operations_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["OperationMapper"].Instance.transformGraph(graph, signature));
        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
        // Attach a model-level resourceManager to each executor to share resources,
        // such as `HashTable`.
        this.executor.resourceManager = this.resourceManager;
        if (artifacts.modelInitializer != null) {
            const initializer = _operations_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["OperationMapper"].Instance.transformGraph(artifacts.modelInitializer);
            this.initializer = new _graph_executor__WEBPACK_IMPORTED_MODULE_2__["GraphExecutor"](initializer);
            this.initializer.weightMap = this.executor.weightMap;
            // Attach a model-level resourceManager to the initializer, the
            // hashTables created from when executing the initializer will be stored
            // in the resourceManager.
            this.initializer.resourceManager = this.resourceManager;
            this.initializer.executeAsync({}, []);
        }
        return true;
    }
    /**
     * Save the configuration and/or weights of the GraphModel.
     *
     * An `IOHandler` is an object that has a `save` method of the proper
     * signature defined. The `save` method manages the storing or
     * transmission of serialized data ("artifacts") that represent the
     * model's topology and weights onto or via a specific medium, such as
     * file downloads, local storage, IndexedDB in the web browser and HTTP
     * requests to a server. TensorFlow.js provides `IOHandler`
     * implementations for a number of frequently used saving mediums, such as
     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
     * for more details.
     *
     * This method also allows you to refer to certain types of `IOHandler`s
     * as URL-like string shortcuts, such as 'localstorage://' and
     * 'indexeddb://'.
     *
     * Example 1: Save `model`'s topology and weights to browser [local
     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
     * then load it back.
     *
     * ```js
     * const modelUrl =
     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
     * const model = await tf.loadGraphModel(modelUrl);
     * const zeros = tf.zeros([1, 224, 224, 3]);
     * model.predict(zeros).print();
     *
     * const saveResults = await model.save('localstorage://my-model-1');
     *
     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
     * console.log('Prediction from loaded model:');
     * model.predict(zeros).print();
     * ```
     *
     * @param handlerOrURL An instance of `IOHandler` or a URL-like,
     * scheme-based string shortcut for `IOHandler`.
     * @param config Options for saving the model.
     * @returns A `Promise` of `SaveResult`, which summarizes the result of
     * the saving, such as byte sizes of the saved artifacts for the model's
     *   topology and weight values.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */
    async save(handlerOrURL, config) {
        if (typeof handlerOrURL === 'string') {
            const handlers = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["io"].getSaveHandlers(handlerOrURL);
            if (handlers.length === 0) {
                throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);
            }
            else if (handlers.length > 1) {
                throw new Error(`Found more than one (${handlers.length}) save handlers for ` +
                    `URL '${handlerOrURL}'`);
            }
            handlerOrURL = handlers[0];
        }
        if (handlerOrURL.save == null) {
            throw new Error('GraphModel.save() cannot proceed because the IOHandler ' +
                'provided does not have the `save` attribute defined.');
        }
        return handlerOrURL.save(this.artifacts);
    }
    /**
     * Execute the inference for the input tensors.
     *
     * @param input The input tensors, when there is single input for the model,
     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
     * inputs params should be in either `tf.Tensor`[] if the input order is
     * fixed, or otherwise NamedTensorMap format.
     *
     * For model with multiple inputs, we recommend you use NamedTensorMap as the
     * input type, if you use `tf.Tensor`[], the order of the array needs to
     * follow the
     * order of inputNodes array. @see {@link GraphModel.inputNodes}
     *
     * You can also feed any intermediate nodes using the NamedTensorMap as the
     * input type. For example, given the graph
     *    InputNode => Intermediate => OutputNode,
     * you can execute the subgraph Intermediate => OutputNode by calling
     *    model.execute('IntermediateNode' : tf.tensor(...));
     *
     * This is useful for models that uses tf.dynamic_rnn, where the intermediate
     * state needs to be fed manually.
     *
     * For batch inference execution, the tensors for each input need to be
     * concatenated together. For example with mobilenet, the required input shape
     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
     * If we are provide a batched data of 100 images, the input tensor should be
     * in the shape of [100, 244, 244, 3].
     *
     * @param config Prediction configuration for specifying the batch size and
     * output node names. Currently the batch size option is ignored for graph
     * model.
     *
     * @returns Inference result tensors. The output would be single `tf.Tensor`
     * if model has single output node, otherwise Tensor[] or NamedTensorMap[]
     * will be returned for model with multiple outputs.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    predict(inputs, config) {
        return this.execute(inputs, this.outputNodes);
    }
    normalizeInputs(inputs) {
        if (!(inputs instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["Tensor"]) && !Array.isArray(inputs)) {
            // The input is already a NamedTensorMap.
            return inputs;
        }
        inputs = Array.isArray(inputs) ? inputs : [inputs];
        if (inputs.length !== this.inputNodes.length) {
            throw new Error('Input tensor count mismatch,' +
                `the graph model has ${this.inputNodes.length} placeholders, ` +
                `while there are ${inputs.length} input tensors.`);
        }
        return this.inputNodes.reduce((map, inputName, i) => {
            map[inputName] = inputs[i];
            return map;
        }, {});
    }
    normalizeOutputs(outputs) {
        outputs = outputs || this.outputNodes;
        return !Array.isArray(outputs) ? [outputs] : outputs;
    }
    /**
     * Executes inference for the model for given input tensors.
     * @param inputs tensor, tensor array or tensor map of the inputs for the
     * model, keyed by the input node names.
     * @param outputs output node name from the Tensorflow model, if no
     * outputs are specified, the default outputs of the model would be used.
     * You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     *
     * @returns A single tensor if provided with a single output or no outputs
     * are provided and there is only one default output, otherwise return a
     * tensor array. The order of the tensor array is the same as the outputs
     * if provided, otherwise the order of outputNodes attribute of the model.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    execute(inputs, outputs) {
        inputs = this.normalizeInputs(inputs);
        outputs = this.normalizeOutputs(outputs);
        const result = this.executor.execute(inputs, outputs);
        return result.length > 1 ? result : result[0];
    }
    /**
     * Executes inference for the model for given input tensors in async
     * fashion, use this method when your model contains control flow ops.
     * @param inputs tensor, tensor array or tensor map of the inputs for the
     * model, keyed by the input node names.
     * @param outputs output node name from the Tensorflow model, if no outputs
     * are specified, the default outputs of the model would be used. You can
     * inspect intermediate nodes of the model by adding them to the outputs
     * array.
     *
     * @returns A Promise of single tensor if provided with a single output or
     * no outputs are provided and there is only one default output, otherwise
     * return a tensor map.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async executeAsync(inputs, outputs) {
        inputs = this.normalizeInputs(inputs);
        outputs = this.normalizeOutputs(outputs);
        const result = await this.executor.executeAsync(inputs, outputs);
        return result.length > 1 ? result : result[0];
    }
    convertTensorMapToTensorsMap(map) {
        return Object.keys(map).reduce((newMap, key) => {
            newMap[key] = [map[key]];
            return newMap;
        }, {});
    }
    /**
     * Releases the memory used by the weight tensors and resourceManager.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    dispose() {
        this.executor.dispose();
        if (this.initializer) {
            this.initializer.dispose();
        }
        this.resourceManager.dispose();
    }
}
/**
 * Load a graph model given a URL to the model definition.
 *
 * Example of loading MobileNetV2 from a URL and making a prediction with a
 * zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
 * const model = await tf.loadGraphModel(modelUrl);
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 *
 * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with
 * a zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';
 * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 * @param modelUrl The url or an `io.IOHandler` that loads the model.
 * @param options Options for the HTTP request, which allows to send credentials
 *    and custom headers.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */
async function loadGraphModel(modelUrl, options = {}) {
    if (modelUrl == null) {
        throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' +
            'or an IOHandler that loads the model');
    }
    if (options == null) {
        options = {};
    }
    if (options.fromTFHub) {
        if (modelUrl.load == null) {
            if (!modelUrl.endsWith('/')) {
                modelUrl = modelUrl + '/';
            }
            modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;
        }
    }
    const model = new GraphModel(modelUrl, options);
    await model.load();
    return model;
}
//# sourceMappingURL=graph_model.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js ***!
  \*****************************************************************************/
/*! exports provided: HashTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashTable", function() { return HashTable; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Hashtable contains a set of tensors, which can be accessed by key.
 */
class HashTable {
    /**
     * Constructor of HashTable. Creates a hash table.
     *
     * @param keyDType `dtype` of the table keys.
     * @param valueDType `dtype` of the table values.
     */
    constructor(keyDType, valueDType) {
        this.keyDType = keyDType;
        this.valueDType = valueDType;
        this.handle = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["scalar"])(0);
        // tslint:disable-next-line: no-any
        this.tensorMap = new Map();
        Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(this.handle);
    }
    get id() {
        return this.handle.id;
    }
    /**
     * Dispose the tensors and handle and clear the hashtable.
     */
    clearAndClose() {
        this.tensorMap.forEach(value => value.dispose());
        this.tensorMap.clear();
        this.handle.dispose();
    }
    /**
     * The number of items in the hash table.
     */
    size() {
        return this.tensorMap.size;
    }
    /**
     * Replaces the contents of the table with the specified keys and values.
     * @param keys Keys to store in the hashtable.
     * @param values Values to store in the hashtable.
     */
    async import(keys, values) {
        this.checkKeyAndValueTensor(keys, values);
        // We only store the primitive values of the keys, this allows lookup
        // to be O(1).
        const $keys = await keys.data();
        // Clear the hashTable before inserting new values.
        this.tensorMap.forEach(value => value.dispose());
        this.tensorMap.clear();
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
            const $values = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["unstack"])(values);
            const keysLength = $keys.length;
            const valuesLength = $values.length;
            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +
                `${keysLength} elements, the values has ${valuesLength} ` +
                `elements.`);
            for (let i = 0; i < keysLength; i++) {
                const key = $keys[i];
                const value = $values[i];
                Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(value);
                this.tensorMap.set(key, value);
            }
            return this.handle;
        });
    }
    /**
     * Looks up keys in a hash table, outputs the corresponding values.
     *
     * Performs batch lookups, for every element in the key tensor, `find`
     * stacks the corresponding value into the return tensor.
     *
     * If an element is not present in the table, the given `defaultValue` is
     * used.
     *
     * @param keys Keys to look up. Must have the same type as the keys of the
     *     table.
     * @param defaultValue The scalar `defaultValue` is the value output for keys
     *     not present in the table. It must also be of the same type as the
     *     table values.
     */
    async find(keys, defaultValue) {
        this.checkKeyAndValueTensor(keys, defaultValue);
        const $keys = await keys.data();
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
            const result = [];
            for (let i = 0; i < $keys.length; i++) {
                const key = $keys[i];
                const value = this.findWithDefault(key, defaultValue);
                result.push(value);
            }
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["stack"])(result);
        });
    }
    // tslint:disable-next-line: no-any
    findWithDefault(key, defaultValue) {
        const result = this.tensorMap.get(key);
        return result != null ? result : defaultValue;
    }
    checkKeyAndValueTensor(key, value) {
        if (key.dtype !== this.keyDType) {
            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +
                `${key.dtype}`);
        }
        if (value.dtype !== this.valueDType) {
            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +
                `${value.dtype}`);
        }
    }
}
//# sourceMappingURL=hash_table.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js ***!
  \*********************************************************************************/
/*! exports provided: getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow, isDynamicShape, isHashTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getExecutionSubgraph", function() { return getExecutionSubgraph; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodesInTopologicalOrder", function() { return getNodesInTopologicalOrder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isControlFlow", function() { return isControlFlow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDynamicShape", function() { return isDynamicShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHashTable", function() { return isHashTable; });
/* harmony import */ var _operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operations/executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Given graph inputs and desired outputs, find the minimal set of nodes
 * to execute in order to compute the outputs. In addition return other useful
 * info such:
 * - Missing inputs needed to compute the output.
 * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).
 * - Alternative inputs in order to avoid async (dynamic op) execution.
 */
function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {
    const usedNodes = new Set();
    const missingInputs = [];
    let dynamicNode = null;
    let syncInputs = null;
    // Start with the outputs, going backwards and find all the nodes that are
    // needed to compute those outputs.
    const seen = new Set();
    const inputNodeNames = Object.keys(inputs).map(name => Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__["parseNodeName"])(name)[0]);
    let initNodeNames = [];
    if (initNodes != null) {
        initNodeNames = initNodes.map(node => Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__["parseNodeName"])(node.name)[0]);
    }
    const frontier = [...outputs];
    while (frontier.length > 0) {
        const node = frontier.pop();
        if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {
            if (dynamicNode == null) {
                dynamicNode = node;
                syncInputs = dynamicNode.children.map(child => child.name)
                    .filter(name => usedNodes.has(name));
            }
        }
        usedNodes.add(node.name);
        // Weights are dead end since we already have their values.
        if (weightMap[node.name] != null) {
            continue;
        }
        // This node is a dead end since it's one of the user-provided inputs.
        if (inputNodeNames.indexOf(node.name) !== -1) {
            continue;
        }
        // This node is a dead end since it doesn't have any inputs.
        if (initNodeNames.indexOf(node.name) !== -1) {
            continue;
        }
        if (node.inputs.length === 0) {
            missingInputs.push(node.name);
            continue;
        }
        node.inputs.forEach(input => {
            // Don't add to the frontier if it is already there.
            if (seen.has(input.name)) {
                return;
            }
            seen.add(input.name);
            frontier.push(input);
        });
    }
    return { inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs };
}
/**
 * Given the execution info, return a list of nodes in topological order that
 * need to be executed to compute the output.
 */
function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {
    const { usedNodes, inputs } = executionInfo;
    const frontier = [];
    const inputNodes = Object.keys(inputs)
        .map(name => Object(_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__["parseNodeName"])(name)[0])
        .map(name => graph.nodes[name]);
    const initNodes = graph.initNodes;
    inputNodes.forEach(input => {
        if (usedNodes.has(input.name)) {
            frontier.push(input);
        }
    });
    graph.weights.forEach(weight => {
        if (usedNodes.has(weight.name)) {
            frontier.push(weight);
        }
    });
    if (initNodes != null) {
        initNodes.forEach(node => {
            if (usedNodes.has(node.name)) {
                frontier.push(node);
            }
        });
    }
    const seen = new Set();
    const orderedNodes = [];
    while (frontier.length > 0) {
        const node = frontier.pop();
        seen.add(node.name);
        if (!weightMap[node.name]) {
            orderedNodes.push(node);
        }
        node.children.forEach(child => {
            if (!seen.has(child.name) && usedNodes.has(child.name) &&
                child.inputs.every(input => seen.has(input.name))) {
                frontier.push(child);
            }
        });
    }
    return orderedNodes;
}
const CONTROL_FLOW_OPS = [
    'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',
    'StatelessWhile', 'if', 'While'
];
const DYNAMIC_SHAPE_OPS = [
    'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'
];
const HASH_TABLE_OPS = [
    'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',
    'LookupTableFind', 'LookupTableFindV2'
];
function isControlFlow(node) {
    return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;
}
function isDynamicShape(node) {
    return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;
}
function isHashTable(node) {
    return HASH_TABLE_OPS.indexOf(node.op) >= 0;
}
//# sourceMappingURL=model_analysis.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js ***!
  \***********************************************************************************/
/*! exports provided: ResourceManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceManager", function() { return ResourceManager; });
/**
 * Contains global resources of a model.
 */
class ResourceManager {
    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {
        this.hashTableNameToHandle = hashTableNameToHandle;
        this.hashTableMap = hashTableMap;
    }
    /**
     * Register a `HashTable` in the resource manager.
     *
     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,
     * where id is the table handle tensor's id.
     *
     * @param name Op node name that creates the `HashTable`.
     * @param hashTable The `HashTable` to be added to resource manager.
     */
    addHashTable(name, hashTable) {
        this.hashTableNameToHandle[name] = hashTable.handle;
        this.hashTableMap[hashTable.id] = hashTable;
    }
    /**
     * Get the table handle by node name.
     * @param name Op node name that creates the `HashTable`. This name is also
     *     used in the inputs list of lookup and import `HashTable` ops.
     */
    getHashTableHandleByName(name) {
        return this.hashTableNameToHandle[name];
    }
    /**
     * Get the actual `HashTable` by its handle tensor's id.
     * @param id The id of the handle tensor.
     */
    getHashTableById(id) {
        return this.hashTableMap[id];
    }
    /**
     * Dispose `ResourceManager`, including its hashTables and tensors in them.
     */
    dispose() {
        for (const key in this.hashTableMap) {
            this.hashTableMap[key].clearAndClose();
            delete this.hashTableMap[key];
        }
        for (const name in this.hashTableNameToHandle) {
            this.hashTableNameToHandle[name].dispose();
            delete this.hashTableNameToHandle[name];
        }
    }
}
//# sourceMappingURL=resource_manager.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js ***!
  \*******************************************************************************/
/*! exports provided: TensorArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TensorArray", function() { return TensorArray; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _tensor_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_utils */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * The TensorArray object keeps an array of Tensors.  It
 * allows reading from the array and writing to the array.
 */
class TensorArray {
    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {
        this.name = name;
        this.dtype = dtype;
        this.maxSize = maxSize;
        this.elementShape = elementShape;
        this.identicalElementShapes = identicalElementShapes;
        this.dynamicSize = dynamicSize;
        this.clearAfterRead = clearAfterRead;
        this.tensors = [];
        this.closed_ = false;
        this.idTensor = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["scalar"])(0);
        Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(this.idTensor);
    }
    get id() {
        return this.idTensor.id;
    }
    get closed() {
        return this.closed_;
    }
    /**
     * Dispose the tensors and idTensor and mark the TensoryArray as closed.
     */
    clearAndClose(keepIds) {
        this.tensors.forEach(tensor => {
            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {
                tensor.tensor.dispose();
            }
        });
        this.tensors = [];
        this.closed_ = true;
        this.idTensor.dispose();
    }
    size() {
        return this.tensors.length;
    }
    /**
     * Read the value at location index in the TensorArray.
     * @param index Number the index to read from.
     */
    read(index) {
        if (this.closed_) {
            throw new Error(`TensorArray ${this.name} has already been closed.`);
        }
        if (index < 0 || index >= this.size()) {
            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);
        }
        const tensorWithState = this.tensors[index];
        if (tensorWithState.cleared) {
            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +
                `(perhaps try setting clear_after_read = false?).`);
        }
        if (this.clearAfterRead) {
            tensorWithState.cleared = true;
        }
        tensorWithState.read = true;
        return tensorWithState.tensor;
    }
    /**
     * Helper method to read multiple tensors from the specified indices.
     */
    readMany(indices) {
        return indices.map(index => this.read(index));
    }
    /**
     * Write value into the index of the TensorArray.
     * @param index number the index to write to.
     * @param tensor
     */
    write(index, tensor) {
        if (this.closed_) {
            throw new Error(`TensorArray ${this.name} has already been closed.`);
        }
        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {
            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);
        }
        const t = this.tensors[index] || {};
        if (tensor.dtype !== this.dtype) {
            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},
          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);
        }
        // Set the shape for the first time write to unknow shape tensor array
        if (this.size() === 0 &&
            (this.elementShape == null || this.elementShape.length === 0)) {
            this.elementShape = tensor.shape;
        }
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);
        if (t.read) {
            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);
        }
        if (t.written) {
            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);
        }
        t.tensor = tensor;
        Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(tensor);
        t.written = true;
        this.tensors[index] = t;
    }
    /**
     * Helper method to write multiple tensors to the specified indices.
     */
    writeMany(indices, tensors) {
        if (indices.length !== tensors.length) {
            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +
                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);
        }
        indices.forEach((i, index) => this.write(i, tensors[index]));
    }
    /**
     * Return selected values in the TensorArray as a packed Tensor. All of
     * selected values must have been written and their shapes must all match.
     * @param [indices] number[] Optional. Taking values in [0, max_value). If the
     *    TensorArray is not dynamic, max_value=size(). If not specified returns
     *    all tensors in the original order.
     * @param [dtype]
     */
    gather(indices, dtype) {
        if (!!dtype && dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);
        }
        if (!indices) {
            indices = [];
            for (let i = 0; i < this.size(); i++) {
                indices.push(i);
            }
        }
        else {
            indices = indices.slice(0, this.size());
        }
        if (indices.length === 0) {
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tensor"])([], [0].concat(this.elementShape));
        }
        // Read all the PersistentTensors into a vector to keep track of
        // their memory.
        const tensors = this.readMany(indices);
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["stack"])(tensors, 0);
    }
    /**
     * Return the values in the TensorArray as a concatenated Tensor.
     */
    concat(dtype) {
        if (!!dtype && dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);
        }
        if (this.size() === 0) {
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tensor"])([], [0].concat(this.elementShape));
        }
        const indices = [];
        for (let i = 0; i < this.size(); i++) {
            indices.push(i);
        }
        // Collect all the tensors from the tensors array.
        const tensors = this.readMany(indices);
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["concat"])(tensors, 0);
    }
    /**
     * Scatter the values of a Tensor in specific indices of a TensorArray.
     * @param indices nummber[] values in [0, max_value). If the
     *    TensorArray is not dynamic, max_value=size().
     * @param tensor Tensor input tensor.
     */
    scatter(indices, tensor) {
        if (tensor.dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
        }
        if (indices.length !== tensor.shape[0]) {
            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
        }
        const maxIndex = Math.max(...indices);
        if (!this.dynamicSize && maxIndex >= this.maxSize) {
            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);
        }
        this.writeMany(indices, Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["unstack"])(tensor, 0));
    }
    /**
     * Split the values of a Tensor into the TensorArray.
     * @param length number[] with the lengths to use when splitting value along
     *    its first dimension.
     * @param tensor Tensor, the tensor to split.
     */
    split(length, tensor) {
        if (tensor.dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
        }
        let totalLength = 0;
        const cumulativeLengths = length.map(len => {
            totalLength += len;
            return totalLength;
        });
        if (totalLength !== tensor.shape[0]) {
            throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
        }
        if (!this.dynamicSize && length.length !== this.maxSize) {
            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +
                'and the TensorArray is not marked as dynamically resizeable');
        }
        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
        const tensors = [];
        Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
            tensor = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(tensor, [1, totalLength, elementPerRow]);
            for (let i = 0; i < length.length; ++i) {
                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];
                const indices = [0, previousLength, 0];
                const sizes = [1, length[i], elementPerRow];
                tensors[i] = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["slice"])(tensor, indices, sizes), this.elementShape);
            }
            return tensors;
        });
        const indices = [];
        for (let i = 0; i < length.length; i++) {
            indices[i] = i;
        }
        this.writeMany(indices, tensors);
    }
}
//# sourceMappingURL=tensor_array.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js ***!
  \******************************************************************************/
/*! exports provided: TensorList, fromTensor, reserve, scatter, split */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TensorList", function() { return TensorList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTensor", function() { return fromTensor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reserve", function() { return reserve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scatter", function() { return scatter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "split", function() { return split; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _tensor_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_utils */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * TensorList stores a container of `tf.Tensor` objects, which are accessible
 * via tensors field.
 *
 * In order to get a copy of the underlying list, use the copy method:
 * ```
 *    TensorList b = a.copy();
 *    b.tensors().pushBack(t);  // This does not modify a.tensors().
 * ```
 *
 * Note that this is not a deep copy: the memory locations of the underlying
 * tensors will still point to the same locations of the corresponding tensors
 * in the original.
 */
class TensorList {
    /**
     *
     * @param tensors list of tensors
     * @param elementShape shape of each tensor
     * @param elementDtype data type of each tensor
     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
     *   meaning that the size of `tensors` is unbounded.
     */
    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {
        this.tensors = tensors;
        this.elementShape = elementShape;
        this.elementDtype = elementDtype;
        if (tensors != null) {
            tensors.forEach(tensor => {
                if (elementDtype !== tensor.dtype) {
                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);
                }
                Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(elementShape, tensor.shape, 'TensorList shape mismatch: ');
                Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(tensor);
            });
        }
        this.idTensor = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["scalar"])(0);
        this.maxNumElements = maxNumElements;
        Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(this.idTensor);
    }
    get id() {
        return this.idTensor.id;
    }
    /**
     * Get a new TensorList containing a copy of the underlying tensor container.
     */
    copy() {
        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);
    }
    /**
     * Dispose the tensors and idTensor and clear the tensor list.
     */
    clearAndClose(keepIds) {
        this.tensors.forEach(tensor => {
            if (keepIds == null || !keepIds.has(tensor.id)) {
                tensor.dispose();
            }
        });
        this.tensors.length = 0;
        this.idTensor.dispose();
    }
    /**
     * The size of the tensors in the tensor list.
     */
    size() {
        return this.tensors.length;
    }
    /**
     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
     * tf.Tensor.
     * @param elementShape shape of each tensor
     * @param elementDtype data type of each tensor
     * @param numElements the number of elements to stack
     */
    stack(elementShape, elementDtype, numElements = -1) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        if (numElements !== -1 && this.tensors.length !== numElements) {
            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);
        }
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(elementShape, this.elementShape, 'TensorList shape mismatch: ');
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
            const reshapedTensors = this.tensors.map(tensor => Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(tensor, elementShape));
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["stack"])(reshapedTensors, 0);
        });
    }
    /**
     * Pop a tensor from the end of the list.
     * @param elementShape shape of the tensor
     * @param elementDtype data type of the tensor
     */
    popBack(elementShape, elementDtype) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        if (this.size() === 0) {
            throw new Error('Trying to pop from an empty list.');
        }
        const tensor = this.tensors.pop();
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(tensor.shape, elementShape, 'TensorList shape mismatch: ');
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(tensor, elementShape);
    }
    /**
     * Push a tensor to the end of the list.
     * @param tensor Tensor to be pushed.
     */
    pushBack(tensor) {
        if (tensor.dtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
        }
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');
        if (this.maxNumElements === this.size()) {
            throw new Error(`Trying to push element into a full list.`);
        }
        Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(tensor);
        this.tensors.push(tensor);
    }
    /**
     * Update the size of the list.
     * @param size the new size of the list.
     */
    resize(size) {
        if (size < 0) {
            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);
        }
        if (this.maxNumElements !== -1 && size > this.maxNumElements) {
            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);
        }
        this.tensors.length = size;
    }
    /**
     * Retrieve the element at the provided index
     * @param elementShape shape of the tensor
     * @param elementDtype dtype of the tensor
     * @param elementIndex index of the tensor
     */
    getItem(elementIndex, elementShape, elementDtype) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        if (elementIndex < 0 || elementIndex > this.tensors.length) {
            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);
        }
        if (this.tensors[elementIndex] == null) {
            throw new Error(`element at index ${elementIndex} is null.`);
        }
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');
        return this.tensors[elementIndex];
    }
    /**
     * Set the tensor at the index
     * @param elementIndex index of the tensor
     * @param tensor the tensor to be inserted into the list
     */
    setItem(elementIndex, tensor) {
        if (tensor.dtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
        }
        if (elementIndex < 0 ||
            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {
            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);
        }
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');
        Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["keep"])(tensor);
        this.tensors[elementIndex] = tensor;
    }
    /**
     * Return selected values in the TensorList as a stacked Tensor. All of
     * selected values must have been written and their shapes must all match.
     * @param indices indices of tensors to gather
     * @param elementDtype output tensor dtype
     * @param elementShape output tensor element shape
     */
    gather(indices, elementDtype, elementShape) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(this.elementShape, elementShape, 'TensorList shape mismatch: ');
        // When indices is greater than the size of the list, indices beyond the
        // size of the list are ignored.
        indices = indices.slice(0, this.size());
        if (indices.length === 0) {
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tensor"])([], [0].concat(this.elementShape));
        }
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
            const tensors = indices.map(i => Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this.tensors[i], elementShape));
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["stack"])(tensors, 0);
        });
    }
    /**
     * Return the values in the TensorList as a concatenated Tensor.
     * @param elementDtype output tensor dtype
     * @param elementShape output tensor element shape
     */
    concat(elementDtype, elementShape) {
        if (!!elementDtype && elementDtype !== this.elementDtype) {
            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);
        }
        Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(this.elementShape, elementShape, 'TensorList shape mismatch: ');
        if (this.size() === 0) {
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tensor"])([], [0].concat(this.elementShape));
        }
        return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
            const tensors = this.tensors.map(t => Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(t, elementShape));
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["concat"])(tensors, 0);
        });
    }
}
/**
 * Creates a TensorList which, when stacked, has the value of tensor.
 * @param tensor from tensor
 * @param elementShape output tensor element shape
 */
function fromTensor(tensor, elementShape, elementDtype) {
    const dtype = tensor.dtype;
    if (tensor.shape.length < 1) {
        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);
    }
    if (tensor.dtype !== elementDtype) {
        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);
    }
    const outputShape = tensor.shape.slice(1);
    Object(_tensor_utils__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatchAllowUndefinedSize"])(outputShape, elementShape, 'TensorList shape mismatch: ');
    const tensorList = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["unstack"])(tensor);
    return new TensorList(tensorList, elementShape, dtype);
}
/**
 * Return a TensorList of the given size with empty elements.
 * @param elementShape the shape of the future elements of the list
 * @param elementDtype the desired type of elements in the list
 * @param numElements the number of elements to reserve
 */
function reserve(elementShape, elementDtype, numElements) {
    return new TensorList([], elementShape, elementDtype, numElements);
}
/**
 * Put tensors at specific indices of a stacked tensor into a TensorList.
 * @param indices list of indices on how to scatter the tensor.
 * @param tensor input tensor.
 * @param elementShape the shape of the future elements of the list
 * @param numElements the number of elements to scatter
 */
function scatter(tensor, indices, elementShape, numElements) {
    if (indices.length !== tensor.shape[0]) {
        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
    }
    const maxIndex = Math.max(...indices);
    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {
        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);
    }
    const list = new TensorList([], elementShape, tensor.dtype, numElements);
    const tensors = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["unstack"])(tensor, 0);
    indices.forEach((value, index) => {
        list.setItem(value, tensors[index]);
    });
    return list;
}
/**
 * Split the values of a Tensor into a TensorList.
 * @param length the lengths to use when splitting value along
 *    its first dimension.
 * @param tensor the tensor to split.
 * @param elementShape the shape of the future elements of the list
 */
function split(tensor, length, elementShape) {
    let totalLength = 0;
    const cumulativeLengths = length.map(len => {
        totalLength += len;
        return totalLength;
    });
    if (totalLength !== tensor.shape[0]) {
        throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
    }
    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
    const tensors = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
        const tensors = [];
        tensor = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(tensor, [1, totalLength, elementPerRow]);
        for (let i = 0; i < length.length; ++i) {
            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];
            const indices = [0, previousLength, 0];
            const sizes = [1, length[i], elementPerRow];
            tensors[i] = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["reshape"])(Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["slice"])(tensor, indices, sizes), elementShape);
        }
        tensor.dispose();
        return tensors;
    });
    const list = new TensorList([], elementShape, tensor.dtype, length.length);
    for (let i = 0; i < tensors.length; i++) {
        list.setItem(i, tensors[i]);
    }
    return list;
}
//# sourceMappingURL=tensor_list.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js ***!
  \*******************************************************************************/
/*! exports provided: assertShapesMatchAllowUndefinedSize, shapesEqualAllowUndefinedSize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertShapesMatchAllowUndefinedSize", function() { return assertShapesMatchAllowUndefinedSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shapesEqualAllowUndefinedSize", function() { return shapesEqualAllowUndefinedSize; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * This differs from util.assertShapesMatch in that it allows values of
 * negative one, an undefined size of a dimensinon, in a shape to match
 * anything.
 */

function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].assert(shapesEqualAllowUndefinedSize(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}
function shapesEqualAllowUndefinedSize(n1, n2) {
    if (n1.length !== n2.length) {
        return false;
    }
    for (let i = 0; i < n1.length; i++) {
        if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=tensor_utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/index.js ***!
  \***************************************************************/
/*! exports provided: GraphModel, loadGraphModel, deregisterOp, registerOp, version_converter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _executor_graph_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./executor/graph_model */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GraphModel", function() { return _executor_graph_model__WEBPACK_IMPORTED_MODULE_0__["GraphModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadGraphModel", function() { return _executor_graph_model__WEBPACK_IMPORTED_MODULE_0__["loadGraphModel"]; });

/* harmony import */ var _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operations/custom_op/register */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deregisterOp", function() { return _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_1__["deregisterOp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerOp", function() { return _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_1__["registerOp"]; });

/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version */ "./node_modules/@tensorflow/tfjs-converter/dist/version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "version_converter", function() { return _version__WEBPACK_IMPORTED_MODULE_2__["version"]; });

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js ***!
  \**********************************************************************************************/
/*! exports provided: NodeValueImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NodeValueImpl", function() { return NodeValueImpl; });
/* harmony import */ var _executors_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/* harmony import */ var _operation_mapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation_mapper */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Helper class for lookup inputs and params for nodes in the model graph.
 */
class NodeValueImpl {
    constructor(node, tensorMap, context) {
        this.node = node;
        this.tensorMap = tensorMap;
        this.context = context;
        this.inputs = [];
        this.attrs = {};
        this.inputs = node.inputNames.map(name => this.getInput(name));
        if (node.rawAttrs != null) {
            this.attrs = Object.keys(node.rawAttrs)
                .reduce((attrs, key) => {
                attrs[key] = this.getAttr(key);
                return attrs;
            }, {});
        }
    }
    /**
     * Return the value of the attribute or input param.
     * @param name String: name of attribute or input param.
     */
    getInput(name) {
        return Object(_executors_utils__WEBPACK_IMPORTED_MODULE_0__["getTensor"])(name, this.tensorMap, this.context);
    }
    /**
     * Return the value of the attribute or input param.
     * @param name String: name of attribute or input param.
     */
    getAttr(name, defaultValue) {
        const value = this.node.rawAttrs[name];
        if (value.tensor != null) {
            return Object(_executors_utils__WEBPACK_IMPORTED_MODULE_0__["getTensor"])(name, this.tensorMap, this.context);
        }
        if (value.i != null || value.f != null) {
            return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getNumberParam"])(this.node.rawAttrs, name, defaultValue);
        }
        if (value.s != null) {
            return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getStringParam"])(this.node.rawAttrs, name, defaultValue);
        }
        if (value.b != null) {
            return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getBoolParam"])(this.node.rawAttrs, name, defaultValue);
        }
        if (value.shape != null) {
            return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getTensorShapeParam"])(this.node.rawAttrs, name, defaultValue);
        }
        if (value.type != null) {
            return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getDtypeParam"])(this.node.rawAttrs, name, defaultValue);
        }
        if (value.list != null) {
            if (value.list.i != null || value.list.f != null) {
                return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getNumericArrayParam"])(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.s != null) {
                return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getStringArrayParam"])(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.shape != null) {
                return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getTensorShapeArrayParam"])(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.b != null) {
                return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getBoolArrayParam"])(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.type != null) {
                return Object(_operation_mapper__WEBPACK_IMPORTED_MODULE_1__["getDtypeArrayParam"])(this.node.rawAttrs, name, defaultValue);
            }
        }
        return defaultValue;
    }
}
//# sourceMappingURL=node_value_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js ***!
  \***************************************************************************************/
/*! exports provided: registerOp, getRegisteredOp, deregisterOp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerOp", function() { return registerOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRegisteredOp", function() { return getRegisteredOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deregisterOp", function() { return deregisterOp; });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CUSTOM_OPS = {};
/**
 * Register an Op for graph model executor. This allow you to register
 * TensorFlow custom op or override existing op.
 *
 * Here is an example of registering a new MatMul Op.
 * ```js
 * const customMatmul = (node) =>
 *    tf.matMul(
 *        node.inputs[0], node.inputs[1],
 *        node.attrs['transpose_a'], node.attrs['transpose_b']);
 *
 * tf.registerOp('MatMul', customMatmul);
 * ```
 * The inputs and attrs of the node object is based on the TensorFlow op
 * registry.
 *
 * @param name The Tensorflow Op name.
 * @param opFunc An op function which is called with the current graph node
 * during execution and needs to return a tensor or a list of tensors. The node
 * has the following attributes:
 *    - attr: A map from attribute name to its value
 *    - inputs: A list of input tensors
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function registerOp(name, opFunc) {
    const opMapper = {
        tfOpName: name,
        category: 'custom',
        inputs: [],
        attrs: [],
        customExecutor: opFunc
    };
    CUSTOM_OPS[name] = opMapper;
}
/**
 * Retrieve the OpMapper object for the registered op.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function getRegisteredOp(name) {
    return CUSTOM_OPS[name];
}
/**
 * Deregister the Op for graph model executor.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function deregisterOp(name) {
    delete CUSTOM_OPS[name];
}
//# sourceMappingURL=register.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js ***!
  \**************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'BiasAdd':
        case 'AddV2':
        case 'Add': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["add"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'AddN': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["addN"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('tensors', node, tensorMap, context))];
        }
        case 'FloorMod':
        case 'Mod':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["mod"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        case 'Mul':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["mul"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        case 'RealDiv':
        case 'Div': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["div"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'DivNoNan': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["divNoNan"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'FloorDiv': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["floorDiv"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'Sub': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sub"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'Minimum': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["minimum"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'Maximum': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["maximum"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'Pow': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["pow"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'SquaredDifference': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["squaredDifference"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'arithmetic';
//# sourceMappingURL=arithmetic_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js ***!
  \**************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Abs':
        case 'ComplexAbs':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["abs"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Acos':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["acos"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Acosh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["acosh"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Asin':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["asin"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Asinh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["asinh"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Atan':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["atan"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Atan2':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["atan2"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('y', node, tensorMap, context))];
        case 'Atanh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["atanh"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Ceil':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["ceil"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Complex':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["complex"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('real', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('imag', node, tensorMap, context))];
        case 'Cos':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["cos"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Cosh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["cosh"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Elu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["elu"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Erf':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["erf"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Exp':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["exp"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Expm1': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["expm1"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Floor':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["floor"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Log':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["log"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Log1p': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["log1p"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Imag':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["imag"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Neg':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["neg"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Reciprocal': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["reciprocal"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Real':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["real"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Relu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["relu"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Round': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["round"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Selu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["selu"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Sigmoid':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sigmoid"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Sin':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sin"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Sign': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sign"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Sinh': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sinh"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Softplus': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["softplus"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Sqrt': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sqrt"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Square': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["square"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Tanh': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["tanh"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'Tan':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["tan"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        case 'Relu6':
        case 'ClipByValue':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["clipByValue"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('clipValueMin', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('clipValueMax', node, tensorMap, context))];
        case 'Rsqrt':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["rsqrt"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(node.inputNames[0], tensorMap, context))];
        case 'Prod':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["prod"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axes', node, tensorMap, context))];
        case 'LeakyRelu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["leakyRelu"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('alpha', node, tensorMap, context))];
        case 'Prelu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["prelu"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('alpha', node, tensorMap, context))];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'basic_math';
//# sourceMappingURL=basic_math_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js ***!
  \***********************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _executor_tensor_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../executor/tensor_array */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js");
/* harmony import */ var _executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../executor/tensor_list */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const executeOp = async (node, tensorMap, context) => {
    switch (node.op) {
        case 'If':
        case 'StatelessIf': {
            const thenFunc = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('thenBranch', node, tensorMap, context);
            const elseFunc = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elseBranch', node, tensorMap, context);
            const cond = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('cond', node, tensorMap, context);
            const args = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('args', node, tensorMap, context);
            const condValue = await cond.data();
            if (condValue[0]) {
                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
            }
            else {
                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
            }
        }
        case 'While':
        case 'StatelessWhile': {
            const bodyFunc = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('body', node, tensorMap, context);
            const condFunc = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('cond', node, tensorMap, context);
            const args = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('args', node, tensorMap, context);
            // Calculate the condition of the loop
            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));
            const argIds = args.map(tensor => tensor.id);
            let condValue = await condResult[0].data();
            // Dispose the intermediate tensors for condition function
            condResult.forEach(tensor => {
                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {
                    tensor.dispose();
                }
            });
            let result = args;
            while (condValue[0]) {
                // Record the previous result for intermediate tensor tracking
                const origResult = result;
                // Execution the body of the loop
                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
                const resultIds = result.map(tensor => tensor.id);
                // Dispose the intermediate tensor for body function that is not global
                // kept, not input/output of the body function
                origResult.forEach(tensor => {
                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&
                        resultIds.indexOf(tensor.id) === -1) {
                        tensor.dispose();
                    }
                });
                // Recalcuate the condition of the loop using the latest results.
                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));
                condValue = await condResult[0].data();
                // Dispose the intermediate tensors for condition function
                condResult.forEach(tensor => {
                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&
                        resultIds.indexOf(tensor.id) === -1) {
                        tensor.dispose();
                    }
                });
            }
            return result;
        }
        case 'LoopCond': {
            const pred = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('pred', node, tensorMap, context);
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cloneTensor"])(pred)];
        }
        case 'Switch': {
            const pred = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('pred', node, tensorMap, context);
            let data = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('data', node, tensorMap, context);
            if (!data.kept) {
                data = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cloneTensor"])(data);
            }
            // Outputs nodes :0 => false, :1 => true
            return (await pred.data())[0] ? [undefined, data] : [data, undefined];
        }
        case 'Merge': {
            const inputName = node.inputNames.find(name => Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getTensor"])(name, tensorMap, context) !== undefined);
            if (inputName) {
                const data = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getTensor"])(inputName, tensorMap, context);
                return [Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cloneTensor"])(data)];
            }
            return undefined;
        }
        case 'Enter': {
            const frameId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('frameName', node, tensorMap, context);
            const data = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            context.enterFrame(frameId);
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cloneTensor"])(data)];
        }
        case 'Exit': {
            const data = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            context.exitFrame();
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cloneTensor"])(data)];
        }
        case 'NextIteration': {
            const data = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            context.nextIteration();
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cloneTensor"])(data)];
        }
        case 'TensorArrayV3': {
            const size = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('size', node, tensorMap, context);
            const dtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('dtype', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const dynamicSize = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('dynamicSize', node, tensorMap, context);
            const clearAfterRead = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('clearAfterRead', node, tensorMap, context);
            const identicalElementShapes = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('identicalElementShapes', node, tensorMap, context);
            const name = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('name', node, tensorMap, context);
            const tensorArray = new _executor_tensor_array__WEBPACK_IMPORTED_MODULE_1__["TensorArray"](name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);
            context.addTensorArray(tensorArray);
            return [tensorArray.idTensor, Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["scalar"])(1.0)];
        }
        case 'TensorArrayWriteV3': {
            const id = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const index = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('index', node, tensorMap, context);
            const writeTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const writeTensorArray = context.getTensorArray(id.id);
            writeTensorArray.write(index, writeTensor);
            return [writeTensorArray.idTensor];
        }
        case 'TensorArrayReadV3': {
            const readId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const readIndex = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('index', node, tensorMap, context);
            const readTensorArray = context.getTensorArray(readId.id);
            return [readTensorArray.read(readIndex)];
        }
        case 'TensorArrayGatherV3': {
            const gatherId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const gatherIndices = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('indices', node, tensorMap, context);
            const gatherDtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('dtype', node, tensorMap, context);
            const gatherTensorArray = context.getTensorArray(gatherId.id);
            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];
        }
        case 'TensorArrayScatterV3': {
            const scatterId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const scatterIndices = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('indices', node, tensorMap, context);
            const scatterTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const scatterTensorArray = context.getTensorArray(scatterId.id);
            scatterTensorArray.scatter(scatterIndices, scatterTensor);
            return [scatterTensorArray.idTensor];
        }
        case 'TensorArrayConcatV3': {
            const concatId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const concatTensorArray = context.getTensorArray(concatId.id);
            const concatDtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('dtype', node, tensorMap, context);
            return [concatTensorArray.concat(concatDtype)];
        }
        case 'TensorArraySplitV3': {
            const splitId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const splitTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const lengths = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('lengths', node, tensorMap, context);
            const splitTensorArray = context.getTensorArray(splitId.id);
            splitTensorArray.split(lengths, splitTensor);
            return [splitTensorArray.idTensor];
        }
        case 'TensorArraySizeV3': {
            const sizeId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const sizeTensorArray = context.getTensorArray(sizeId.id);
            return [Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["scalar"])(sizeTensorArray.size(), 'int32')];
        }
        case 'TensorArrayCloseV3': {
            const closeId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorArrayId', node, tensorMap, context);
            const closeTensorArray = context.getTensorArray(closeId.id);
            closeTensorArray.clearAndClose();
            return [closeTensorArray.idTensor];
        }
        case 'TensorListSetItem': {
            const idTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorListId', node, tensorMap, context);
            const index = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('index', node, tensorMap, context);
            const writeTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            tensorList.setItem(index, writeTensor);
            return [tensorList.idTensor];
        }
        case 'TensorListGetItem': {
            const idTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorListId', node, tensorMap, context);
            const readIndex = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('index', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const elementDType = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementDType', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            return [tensorList.getItem(readIndex, elementShape, elementDType)];
        }
        case 'TensorListScatterV2':
        case 'TensorListScatter': {
            const scatterIndices = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('indices', node, tensorMap, context);
            const scatterTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const numElements = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('numElements', node, tensorMap, context);
            const tensorList = Object(_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__["scatter"])(scatterTensor, scatterIndices, elementShape, numElements);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        case 'TensorListReserve': {
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const elementDtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementDType', node, tensorMap, context);
            const numElements = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('numElements', node, tensorMap, context);
            const tensorList = Object(_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__["reserve"])(elementShape, elementDtype, numElements);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        case 'TensorListGather': {
            const gatherId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorListId', node, tensorMap, context);
            const gatherIndices = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('indices', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const elementDtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementDType', node, tensorMap, context);
            const tensorList = context.getTensorList(gatherId.id);
            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];
        }
        case 'TensorListStack': {
            const idTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorListId', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const elementDtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementDType', node, tensorMap, context);
            const numElements = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('numElements', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            return [tensorList.stack(elementShape, elementDtype, numElements)];
        }
        case 'TensorListFromTensor': {
            const tensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const elementDtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementDType', node, tensorMap, context);
            const tensorList = Object(_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__["fromTensor"])(tensor, elementShape, elementDtype);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        case 'TensorListConcat': {
            const concatId = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorListId', node, tensorMap, context);
            const tensorList = context.getTensorList(concatId.id);
            const concatDtype = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('dtype', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            return [tensorList.concat(concatDtype, elementShape)];
        }
        case 'TensorListPushBack': {
            const idTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorListId', node, tensorMap, context);
            const writeTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            tensorList.pushBack(writeTensor);
            return [tensorList.idTensor];
        }
        case 'TensorListPopBack': {
            const idTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensorListId', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const elementDType = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementDType', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            return [tensorList.popBack(elementShape, elementDType)];
        }
        case 'TensorListSplit': {
            const splitTensor = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('tensor', node, tensorMap, context);
            const elementShape = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('elementShape', node, tensorMap, context);
            const lengths = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["getParamValue"])('lengths', node, tensorMap, context);
            const tensorList = Object(_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__["split"])(splitTensor, lengths, elementShape);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'control';
//# sourceMappingURL=control_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js ***!
  \***************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


function fusedConvAndDepthWiseParams(node, tensorMap, context) {
    const [extraOp, activationFunc] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('fusedOps', node, tensorMap, context);
    const isBiasAdd = extraOp === 'biasadd';
    const isPrelu = activationFunc === 'prelu';
    const isBatchNorm = extraOp === 'fusedbatchnorm';
    const numArgs = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('numArgs', node, tensorMap, context);
    if (isBiasAdd) {
        if (isPrelu && numArgs !== 2) {
            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +
                'must have two extra arguments: bias and alpha.');
        }
        if (!isPrelu && numArgs !== 1) {
            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +
                'one extra argument: bias.');
        }
    }
    if (isBatchNorm) {
        throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');
    }
    const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
    const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getPadding"])(node, tensorMap, context);
    const dataFormat = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dataFormat', node, tensorMap, context)
        .toUpperCase();
    const dilations = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dilations', node, tensorMap, context);
    const [biasArg, preluArg] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('args', node, tensorMap, context);
    return {
        stride,
        pad,
        dataFormat,
        dilations,
        biasArg,
        preluArg,
        activationFunc
    };
}
const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Conv1D': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('stride', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const dataFormat = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dataFormat', node, tensorMap, context)
                .toUpperCase();
            const dilation = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dilation', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["conv1d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];
        }
        case 'Conv2D': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getPadding"])(node, tensorMap, context);
            const dataFormat = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dataFormat', node, tensorMap, context)
                .toUpperCase();
            const dilations = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dilations', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["conv2d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
        }
        case '_FusedConv2D': {
            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc } = fusedConvAndDepthWiseParams(node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["fused"].conv2d({
                    x: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context),
                    filter: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context),
                    strides: [stride[1], stride[2]],
                    pad: pad,
                    dataFormat: dataFormat,
                    dilations: [dilations[1], dilations[2]],
                    bias: biasArg,
                    activation: activationFunc,
                    preluActivationWeights: preluArg
                })];
        }
        case 'FusedDepthwiseConv2dNative': {
            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc } = fusedConvAndDepthWiseParams(node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["fused"].depthwiseConv2d({
                    x: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context),
                    filter: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context),
                    strides: [stride[1], stride[2]],
                    pad: pad,
                    dataFormat: dataFormat,
                    dilations: [dilations[1], dilations[2]],
                    bias: biasArg,
                    activation: activationFunc,
                    preluActivationWeights: preluArg
                })];
        }
        case 'Conv2DBackpropInput':
        case 'Conv2dTranspose': {
            const shape = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('outputShape', node, tensorMap, context);
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getPadding"])(node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["conv2dTranspose"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];
        }
        case 'DepthwiseConv2dNative':
        case 'DepthwiseConv2d': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getPadding"])(node, tensorMap, context);
            const dilations = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dilations', node, tensorMap, context);
            const dataFormat = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dataFormat', node, tensorMap, context)
                .toUpperCase();
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["depthwiseConv2d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('input', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
        }
        case 'Conv3D': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const dataFormat = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dataFormat', node, tensorMap, context)
                .toUpperCase();
            const dilations = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dilations', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["conv3d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];
        }
        case 'AvgPool': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const kernelSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["avgPool"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
        }
        case 'MaxPool': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const kernelSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["maxPool"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
        }
        case 'MaxPoolWithArgmax': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const kernelSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('kernelSize', node, tensorMap, context);
            const includeBatchInIndex = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('includeBatchInIndex', node, tensorMap, context);
            const { result, indexes } = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["maxPoolWithArgmax"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);
            return [result, indexes];
        }
        case 'AvgPool3D': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const kernelSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["avgPool3d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
        }
        case 'MaxPool3D': {
            const stride = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const kernelSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["maxPool3d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
        }
        case 'Dilation2D': {
            const strides = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('strides', node, tensorMap, context);
            const pad = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('pad', node, tensorMap, context);
            const dilations = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dilations', node, tensorMap, context);
            // strides: [1, stride_height, stride_width, 1].
            const strideHeight = strides[1];
            const strideWidth = strides[2];
            // dilations: [1, dilation_height, dilation_width, 1].
            const dilationHeight = dilations[1];
            const dilationWidth = dilations[2];
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["dilation2d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'convolution';
//# sourceMappingURL=convolution_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js ***!
  \************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Fill': {
            const shape = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('shape', node, tensorMap, context);
            const dtype = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dtype', node, tensorMap, context);
            const value = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('value', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["fill"](shape, value, dtype)];
        }
        case 'LinSpace': {
            const start = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('start', node, tensorMap, context);
            const stop = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('stop', node, tensorMap, context);
            const num = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('num', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["linspace"](start, stop, num)];
        }
        case 'Multinomial': {
            const logits = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('logits', node, tensorMap, context);
            const numSamples = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('numSamples', node, tensorMap, context);
            const seed = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('seed', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["multinomial"](logits, numSamples, seed)];
        }
        case 'OneHot': {
            const indices = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('indices', node, tensorMap, context);
            const depth = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('depth', node, tensorMap, context);
            const onValue = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('onValue', node, tensorMap, context);
            const offValue = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('offValue', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["oneHot"](indices, depth, onValue, offValue)];
        }
        case 'Ones': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["ones"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('shape', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dtype', node, tensorMap, context))];
        }
        case 'OnesLike': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["onesLike"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'RandomUniform': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["randomUniform"](
                // tslint:disable-next-line:no-any
                Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('shape', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('minval', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('maxval', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dtype', node, tensorMap, context))];
        }
        case 'Range': {
            const start = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('start', node, tensorMap, context);
            const stop = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('stop', node, tensorMap, context);
            const step = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('step', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["range"](start, stop, step, Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dtype', node, tensorMap, context))];
        }
        case 'TruncatedNormal': {
            const shape = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('shape', node, tensorMap, context);
            const mean = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('mean', node, tensorMap, context);
            const stdDev = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('stdDev', node, tensorMap, context);
            const seed = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('seed', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["truncatedNormal"](shape, mean, stdDev, Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dtype', node, tensorMap, context), seed)];
        }
        case 'Zeros': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["zeros"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('shape', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dtype', node, tensorMap, context))];
        }
        case 'ZerosLike': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["zerosLike"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'creation';
//# sourceMappingURL=creation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js ***!
  \***********************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


function nmsParams(node, tensorMap, context) {
    const boxes = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('boxes', node, tensorMap, context);
    const scores = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('scores', node, tensorMap, context);
    const maxOutputSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('maxOutputSize', node, tensorMap, context);
    const iouThreshold = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('iouThreshold', node, tensorMap, context);
    const scoreThreshold = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('scoreThreshold', node, tensorMap, context);
    const softNmsSigma = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('softNmsSigma', node, tensorMap, context);
    return {
        boxes,
        scores,
        maxOutputSize,
        iouThreshold,
        scoreThreshold,
        softNmsSigma
    };
}
const executeOp = async (node, tensorMap, context) => {
    switch (node.op) {
        case 'NonMaxSuppressionV5': {
            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);
            const result = await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["image"].nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
            return [result.selectedIndices, result.selectedScores];
        }
        case 'NonMaxSuppressionV4': {
            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);
            const padToMaxOutputSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('padToMaxOutputSize', node, tensorMap, context);
            const result = await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["image"].nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
            return [result.selectedIndices, result.validOutputs];
        }
        case 'NonMaxSuppressionV3':
        case 'NonMaxSuppressionV2': {
            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);
            return [await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["image"].nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];
        }
        case 'Where': {
            const condition = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["cast"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('condition', node, tensorMap, context), 'bool');
            const result = [await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["whereAsync"](condition)];
            condition.dispose();
            return result;
        }
        case 'ListDiff': {
            return _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["setdiff1dAsync"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('y', node, tensorMap, context));
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'dynamic';
//# sourceMappingURL=dynamic_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js ***!
  \**************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'TopKV2': {
            const x = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context);
            const k = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('k', node, tensorMap, context);
            const sorted = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('sorted', node, tensorMap, context);
            const result = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["topk"](x, k, sorted);
            return [result.values, result.indices];
        }
        case 'Unique': {
            const x = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context);
            const result = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["unique"](x);
            return [result.values, result.indices];
        }
        case 'UniqueV2': {
            const x = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context);
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const result = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["unique"](x, axis);
            return [result.values, result.indices];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'evaluation';
//# sourceMappingURL=evaluation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js ***!
  \*********************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Const': {
            return tensorMap[node.name];
        }
        case 'PlaceholderWithDefault':
            const def = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('default', node, tensorMap, context);
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(node.name, tensorMap, context) || def];
        case 'Placeholder':
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getTensor"])(node.name, tensorMap, context)];
        case 'Identity':
        case 'StopGradient':
        case 'FakeQuantWithMinMaxVars': { // This op is currently ignored.
            const data = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context);
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_1__["cloneTensor"])(data)];
        }
        case 'IdentityN':
            return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context)
                .map((t) => Object(_utils__WEBPACK_IMPORTED_MODULE_1__["cloneTensor"])(t));
        case 'Snapshot':
            const snapshot = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context);
            return [Object(_utils__WEBPACK_IMPORTED_MODULE_1__["cloneTensor"])(snapshot)];
        case 'Shape':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["tensor1d"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context).shape, 'int32')];
        case 'ShapeN':
            return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context)
                .map((t) => _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["tensor1d"](t.shape));
        case 'Size':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["scalar"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context).size, 'int32')];
        case 'Rank':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["scalar"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context).rank, 'int32')];
        case 'NoOp':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["scalar"](1)];
        case 'Print':
            const input = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context);
            const data = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('data', node, tensorMap, context);
            const message = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('message', node, tensorMap, context);
            const summarize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('summarize', node, tensorMap, context);
            console.warn('The graph has a tf.print() operation,' +
                'usually used for debugging, which slows down performance.');
            console.log(message);
            for (let i = 0; i < data.length; i++) {
                console.log(Array.prototype.slice.call(data[i].dataSync())
                    .slice(0, summarize));
            }
            return [input];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'graph';
//# sourceMappingURL=graph_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js ***!
  \**************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _executor_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../executor/hash_table */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const executeOp = async (node, tensorMap, context, resourceManager) => {
    switch (node.op) {
        case 'HashTable':
        case 'HashTableV2': {
            const keyDType = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keyDType', node, tensorMap, context);
            const valueDType = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('valueDType', node, tensorMap, context);
            const hashTable = new _executor_hash_table__WEBPACK_IMPORTED_MODULE_0__["HashTable"](keyDType, valueDType);
            resourceManager.addHashTable(node.name, hashTable);
            return [hashTable.handle];
        }
        case 'LookupTableImport':
        case 'LookupTableImportV2': {
            const handle = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('tableHandle', node, tensorMap, context, resourceManager);
            const keys = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keys', node, tensorMap, context);
            const values = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('values', node, tensorMap, context);
            const hashTable = resourceManager.getHashTableById(handle.id);
            return [await hashTable.import(keys, values)];
        }
        case 'LookupTableFind':
        case 'LookupTableFindV2': {
            const handle = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('tableHandle', node, tensorMap, context, resourceManager);
            const keys = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keys', node, tensorMap, context);
            const defaultValue = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('defaultValue', node, tensorMap, context);
            const hashTable = resourceManager.getHashTableById(handle.id);
            return [await hashTable.find(keys, defaultValue)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'hash_table';
//# sourceMappingURL=hash_table_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js ***!
  \*********************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'ResizeBilinear': {
            const images = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('images', node, tensorMap, context);
            const size = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('size', node, tensorMap, context);
            const alignCorners = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('alignCorners', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["image"].resizeBilinear(images, [size[0], size[1]], alignCorners)];
        }
        case 'ResizeNearestNeighbor': {
            const images = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('images', node, tensorMap, context);
            const size = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('size', node, tensorMap, context);
            const alignCorners = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('alignCorners', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["image"].resizeNearestNeighbor(images, [size[0], size[1]], alignCorners)];
        }
        case 'CropAndResize': {
            const image = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('image', node, tensorMap, context);
            const boxes = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('boxes', node, tensorMap, context);
            const boxInd = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('boxInd', node, tensorMap, context);
            const cropSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('cropSize', node, tensorMap, context);
            const method = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('method', node, tensorMap, context);
            const extrapolationValue = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('extrapolationValue', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["image"].cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'image';
//# sourceMappingURL=image_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js ***!
  \***********************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Equal': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["equal"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'NotEqual': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["notEqual"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'Greater': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["greater"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'GreaterEqual': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["greaterEqual"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'Less': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["less"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'LessEqual': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["lessEqual"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'LogicalAnd': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["logicalAnd"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'LogicalNot': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["logicalNot"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context))];
        }
        case 'LogicalOr': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["logicalOr"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        case 'Select':
        case 'SelectV2': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["where"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('condition', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'logical';
//# sourceMappingURL=logical_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js ***!
  \************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'BatchMatMul':
        case 'BatchMatMulV2':
        case 'MatMul':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["matMul"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('transposeA', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('transposeB', node, tensorMap, context))];
        case 'Transpose':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["transpose"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('perm', node, tensorMap, context))];
        case '_FusedMatMul':
            const [extraOp, activationFunc] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('fusedOps', node, tensorMap, context);
            const isBiasAdd = extraOp === 'biasadd';
            const isPrelu = activationFunc === 'prelu';
            const numArgs = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('numArgs', node, tensorMap, context);
            if (isBiasAdd) {
                if (isPrelu && numArgs !== 2) {
                    throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' +
                        'extra arguments: bias and alpha.');
                }
                if (!isPrelu && numArgs !== 1) {
                    throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');
                }
            }
            const [biasArg, preluArg] = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('args', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["fused"].matMul({
                    a: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('a', node, tensorMap, context),
                    b: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('b', node, tensorMap, context),
                    transposeA: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('transposeA', node, tensorMap, context),
                    transposeB: Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('transposeB', node, tensorMap, context),
                    bias: biasArg,
                    activation: activationFunc,
                    preluActivationWeights: preluArg
                })];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'matrices';
//# sourceMappingURL=matrices_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js ***!
  \*****************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'FusedBatchNorm':
        case 'FusedBatchNormV2': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["batchNorm"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('mean', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('variance', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('offset', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('scale', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('epsilon', node, tensorMap, context))];
        }
        case 'FusedBatchNormV3': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["batchNorm"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('mean', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('variance', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('offset', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('scale', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('epsilon', node, tensorMap, context))];
        }
        case 'LRN': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["localResponseNormalization"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('radius', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('bias', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('alpha', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('beta', node, tensorMap, context))];
        }
        case 'Softmax': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["softmax"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'LogSoftmax': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["logSoftmax"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'SparseToDense': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sparseToDense"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('sparseIndices', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('outputShape', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('sparseValues', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('defaultValue', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'normalization';
//# sourceMappingURL=normalization_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js ***!
  \*************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Max': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const keepDims = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["max"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Mean': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const keepDims = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["mean"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Min': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const keepDims = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["min"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Sum': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const keepDims = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["sum"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'All': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const keepDims = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["all"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Any': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const keepDims = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["any"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'ArgMax': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["argMax"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis)];
        }
        case 'ArgMin': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["argMin"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis)];
        }
        case 'Prod': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const keepDims = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["prod"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Cumsum': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            const exclusive = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('exclusive', node, tensorMap, context);
            const reverse = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('reverse', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["cumsum"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis, exclusive, reverse)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'reduction';
//# sourceMappingURL=reduction_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js ***!
  \**************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'ConcatV2':
        case 'Concat': {
            const n = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('n', node, tensorMap, context);
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('axis', node, tensorMap, context);
            let inputs = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('tensors', node, tensorMap, context);
            inputs = inputs.slice(0, n);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["concat"](inputs, axis)];
        }
        case 'GatherV2':
        case 'Gather': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('axis', node, tensorMap, context);
            const input = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('x', node, tensorMap, context);
            const indices = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('indices', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["gather"](input, _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["cast"](indices, 'int32'), axis)];
        }
        case 'ReverseV2':
        case 'Reverse': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('axis', node, tensorMap, context);
            const input = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('x', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["reverse"](input, axis)];
        }
        case 'Slice': {
            // tslint:disable-next-line:no-any
            const begin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('begin', node, tensorMap, context);
            // tslint:disable-next-line:no-any
            const size = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('size', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["slice"](Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('x', node, tensorMap, context), begin, size)];
        }
        case 'StridedSlice': {
            const begin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('begin', node, tensorMap, context);
            const end = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('end', node, tensorMap, context);
            const strides = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('strides', node, tensorMap, context);
            const beginMask = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('beginMask', node, tensorMap, context);
            const endMask = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('endMask', node, tensorMap, context);
            const ellipsisMask = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('ellipsisMask', node, tensorMap, context);
            const newAxisMask = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('newAxisMask', node, tensorMap, context);
            const shrinkAxisMask = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('shrinkAxisMask', node, tensorMap, context);
            const tensor = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('x', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["stridedSlice"](tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];
        }
        case 'Pack': {
            return Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"])(() => {
                const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('axis', node, tensorMap, context);
                const tensors = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('tensors', node, tensorMap, context);
                // Reshape the tensors to the first tensor's shape if they don't
                // match.
                const shape = tensors[0].shape;
                const squeezedShape = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["squeeze"](tensors[0]).shape;
                const mapped = tensors.map(tensor => {
                    const sameShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].arraysEqual(tensor.shape, shape);
                    if (!sameShape &&
                        !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].arraysEqual(_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["squeeze"](tensor).shape, squeezedShape)) {
                        throw new Error('the input tensors shape does not match');
                    }
                    return sameShape ? tensor : _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["reshape"](tensor, shape);
                });
                return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["stack"](mapped, axis)];
            });
        }
        case 'Unpack': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('axis', node, tensorMap, context);
            const tensor = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('tensor', node, tensorMap, context);
            return _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["unstack"](tensor, axis);
        }
        case 'Tile': {
            const reps = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('reps', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["tile"](Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('x', node, tensorMap, context), reps)];
        }
        case 'Split':
        case 'SplitV': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('axis', node, tensorMap, context);
            const numOrSizeSplits = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('numOrSizeSplits', node, tensorMap, context);
            const tensor = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('x', node, tensorMap, context);
            return _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["split"](tensor, numOrSizeSplits, axis);
        }
        case 'ScatterNd': {
            const indices = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('indices', node, tensorMap, context);
            const values = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('values', node, tensorMap, context);
            const shape = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('shape', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["scatterND"](indices, values, shape)];
        }
        case 'GatherNd': {
            const x = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('x', node, tensorMap, context);
            const indices = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('indices', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["gatherND"](x, indices)];
        }
        case 'SparseToDense': {
            const indices = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('sparseIndices', node, tensorMap, context);
            const shape = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('outputShape', node, tensorMap, context);
            const sparseValues = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('sparseValues', node, tensorMap, context);
            const defaultValue = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["getParamValue"])('defaultValue', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["sparseToDense"](indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?
                    defaultValue :
                    _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__["cast"](defaultValue, sparseValues.dtype))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'slice_join';
//# sourceMappingURL=slice_join_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js ***!
  \************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'FFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["fft"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'IFFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["ifft"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'RFFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["rfft"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        case 'IRFFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["irfft"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'spectral';
//# sourceMappingURL=spectral_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js ***!
  \******************************************************************************************************/
/*! exports provided: executeOp, CATEGORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CATEGORY", function() { return CATEGORY; });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Cast': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["cast"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dtype', node, tensorMap, context))];
        }
        case 'ExpandDims': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["expandDims"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis)];
        }
        case 'Squeeze': {
            const axis = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["squeeze"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), axis)];
        }
        case 'Reshape': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["reshape"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('shape', node, tensorMap, context))];
        }
        case 'MirrorPad': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["mirrorPad"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('padding', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('mode', node, tensorMap, context))];
        }
        case 'PadV2':
        case 'Pad': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["pad"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('padding', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('constantValue', node, tensorMap, context))];
        }
        case 'SpaceToBatchND': {
            const blockShape = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('blockShape', node, tensorMap, context);
            const paddings = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('paddings', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["spaceToBatchND"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), blockShape, paddings)];
        }
        case 'BatchToSpaceND': {
            const blockShape = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('blockShape', node, tensorMap, context);
            const crops = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('crops', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["batchToSpaceND"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), blockShape, crops)];
        }
        case 'DepthToSpace': {
            const blockSize = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('blockSize', node, tensorMap, context);
            const dataFormat = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('dataFormat', node, tensorMap, context).toUpperCase();
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["depthToSpace"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), blockSize, dataFormat)];
        }
        case 'BroadcastTo': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_0__["broadcastTo"](Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('x', node, tensorMap, context), Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParamValue"])('shape', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'transformation';
//# sourceMappingURL=transformation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js ***!
  \************************************************************************************/
/*! exports provided: getParamValue, getTensor, getTensorsForCurrentContenxt, getNodeNameAndIndex, parseNodeName, split, getPadding, cloneTensor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParamValue", function() { return getParamValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTensor", function() { return getTensor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTensorsForCurrentContenxt", function() { return getTensorsForCurrentContenxt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodeNameAndIndex", function() { return getNodeNameAndIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseNodeName", function() { return parseNodeName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "split", function() { return split; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPadding", function() { return getPadding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneTensor", function() { return cloneTensor; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function getParamValue(paramName, node, tensorMap, context, resourceManager) {
    const inputParam = node.inputParams[paramName];
    if (inputParam && inputParam.inputIndexStart !== undefined) {
        const start = inputParam.inputIndexStart;
        const end = inputParam.inputIndexEnd === 0 ?
            undefined :
            (inputParam.inputIndexEnd === undefined ? start + 1 :
                inputParam.inputIndexEnd);
        if (inputParam.type === 'tensor') {
            return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context, resourceManager);
        }
        if (inputParam.type === 'tensors') {
            const inputs = node.inputNames.slice(start, end);
            return inputs.map(name => getTensor(name, tensorMap, context, resourceManager));
        }
        const tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context, resourceManager);
        const data = tensor.dataSync();
        return inputParam.type === 'number' ?
            data[0] :
            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].toNestedArray(tensor.shape, data);
    }
    const attrParam = node.attrParams[paramName];
    return attrParam && attrParam.value;
}
/**
 * Retrieve the tensor from tensorsMap based on input name.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */
function getTensor(name, tensorsMap, context, resourceManager) {
    const [nodeName, index] = parseNodeName(name);
    if (resourceManager != null) {
        const tensor = resourceManager.getHashTableHandleByName(nodeName);
        if (tensor != null) {
            return tensor;
        }
    }
    const contextId = context.currentContextIds.find(contextId => {
        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
    });
    return contextId !== undefined ?
        tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :
        undefined;
}
/**
 * Retrieve the tensors based on input name for current context.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */
function getTensorsForCurrentContenxt(name, tensorsMap, context) {
    return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];
}
/**
 * Returns the node name and index from the Node input name.
 * @param inputName The input name of the node, in format of
 * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is
 * default to 0.
 */
function getNodeNameAndIndex(inputName, context) {
    const [nodeName, index] = parseNodeName(inputName);
    return [
        getNodeNameWithContextId(nodeName, context && context.currentContextId),
        index
    ];
}
function getNodeNameWithContextId(name, contextId) {
    return !!contextId ? `${name}-${contextId}` : name;
}
function parseNodeName(name) {
    const parts = name.split(':');
    if (parts.length === 1) {
        return [name, 0];
    }
    const nodeName = parts[0];
    return [nodeName, Number(parts[parts.length - 1])];
}
function split(arr, size) {
    const res = [];
    for (let i = 0; i < arr.length; i += size) {
        res.push(arr.slice(i, i + size));
    }
    return res;
}
function getPadding(node, tensorMap, context) {
    let pad = getParamValue('pad', node, tensorMap, context);
    if (pad === 'explicit') {
        // This is 1d array, we need to convert it to 2d array
        pad = getParamValue('explicitPaddings', node, tensorMap, context);
        const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];
        for (let i = 0; i < 4; i++) {
            explicitPadding[i][0] = pad[i * 2];
            explicitPadding[i][1] = pad[i * 2 + 1];
        }
        return explicitPadding;
    }
    return pad;
}
/**
 *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to
 *  avoid disposal. This is important for TensorArray and TensorList ops, since
 *  internally they use a tensor as the id for TensorArray and TensorList, and
 * to simplify lookup, they also use Tensor.id as the key to the internal map.
 * These id tensors have been marked as kept in the backend, we need avoid clone
 * them in order to create new Tensor.id.
 * @param tensor
 */
function cloneTensor(tensor) {
    return tensor.kept ? tensor : Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["clone"])(tensor);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js ***!
  \***************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Add',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'AddV2',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'AddN',
        'category': 'arithmetic',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'BiasAdd',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sub',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'RealDiv',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Div',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'DivNoNan',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'FloorDiv',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Mul',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Maximum',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' }
        ]
    },
    {
        'tfOpName': 'Minimum',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' }
        ]
    },
    {
        'tfOpName': 'Pow',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'SquaredDifference',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Mod',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'FloorMod',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    }
];
//# sourceMappingURL=arithmetic.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js ***!
  \***************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Abs',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Acos',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Asin',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Atan',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Atan2',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'y', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Ceil',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ClipByValue',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number' },
            { 'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'Complex',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'real', 'type': 'tensor' },
            { 'start': 1, 'name': 'imag', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ComplexAbs',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Cos',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Cosh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Elu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Exp',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Floor',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Log',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Imag',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'outputType',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Neg',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Real',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'outputType',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Prelu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'alpha', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Relu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Relu6',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'clipValueMin',
                'name': 'clipValueMin',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'clipValueMax',
                'name': 'clipValueMax',
                'type': 'number',
                'defaultValue': 6
            }
        ]
    },
    {
        'tfOpName': 'Selu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sigmoid',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sin',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sinh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sqrt',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Rsqrt',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Square',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Tan',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Tanh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sign',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Round',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Expm1',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Log1p',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Reciprocal',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Softplus',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Asinh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Acosh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Atanh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Erf',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Prod',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axes', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'keep_dims',
                'name': 'keepDims',
                'type': 'bool',
                'notSupported': true
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LeakyRelu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'alpha',
                'name': 'alpha',
                'type': 'number',
                'defaultValue': 0.2
            },
            {
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    }
];
//# sourceMappingURL=basic_math.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js ***!
  \************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
const json = [
    {
        'tfOpName': 'LoopCond',
        'category': 'control',
        'inputs': [{ 'start': 0, 'name': 'pred', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Switch',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'data', 'type': 'tensor' },
            { 'start': 1, 'name': 'pred', 'type': 'tensor' }
        ]
    },
    {
        'tfOpName': 'Merge',
        'category': 'control',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'Enter',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'frame_name', 'name': 'frameName', 'type': 'string' },
            { 'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool' }
        ]
    },
    {
        'tfOpName': 'Exit',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'NextIteration',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'TensorArrayV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'size', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },
            { 'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool' },
            { 'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool' },
            {
                'tfName': 'identical_element_shapes',
                'name': 'identicalElementShapes',
                'type': 'bool'
            },
            { 'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string' }
        ]
    },
    {
        'tfOpName': 'TensorArrayWriteV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 3, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'TensorArrayReadV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [{
                'tfName': 'dtype',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    },
    {
        'tfOpName': 'TensorArrayGatherV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' }
        ]
    },
    {
        'tfOpName': 'TensorArrayScatterV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 3, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorArrayConcatV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }, {
                'tfName': 'element_shape_except0',
                'name': 'elementShapeExcept0',
                'type': 'shape',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'TensorArraySplitV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 2, 'name': 'lengths', 'type': 'number[]' },
            { 'start': 3, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorArraySizeV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'flowIn', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'TensorArrayCloseV3',
        'category': 'control',
        'inputs': [{ 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'StatelessIf',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'cond', 'type': 'tensor' },
            { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }
        ],
        'attrs': [
            { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },
            { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'If',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'cond', 'type': 'tensor' },
            { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }
        ],
        'attrs': [
            { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },
            { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'StatelessWhile',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },
            { 'tfName': 'body', 'name': 'body', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'While',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },
            { 'tfName': 'body', 'name': 'body', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'TensorListScatter',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' }
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListScatterV2',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
            { 'start': 3, 'name': 'numElements', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListGather',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListGetItem',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListSetItem',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListReserve',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'elementShape', 'type': 'shape' },
            { 'start': 1, 'name': 'numElements', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListFromTensor',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' }
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListStack',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [
            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' },
            { 'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'TensorListSplit',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
            { 'start': 2, 'name': 'lengths', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListConcat',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },
            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'TensorListPopBack',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListPushBack',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }
        ]
    }
];
//# sourceMappingURL=control.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js ***!
  \****************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'AvgPool',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MaxPool',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MaxPoolWithArgmax',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' }, {
                'tfName': 'include_batch_in_index',
                'name': 'includeBatchInIndex',
                'type': 'bool'
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'AvgPool3D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MaxPool3D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Conv1D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'stride', 'name': 'stride', 'type': 'number' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NWC'
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'dilation',
                'name': 'dilation',
                'type': 'number',
                'defaultValue': 1
            }
        ]
    },
    {
        'tfOpName': 'Conv2D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
            { 'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': '_FusedConv2D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            {
                'tfName': 'use_cudnn_on_gpu',
                'name': 'useCudnnOnGpu',
                'type': 'bool',
                'defaultValue': true
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'dilations',
                'name': 'dilations',
                'type': 'number[]',
                'defaultValue': [1, 1, 1, 1]
            },
            {
                'tfName': 'fused_ops',
                'name': 'fusedOps',
                'type': 'string[]',
                'defaultValue': []
            },
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.0001
            },
        ]
    },
    {
        'tfOpName': 'Conv2DBackpropInput',
        'category': 'convolution',
        'inputs': [
            { 'start': 2, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
            { 'start': 0, 'name': 'outputShape', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
        ]
    },
    {
        'tfOpName': 'DepthwiseConv2d',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'input', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'DepthwiseConv2dNative',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'input', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'FusedDepthwiseConv2dNative',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'dilations',
                'name': 'dilations',
                'type': 'number[]',
                'defaultValue': [1, 1, 1, 1]
            },
            {
                'tfName': 'fused_ops',
                'name': 'fusedOps',
                'type': 'string[]',
                'defaultValue': []
            }
        ]
    },
    {
        'tfOpName': 'Conv3D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ],
    },
    {
        'tfOpName': 'Dilation2D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'rates', 'name': 'dilations', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }
        ]
    }
];
//# sourceMappingURL=convolution.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js ***!
  \*************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Fill',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
            { 'start': 1, 'name': 'value', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'LinSpace',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'start', 'type': 'number' },
            { 'start': 1, 'name': 'stop', 'type': 'number' },
            { 'start': 2, 'name': 'num', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'OneHot',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'indices', 'type': 'tensor' },
            { 'start': 1, 'name': 'depth', 'type': 'number' },
            { 'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1 },
            { 'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0 },
        ],
        'attrs': [
            {
                'tfName': 'axis',
                'name': 'axis',
                'type': 'number',
                'notSupported': true
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Ones',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'OnesLike',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{ 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'RandomUniform',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'minval',
                'name': 'minval',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'maxval',
                'name': 'maxval',
                'type': 'number',
                'defaultValue': 1
            },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0 }, {
                'tfName': 'seed2',
                'name': 'seed2',
                'type': 'number',
                'defaultValue': 0,
                'notSupported': true
            },
            { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Range',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'start', 'type': 'number' },
            { 'start': 1, 'name': 'stop', 'type': 'number' },
            { 'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0 },
        ],
        'attrs': [{ 'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TruncatedNormal',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'means',
                'name': 'mean',
                'type': 'number',
                'defaultValue': 0.0
            },
            {
                'tfName': 'stddev',
                'name': 'stdDev',
                'type': 'number',
                'defaultValue': 1.0
            },
            { 'tfName': 'seed', 'name': 'seed', 'type': 'number' }, {
                'tfName': 'seed2',
                'name': 'seed2',
                'type': 'number',
                'defaultValue': 0,
                'notSupported': true
            },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Zeros',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'ZerosLike',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'Multinomial',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'logits', 'type': 'tensor' },
            { 'start': 1, 'name': 'numSamples', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'seed', 'name': 'seed', 'type': 'number' },
            { 'tfName': 'seed2', 'name': 'seed2', 'type': 'number' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype' }
        ]
    }
];
//# sourceMappingURL=creation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js ***!
  \************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'NonMaxSuppressionV2',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'NonMaxSuppressionV3',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'NonMaxSuppressionV4',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'T_threshold',
                'name': 'threshold',
                'type': 'dtype',
                'notSupported': true
            },
            {
                'tfName': 'pad_to_max_output_size',
                'name': 'padToMaxOutputSize',
                'type': 'bool'
            }
        ]
    },
    {
        'tfOpName': 'NonMaxSuppressionV5',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' },
            { 'start': 5, 'name': 'softNmsSigma', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'Where',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'condition', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ListDiff',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'y', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=dynamic.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js ***!
  \***************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'TopKV2',
        'category': 'evaluation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'k', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'sorted', 'name': 'sorted', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Unique',
        'category': 'evaluation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
    },
    {
        'tfOpName': 'UniqueV2',
        'category': 'evaluation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' },
        ],
    },
];
//# sourceMappingURL=evaluation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js ***!
  \**********************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'PlaceholderWithDefault',
        'category': 'graph',
        'inputs': [
            { 'start': 0, 'name': 'default', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'Placeholder',
        'category': 'graph',
        'attrs': [
            { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }
        ]
    },
    { 'tfOpName': 'Const', 'category': 'graph' }, {
        'tfOpName': 'Identity',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'IdentityN',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'Snapshot',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Rank',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Size',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Shape',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'ShapeN',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'Print',
        'category': 'graph',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'data', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'message', 'name': 'message', 'type': 'string' }, {
                'tfName': 'first_n',
                'name': 'firstN',
                'type': 'number',
                'notSupported': true
            },
            {
                'tfName': 'summarize',
                'name': 'summarize',
                'type': 'number',
                'defaultValue': 3
            }
        ]
    },
    { 'tfOpName': 'NoOp', 'category': 'graph', 'inputs': [] }, {
        'tfOpName': 'StopGradient',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'FakeQuantWithMinMaxVars',
        'category': 'graph',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'min', 'name': 'min', 'type': 'number' },
            { 'tfName': 'max', 'name': 'max', 'type': 'number' }
        ]
    }
];
//# sourceMappingURL=graph.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js ***!
  \***************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
const json = [
    {
        'tfOpName': 'HashTable',
        'category': 'hash_table',
        'inputs': [],
        'attrs': [
            { 'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string' },
            {
                'tfName': 'use_node_name_sharing',
                'name': 'useNodeNameSharing',
                'type': 'bool'
            },
            { 'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype' },
            { 'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype' },
        ]
    },
    {
        'tfOpName': 'HashTableV2',
        'category': 'hash_table',
        'inputs': [],
        'attrs': [
            { 'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string' },
            {
                'tfName': 'use_node_name_sharing',
                'name': 'useNodeNameSharing',
                'type': 'bool'
            },
            { 'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype' },
            { 'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype' },
        ]
    },
    {
        'tfOpName': 'LookupTableImport',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'values', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LookupTableImportV2',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'values', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LookupTableFind',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'defaultValue', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LookupTableFindV2',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'defaultValue', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    }
];
//# sourceMappingURL=hash_table.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js ***!
  \**********************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'ResizeBilinear',
        'category': 'image',
        'inputs': [
            { 'start': 0, 'name': 'images', 'type': 'tensor' },
            { 'start': 1, 'name': 'size', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ResizeNearestNeighbor',
        'category': 'image',
        'inputs': [
            { 'start': 0, 'name': 'images', 'type': 'tensor' },
            { 'start': 1, 'name': 'size', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'CropAndResize',
        'category': 'image',
        'inputs': [
            { 'start': 0, 'name': 'image', 'type': 'tensor' },
            { 'start': 1, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 2, 'name': 'boxInd', 'type': 'tensor' },
            { 'start': 3, 'name': 'cropSize', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'method', 'name': 'method', 'type': 'string' }, {
                'tfName': 'extrapolation_value',
                'name': 'extrapolationValue',
                'type': 'number'
            }
        ]
    }
];
//# sourceMappingURL=image.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js ***!
  \************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Equal',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'NotEqual',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Greater',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'GreaterEqual',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Less',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LessEqual',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LogicalAnd',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LogicalNot',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LogicalOr',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Select',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'condition', 'type': 'tensor' },
            { 'start': 1, 'name': 'a', 'type': 'tensor' },
            { 'start': 2, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'SelectV2',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'condition', 'type': 'tensor' },
            { 'start': 1, 'name': 'a', 'type': 'tensor' },
            { 'start': 2, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=logical.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js ***!
  \*************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': '_FusedMatMul',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' }, {
                'tfName': 'fused_ops',
                'name': 'fusedOps',
                'type': 'string[]',
                'defaultValue': []
            },
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.0001
            },
            {
                'tfName': 'transpose_a',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'transpose_b',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MatMul',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'transpose_a',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'transpose_b',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'BatchMatMul',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'adj_x',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'adj_y',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'BatchMatMulV2',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'adj_x',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'adj_y',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Transpose',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'perm', 'type': 'number[]' },
        ],
        'attrs': [{
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=matrices.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js ***!
  \******************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'FusedBatchNorm',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'scale', 'type': 'tensor' },
            { 'start': 2, 'name': 'offset', 'type': 'tensor' },
            { 'start': 3, 'name': 'mean', 'type': 'tensor' },
            { 'start': 4, 'name': 'variance', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.001
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'FusedBatchNormV2',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'scale', 'type': 'tensor' },
            { 'start': 2, 'name': 'offset', 'type': 'tensor' },
            { 'start': 3, 'name': 'mean', 'type': 'tensor' },
            { 'start': 4, 'name': 'variance', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.001
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'FusedBatchNormV3',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'scale', 'type': 'tensor' },
            { 'start': 2, 'name': 'offset', 'type': 'tensor' },
            { 'start': 3, 'name': 'mean', 'type': 'tensor' },
            { 'start': 4, 'name': 'variance', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.001
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LRN',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'depth_radius',
                'name': 'radius',
                'type': 'number',
                'defaultValue': 5
            },
            { 'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0 },
            {
                'tfName': 'alpha',
                'name': 'alpha',
                'type': 'number',
                'defaultValue': 1.0
            },
            {
                'tfName': 'beta',
                'name': 'beta',
                'type': 'number',
                'defaultValue': 0.5
            }
        ]
    },
    {
        'tfOpName': 'Softmax',
        'category': 'normalization',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'LogSoftmax',
        'category': 'normalization',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'SparseToDense',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },
            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },
            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'validate_indices',
                'name': 'validateIndices',
                'type': 'bool',
                'defaultValue': true,
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=normalization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js ***!
  \**************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Max',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Mean',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Min',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Sum',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'All',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Any',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'ArgMax',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'ArgMin',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'Prod',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Cumsum',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool' },
            { 'tfName': 'reverse', 'name': 'reverse', 'type': 'bool' }
        ]
    }
];
//# sourceMappingURL=reduction.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js ***!
  \***************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'ConcatV2',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors' },
            { 'start': -1, 'name': 'axis', 'type': 'number' }
        ],
        'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]
    },
    {
        'tfOpName': 'Concat',
        'category': 'slice_join',
        'inputs': [
            { 'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors' },
            { 'start': 0, 'name': 'axis', 'type': 'number' }
        ],
        'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]
    },
    {
        'tfOpName': 'GatherV2',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'tensor' },
            { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
        ]
    },
    {
        'tfOpName': 'Gather',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }, {
                'tfName': 'validate_indices',
                'name': 'validateIndices',
                'type': 'bool',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Reverse',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ReverseV2',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'Slice',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'begin', 'type': 'number[]' },
            { 'start': 2, 'name': 'size', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'StridedSlice',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'begin', 'type': 'number[]' },
            { 'start': 2, 'name': 'end', 'type': 'number[]' },
            { 'start': 3, 'name': 'strides', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'begin_mask',
                'name': 'beginMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'end_mask',
                'name': 'endMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'new_axis_mask',
                'name': 'newAxisMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'ellipsis_mask',
                'name': 'ellipsisMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'shrink_axis_mask',
                'name': 'shrinkAxisMask',
                'type': 'number',
                'defaultValue': 0
            }
        ]
    },
    {
        'tfOpName': 'Pack',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
        ]
    },
    {
        'tfOpName': 'Unpack',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }, {
                'tfName': 'num',
                'name': 'num',
                'type': 'number',
                'defaultValue': 0,
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Tile',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'reps', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'Split',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0 },
            { 'start': 1, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'num_split',
                'name': 'numOrSizeSplits',
                'type': 'number',
                'defaultValue': 1
            }]
    },
    {
        'tfOpName': 'SplitV',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]' },
            { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
        ]
    },
    {
        'tfOpName': 'ScatterNd',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'indices', 'type': 'tensor' },
            { 'start': 1, 'name': 'values', 'type': 'tensor' },
            { 'start': 2, 'name': 'shape', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'GatherNd',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'tensor' }
        ]
    },
    {
        'tfOpName': 'SparseToDense',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },
            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },
            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'validate_indices',
                'name': 'validateIndices',
                'type': 'bool',
                'defaultValue': false,
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=slice_join.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js ***!
  \*************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'FFT',
        'category': 'spectral',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'IFFT',
        'category': 'spectral',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'RFFT',
        'category': 'spectral',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' }, {
                'start': 1,
                'name': 'fft_length',
                'type': 'number',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'IRFFT',
        'category': 'spectral',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' }, {
                'start': 1,
                'name': 'fft_length',
                'type': 'number',
                'notSupported': true
            }
        ]
    }
];
//# sourceMappingURL=spectral.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js ***!
  \*******************************************************************************************/
/*! exports provided: json */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Cast',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'SrcT',
                'name': 'sdtype',
                'type': 'dtype',
                'notSupported': true
            },
            { 'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'ExpandDims',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'MirrorPad',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'padding', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'mode', 'name': 'mode', 'type': 'string' }]
    },
    {
        'tfOpName': 'Pad',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'padding', 'type': 'number[]' },
        ],
        'attrs': [{
                'tfName': 'constant_value',
                'name': 'constantValue',
                'type': 'number',
                'defaultValue': 0
            }]
    },
    {
        'tfOpName': 'PadV2',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'padding', 'type': 'number[]' }, {
                'start': 2,
                'name': 'constantValue',
                'type': 'number',
                'defaultValue': 0
            }
        ]
    },
    {
        'tfOpName': 'Reshape',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'shape', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'Squeeze',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'axis',
                'tfDeprecatedName': 'squeeze_dims',
                'name': 'axis',
                'type': 'number[]'
            }]
    },
    {
        'tfOpName': 'SpaceToBatchND',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'paddings', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'BatchToSpaceND',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'crops', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'DepthToSpace',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'block_size', 'name': 'blockSize', 'type': 'number' },
            { 'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string' }
        ]
    },
    {
        'tfOpName': 'BroadcastTo',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': []
    }
];
//# sourceMappingURL=transformation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js ***!
  \***************************************************************************************/
/*! exports provided: executeOp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeOp", function() { return executeOp; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _custom_op_node_value_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom_op/node_value_impl */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js");
/* harmony import */ var _custom_op_register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom_op/register */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js");
/* harmony import */ var _executors_arithmetic_executor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./executors/arithmetic_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js");
/* harmony import */ var _executors_basic_math_executor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./executors/basic_math_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js");
/* harmony import */ var _executors_control_executor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./executors/control_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js");
/* harmony import */ var _executors_convolution_executor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./executors/convolution_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js");
/* harmony import */ var _executors_creation_executor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./executors/creation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js");
/* harmony import */ var _executors_dynamic_executor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./executors/dynamic_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js");
/* harmony import */ var _executors_evaluation_executor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./executors/evaluation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js");
/* harmony import */ var _executors_graph_executor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./executors/graph_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js");
/* harmony import */ var _executors_hash_table_executor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./executors/hash_table_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js");
/* harmony import */ var _executors_image_executor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./executors/image_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js");
/* harmony import */ var _executors_logical_executor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./executors/logical_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js");
/* harmony import */ var _executors_matrices_executor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./executors/matrices_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js");
/* harmony import */ var _executors_normalization_executor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./executors/normalization_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js");
/* harmony import */ var _executors_reduction_executor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./executors/reduction_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js");
/* harmony import */ var _executors_slice_join_executor__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./executors/slice_join_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js");
/* harmony import */ var _executors_spectral_executor__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./executors/spectral_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js");
/* harmony import */ var _executors_transformation_executor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./executors/transformation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




















/**
 * Executes the op defined by the node object.
 * @param node
 * @param tensorMap contains tensors for executed nodes and weights
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */
function executeOp(node, tensorMap, context, resourceManager) {
    const value = ((node, tensorMap, context) => {
        switch (node.category) {
            case 'arithmetic':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_arithmetic_executor__WEBPACK_IMPORTED_MODULE_3__["executeOp"](node, tensorMap, context));
            case 'basic_math':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_basic_math_executor__WEBPACK_IMPORTED_MODULE_4__["executeOp"](node, tensorMap, context));
            case 'control':
                return _executors_control_executor__WEBPACK_IMPORTED_MODULE_5__["executeOp"](node, tensorMap, context);
            case 'convolution':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_convolution_executor__WEBPACK_IMPORTED_MODULE_6__["executeOp"](node, tensorMap, context));
            case 'creation':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_creation_executor__WEBPACK_IMPORTED_MODULE_7__["executeOp"](node, tensorMap, context));
            case 'dynamic':
                return _executors_dynamic_executor__WEBPACK_IMPORTED_MODULE_8__["executeOp"](node, tensorMap, context);
            case 'evaluation':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_evaluation_executor__WEBPACK_IMPORTED_MODULE_9__["executeOp"](node, tensorMap, context));
            case 'image':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_image_executor__WEBPACK_IMPORTED_MODULE_12__["executeOp"](node, tensorMap, context));
            case 'graph':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_graph_executor__WEBPACK_IMPORTED_MODULE_10__["executeOp"](node, tensorMap, context));
            case 'logical':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_logical_executor__WEBPACK_IMPORTED_MODULE_13__["executeOp"](node, tensorMap, context));
            case 'matrices':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_matrices_executor__WEBPACK_IMPORTED_MODULE_14__["executeOp"](node, tensorMap, context));
            case 'normalization':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_normalization_executor__WEBPACK_IMPORTED_MODULE_15__["executeOp"](node, tensorMap, context));
            case 'reduction':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_reduction_executor__WEBPACK_IMPORTED_MODULE_16__["executeOp"](node, tensorMap, context));
            case 'slice_join':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_slice_join_executor__WEBPACK_IMPORTED_MODULE_17__["executeOp"](node, tensorMap, context));
            case 'spectral':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_spectral_executor__WEBPACK_IMPORTED_MODULE_18__["executeOp"](node, tensorMap, context));
            case 'transformation':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["tidy"](() => _executors_transformation_executor__WEBPACK_IMPORTED_MODULE_19__["executeOp"](node, tensorMap, context));
            case 'hash_table':
                return _executors_hash_table_executor__WEBPACK_IMPORTED_MODULE_11__["executeOp"](node, tensorMap, context, resourceManager);
            case 'custom':
                const opMapper = Object(_custom_op_register__WEBPACK_IMPORTED_MODULE_2__["getRegisteredOp"])(node.op);
                if (opMapper && opMapper.customExecutor) {
                    return opMapper.customExecutor(new _custom_op_node_value_impl__WEBPACK_IMPORTED_MODULE_1__["NodeValueImpl"](node, tensorMap, context));
                }
                else {
                    throw TypeError(`Custom op ${node.op} is not registered.`);
                }
            default:
                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +
                    `https://github.com/tensorflow/tfjs/issues so we can add it` +
                    `, or register a custom execution with tf.registerOp()`);
        }
    })(node, tensorMap, context);
    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["util"].isPromise(value)) {
        return value.then((data) => [].concat(data));
    }
    return [].concat(value);
}
//# sourceMappingURL=operation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js ***!
  \*************************************************************************************/
/*! exports provided: OperationMapper, decodeBase64, parseStringParam, getStringParam, getBoolParam, getNumberParam, parseDtypeParam, getFuncParam, getDtypeParam, getDtypeArrayParam, parseTensorShapeParam, getTensorShapeParam, getNumericArrayParam, getStringArrayParam, getTensorShapeArrayParam, getBoolArrayParam */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OperationMapper", function() { return OperationMapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeBase64", function() { return decodeBase64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseStringParam", function() { return parseStringParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStringParam", function() { return getStringParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBoolParam", function() { return getBoolParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNumberParam", function() { return getNumberParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseDtypeParam", function() { return parseDtypeParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFuncParam", function() { return getFuncParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDtypeParam", function() { return getDtypeParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDtypeArrayParam", function() { return getDtypeArrayParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseTensorShapeParam", function() { return parseTensorShapeParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTensorShapeParam", function() { return getTensorShapeParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNumericArrayParam", function() { return getNumericArrayParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStringArrayParam", function() { return getStringArrayParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTensorShapeArrayParam", function() { return getTensorShapeArrayParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBoolArrayParam", function() { return getBoolArrayParam; });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/compiled_api */ "./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js");
/* harmony import */ var _custom_op_register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom_op/register */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js");
/* harmony import */ var _executors_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/* harmony import */ var _op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./op_list/arithmetic */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js");
/* harmony import */ var _op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./op_list/basic_math */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js");
/* harmony import */ var _op_list_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./op_list/control */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js");
/* harmony import */ var _op_list_convolution__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./op_list/convolution */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js");
/* harmony import */ var _op_list_creation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./op_list/creation */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js");
/* harmony import */ var _op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./op_list/dynamic */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js");
/* harmony import */ var _op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./op_list/evaluation */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js");
/* harmony import */ var _op_list_graph__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./op_list/graph */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js");
/* harmony import */ var _op_list_hash_table__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./op_list/hash_table */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js");
/* harmony import */ var _op_list_image__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./op_list/image */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js");
/* harmony import */ var _op_list_logical__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./op_list/logical */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js");
/* harmony import */ var _op_list_matrices__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./op_list/matrices */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js");
/* harmony import */ var _op_list_normalization__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./op_list/normalization */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js");
/* harmony import */ var _op_list_reduction__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./op_list/reduction */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js");
/* harmony import */ var _op_list_slice_join__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./op_list/slice_join */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js");
/* harmony import */ var _op_list_spectral__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./op_list/spectral */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js");
/* harmony import */ var _op_list_transformation__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./op_list/transformation */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





















class OperationMapper {
    // Singleton instance for the mapper
    static get Instance() {
        return this._instance || (this._instance = new this());
    }
    // Loads the op mapping from the JSON file.
    constructor() {
        const ops = [
            _op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__, _op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__, _op_list_control__WEBPACK_IMPORTED_MODULE_6__, _op_list_convolution__WEBPACK_IMPORTED_MODULE_7__, _op_list_creation__WEBPACK_IMPORTED_MODULE_8__, _op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__,
            _op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__, _op_list_logical__WEBPACK_IMPORTED_MODULE_14__, _op_list_image__WEBPACK_IMPORTED_MODULE_13__, _op_list_graph__WEBPACK_IMPORTED_MODULE_11__, _op_list_matrices__WEBPACK_IMPORTED_MODULE_15__, _op_list_normalization__WEBPACK_IMPORTED_MODULE_16__, _op_list_reduction__WEBPACK_IMPORTED_MODULE_17__,
            _op_list_slice_join__WEBPACK_IMPORTED_MODULE_18__, _op_list_spectral__WEBPACK_IMPORTED_MODULE_19__, _op_list_transformation__WEBPACK_IMPORTED_MODULE_20__, _op_list_hash_table__WEBPACK_IMPORTED_MODULE_12__
        ];
        const mappersJson = [].concat(...ops.map(op => op.json));
        this.opMappers = mappersJson.reduce((map, mapper) => {
            map[mapper.tfOpName] = mapper;
            return map;
        }, {});
    }
    // Converts the model inference graph from Tensorflow GraphDef to local
    // representation for TensorFlow.js API
    transformGraph(graph, signature = {}) {
        const tfNodes = graph.node;
        const placeholders = [];
        const weights = [];
        const initNodes = [];
        const nodes = tfNodes.reduce((map, node) => {
            map[node.name] = this.mapNode(node);
            if (node.op.startsWith('Placeholder')) {
                placeholders.push(map[node.name]);
            }
            else if (node.op === 'Const') {
                weights.push(map[node.name]);
            }
            else if (node.input == null || node.input.length === 0) {
                initNodes.push(map[node.name]);
            }
            return map;
        }, {});
        let inputs = [];
        const outputs = [];
        let inputNodeNameToKey = {};
        let outputNodeNameToKey = {};
        if (signature != null) {
            inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);
            outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);
        }
        const allNodes = Object.keys(nodes);
        allNodes.forEach(key => {
            const node = nodes[key];
            node.inputNames.forEach(name => {
                const [nodeName,] = Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__["getNodeNameAndIndex"])(name);
                node.inputs.push(nodes[nodeName]);
                nodes[nodeName].children.push(node);
            });
        });
        // if signature has not outputs set, add any node that does not have
        // outputs.
        if (Object.keys(outputNodeNameToKey).length === 0) {
            allNodes.forEach(key => {
                const node = nodes[key];
                if (node.children.length === 0) {
                    outputs.push(node);
                }
            });
        }
        else {
            Object.keys(outputNodeNameToKey).forEach(name => {
                const [nodeName,] = Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__["getNodeNameAndIndex"])(name);
                const node = nodes[nodeName];
                if (node != null) {
                    node.signatureKey = outputNodeNameToKey[name];
                    outputs.push(node);
                }
            });
        }
        if (Object.keys(inputNodeNameToKey).length > 0) {
            Object.keys(inputNodeNameToKey).forEach(name => {
                const [nodeName,] = Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__["getNodeNameAndIndex"])(name);
                const node = nodes[nodeName];
                if (node) {
                    node.signatureKey = inputNodeNameToKey[name];
                    inputs.push(node);
                }
            });
        }
        else {
            inputs = placeholders;
        }
        let functions = {};
        if (graph.library != null && graph.library.function != null) {
            functions = graph.library.function.reduce((functions, func) => {
                functions[func.signature.name] = this.mapFunction(func);
                return functions;
            }, {});
        }
        const result = { nodes, inputs, outputs, weights, placeholders, signature, functions };
        if (initNodes.length > 0) {
            result.initNodes = initNodes;
        }
        return result;
    }
    mapSignatureEntries(entries) {
        return Object.keys(entries || {})
            .reduce((prev, curr) => {
            prev[entries[curr].name] = curr;
            return prev;
        }, {});
    }
    mapNode(node) {
        // Unsupported ops will cause an error at run-time (not parse time), since
        // they may not be used by the actual execution subgraph.
        const mapper = Object(_custom_op_register__WEBPACK_IMPORTED_MODULE_2__["getRegisteredOp"])(node.op) || this.opMappers[node.op] || {};
        if (node.attr == null) {
            node.attr = {};
        }
        const newNode = {
            name: node.name,
            op: node.op,
            category: mapper.category,
            inputNames: (node.input ||
                []).map(input => input.startsWith('^') ? input.substr(1) : input),
            inputs: [],
            children: [],
            inputParams: {},
            attrParams: {},
            rawAttrs: node.attr
        };
        if (mapper.inputs != null) {
            newNode.inputParams =
                mapper.inputs.reduce((map, param) => {
                    map[param.name] = {
                        type: param.type,
                        inputIndexStart: param.start,
                        inputIndexEnd: param.end
                    };
                    return map;
                }, {});
        }
        if (mapper.attrs != null) {
            newNode.attrParams =
                mapper.attrs.reduce((map, param) => {
                    const type = param.type;
                    let value = undefined;
                    switch (param.type) {
                        case 'string':
                            value = getStringParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'string[]':
                            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'number':
                            value = getNumberParam(node.attr, param.tfName, (param.defaultValue || 0));
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'number[]':
                            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'bool':
                            value = getBoolParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'bool[]':
                            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'shape':
                            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'shape[]':
                            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'dtype':
                            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'dtype[]':
                            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'func':
                            value = getFuncParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'tensor':
                        case 'tensors':
                            break;
                        default:
                            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);
                    }
                    map[param.name] = { value, type };
                    return map;
                }, {});
        }
        return newNode;
    }
    // map the TFunctionDef to TFJS graph object
    mapFunction(functionDef) {
        const tfNodes = functionDef.nodeDef;
        const placeholders = [];
        const weights = [];
        let nodes = {};
        if (tfNodes != null) {
            nodes = tfNodes.reduce((map, node) => {
                map[node.name] = this.mapNode(node);
                if (node.op === 'Const') {
                    weights.push(map[node.name]);
                }
                return map;
            }, {});
        }
        const inputs = [];
        const outputs = [];
        functionDef.signature.inputArg.forEach(arg => {
            const [nodeName,] = Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__["getNodeNameAndIndex"])(arg.name);
            const node = {
                name: nodeName,
                op: 'Placeholder',
                inputs: [],
                inputNames: [],
                category: 'graph',
                inputParams: {},
                attrParams: { dtype: { value: parseDtypeParam(arg.type), type: 'dtype' } },
                children: []
            };
            node.signatureKey = arg.name;
            inputs.push(node);
            nodes[nodeName] = node;
        });
        const allNodes = Object.keys(nodes);
        allNodes.forEach(key => {
            const node = nodes[key];
            node.inputNames.forEach(name => {
                const [nodeName,] = Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__["getNodeNameAndIndex"])(name);
                node.inputs.push(nodes[nodeName]);
                nodes[nodeName].children.push(node);
            });
        });
        const returnNodeMap = functionDef.ret;
        functionDef.signature.outputArg.forEach(output => {
            const [nodeName, index] = Object(_executors_utils__WEBPACK_IMPORTED_MODULE_3__["getNodeNameAndIndex"])(returnNodeMap[output.name]);
            const node = nodes[nodeName];
            if (node != null) {
                node.defaultOutput = index;
                outputs.push(node);
            }
        });
        const signature = this.mapArgsToSignature(functionDef);
        return { nodes, inputs, outputs, weights, placeholders, signature };
    }
    mapArgsToSignature(functionDef) {
        return {
            methodName: functionDef.signature.name,
            inputs: functionDef.signature.inputArg.reduce((map, arg) => {
                map[arg.name] = this.mapArgToTensorInfo(arg);
                return map;
            }, {}),
            outputs: functionDef.signature.outputArg.reduce((map, arg) => {
                map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);
                return map;
            }, {}),
        };
    }
    mapArgToTensorInfo(arg, nameMap) {
        let name = arg.name;
        if (nameMap != null) {
            name = nameMap[name];
        }
        return { name, dtype: arg.type };
    }
}
function decodeBase64(text) {
    const global = Object(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__["env"])().global;
    if (typeof global.atob !== 'undefined') {
        return global.atob(text);
    }
    else if (typeof Buffer !== 'undefined') {
        return new Buffer(text, 'base64').toString();
    }
    else {
        throw new Error('Unable to decode base64 in this environment. ' +
            'Missing built-in atob() or Buffer()');
    }
}
function parseStringParam(s, keepCase) {
    const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);
    return keepCase ? value : value.toLowerCase();
}
function getStringParam(attrs, name, def, keepCase = false) {
    const param = attrs[name];
    if (param != null) {
        return parseStringParam(param.s, keepCase);
    }
    return def;
}
function getBoolParam(attrs, name, def) {
    const param = attrs[name];
    return param ? param.b : def;
}
function getNumberParam(attrs, name, def) {
    const param = attrs[name] || {};
    const value = param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);
    return (typeof value === 'number') ? value : parseInt(value, 10);
}
function parseDtypeParam(value) {
    if (typeof (value) === 'string') {
        // tslint:disable-next-line:no-any
        value = _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"][value];
    }
    switch (value) {
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_FLOAT:
            return 'float32';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_INT32:
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_INT64:
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_INT8:
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_UINT8:
            return 'int32';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_BOOL:
            return 'bool';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_DOUBLE:
            return 'float32';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__["DataType"].DT_STRING:
            return 'string';
        default:
            // Unknown dtype error will happen at runtime (instead of parse time),
            // since these nodes might not be used by the actual subgraph execution.
            return null;
    }
}
function getFuncParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.func) {
        return param.func.name;
    }
    return def;
}
function getDtypeParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.type) {
        return parseDtypeParam(param.type);
    }
    return def;
}
function getDtypeArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.type) {
        return param.list.type.map(v => parseDtypeParam(v));
    }
    return def;
}
function parseTensorShapeParam(shape) {
    if (shape.unknownRank) {
        return undefined;
    }
    if (shape.dim != null) {
        return shape.dim.map(dim => (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));
    }
    return [];
}
function getTensorShapeParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.shape) {
        return parseTensorShapeParam(param.shape);
    }
    return def;
}
function getNumericArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param) {
        return ((param.list.f && param.list.f.length ? param.list.f :
            param.list.i) ||
            [])
            .map(v => (typeof v === 'number') ? v : parseInt(v, 10));
    }
    return def;
}
function getStringArrayParam(attrs, name, def, keepCase = false) {
    const param = attrs[name];
    if (param && param.list && param.list.s) {
        return param.list.s.map((v) => {
            return parseStringParam(v, keepCase);
        });
    }
    return def;
}
function getTensorShapeArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.shape) {
        return param.list.shape.map((v) => {
            return parseTensorShapeParam(v);
        });
    }
    return def;
}
function getBoolArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.b) {
        return param.list.b;
    }
    return def;
}
//# sourceMappingURL=operation_mapper.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/version.js ***!
  \*****************************************************************/
/*! exports provided: version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '2.7.0';

//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/array_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/array_util.js ***!
  \************************************************************************/
/*! exports provided: binaryInsert, binarySearch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "binaryInsert", function() { return binaryInsert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "binarySearch", function() { return binarySearch; });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Inserts a value into a sorted array. This method allows duplicate, meaning it
 * allows inserting duplicate value, in which case, the element will be inserted
 * at the lowest index of the value.
 * @param arr The array to modify.
 * @param element The element to insert.
 * @param comparator Optional. If no comparator is specified, elements are
 * compared using array_util.defaultComparator, which is suitable for Strings
 * and Numbers in ascending arrays. If the array contains multiple instances of
 * the target value, the left-most instance will be returned. To provide a
 * comparator, it should take 2 arguments to compare and return a negative,
 * zero, or a positive number.
 */
function binaryInsert(arr, element, comparator) {
    const index = binarySearch(arr, element, comparator);
    const insertionPoint = index < 0 ? -(index + 1) : index;
    arr.splice(insertionPoint, 0, element);
}
/**
 * Searches the array for the target using binary search, returns the index
 * of the found element, or position to insert if element not found. If no
 * comparator is specified, elements are compared using array_
 * util.defaultComparator, which is suitable for Strings and Numbers in
 * ascending arrays. If the array contains multiple instances of the target
 * value, the left-most instance will be returned.
 * @param arr The array to be searched in.
 * @param target The target to be searched for.
 * @param comparator Should take 2 arguments to compare and return a negative,
 *    zero, or a positive number.
 * @return Lowest index of the target value if found, otherwise the insertion
 *    point where the target should be inserted, in the form of
 *    (-insertionPoint - 1).
 */
function binarySearch(arr, target, comparator) {
    return binarySearch_(arr, target, comparator || defaultComparator);
}
/**
 * Compares its two arguments for order.
 * @param a The first element to be compared.
 * @param b The second element to be compared.
 * @return A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */
function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
}
function binarySearch_(arr, target, comparator) {
    let left = 0;
    let right = arr.length;
    let middle = 0;
    let found = false;
    while (left < right) {
        middle = left + ((right - left) >>> 1);
        const compareResult = comparator(target, arr[middle]);
        if (compareResult > 0) {
            left = middle + 1;
        }
        else {
            right = middle;
            // If compareResult is 0, the value is found. We record it is found,
            // and then keep looking because there may be duplicate.
            found = !compareResult;
        }
    }
    return found ? left : -left - 1;
}
//# sourceMappingURL=array_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js ***!
  \*********************************************************************/
/*! exports provided: EPSILON_FLOAT32, EPSILON_FLOAT16, DataStorage, KernelBackend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPSILON_FLOAT32", function() { return EPSILON_FLOAT32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPSILON_FLOAT16", function() { return EPSILON_FLOAT16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataStorage", function() { return DataStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KernelBackend", function() { return KernelBackend; });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EPSILON_FLOAT32 = 1e-7;
const EPSILON_FLOAT16 = 1e-4;
/** Convenient class for storing tensor-related data. */
class DataStorage {
    constructor(backend, dataMover) {
        this.backend = backend;
        this.dataMover = dataMover;
        this.data = new WeakMap();
        this.dataIdsCount = 0;
    }
    get(dataId) {
        if (!this.data.has(dataId)) {
            this.dataMover.moveData(this.backend, dataId);
        }
        return this.data.get(dataId);
    }
    set(dataId, value) {
        this.dataIdsCount++;
        this.data.set(dataId, value);
    }
    has(dataId) {
        return this.data.has(dataId);
    }
    delete(dataId) {
        this.dataIdsCount--;
        return this.data.delete(dataId);
    }
    numDataIds() {
        return this.dataIdsCount;
    }
}
/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */
class KernelBackend {
    time(f) {
        return notYetImplemented('time');
    }
    read(dataId) {
        return notYetImplemented('read');
    }
    readSync(dataId) {
        return notYetImplemented('readSync');
    }
    numDataIds() {
        return notYetImplemented('numDataIds');
    }
    disposeData(dataId) {
        return notYetImplemented('disposeData');
    }
    write(values, shape, dtype) {
        return notYetImplemented('write');
    }
    move(dataId, values, shape, dtype) {
        return notYetImplemented('move');
    }
    memory() {
        return notYetImplemented('memory');
    }
    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
    floatPrecision() {
        return notYetImplemented('floatPrecision');
    }
    /** Returns the smallest representable number.  */
    epsilon() {
        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
    }
    batchMatMul(a, b, transposeA, transposeB) {
        return notYetImplemented('batchMatMul');
    }
    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {
        return notYetImplemented('fusedBatchMatMul');
    }
    slice(x, begin, size) {
        return notYetImplemented('slice');
    }
    stridedSlice(x, begin, end, strides) {
        return notYetImplemented('stridedSlice');
    }
    unstack(x, axis) {
        return notYetImplemented('unstack');
    }
    reverse(a, axis) {
        return notYetImplemented('reverse');
    }
    concat(tensors, axis) {
        return notYetImplemented('concat');
    }
    neg(a) {
        return notYetImplemented('neg');
    }
    add(a, b) {
        return notYetImplemented('add');
    }
    addN(tensors) {
        return notYetImplemented('addN');
    }
    subtract(a, b) {
        return notYetImplemented('subtract');
    }
    multiply(a, b) {
        return notYetImplemented('multiply');
    }
    realDivide(a, b) {
        return notYetImplemented('realDivide');
    }
    floorDiv(a, b) {
        return notYetImplemented('floorDiv');
    }
    sum(x, axes) {
        return notYetImplemented('sum');
    }
    prod(x, axes) {
        return notYetImplemented('prod');
    }
    unsortedSegmentSum(x, segmentIds, numSegments) {
        return notYetImplemented('unsortedSegmentSum');
    }
    argMin(x, axis) {
        return notYetImplemented('argMin');
    }
    argMax(x, axis) {
        return notYetImplemented('argMax');
    }
    equal(a, b) {
        return notYetImplemented('equal');
    }
    notEqual(a, b) {
        return notYetImplemented('notEqual');
    }
    less(a, b) {
        return notYetImplemented('less');
    }
    lessEqual(a, b) {
        return notYetImplemented('lessEqual');
    }
    greater(a, b) {
        return notYetImplemented('greater');
    }
    greaterEqual(a, b) {
        return notYetImplemented('greaterEqual');
    }
    logicalNot(a) {
        return notYetImplemented('logicalNot');
    }
    logicalAnd(a, b) {
        return notYetImplemented('logicalAnd');
    }
    logicalOr(a, b) {
        return notYetImplemented('logicalOr');
    }
    where(condition) {
        return notYetImplemented('where');
    }
    select(condition, a, b) {
        return notYetImplemented('select');
    }
    topk(x, k, sorted) {
        return notYetImplemented('topk');
    }
    min(x, axes) {
        return notYetImplemented('min');
    }
    minimum(a, b) {
        return notYetImplemented('minimum');
    }
    mod(a, b) {
        return notYetImplemented('mod');
    }
    max(x, axes) {
        return notYetImplemented('max');
    }
    maximum(a, b) {
        return notYetImplemented('maximum');
    }
    all(x, axes) {
        return notYetImplemented('all');
    }
    any(x, axes) {
        return notYetImplemented('any');
    }
    squaredDifference(a, b) {
        return notYetImplemented('squaredDifference');
    }
    ceil(x) {
        return notYetImplemented('ceil');
    }
    floor(x) {
        return notYetImplemented('floor');
    }
    round(x) {
        return notYetImplemented('round');
    }
    sign(x) {
        return notYetImplemented('sign');
    }
    isNaN(x) {
        return notYetImplemented('isNaN');
    }
    isInf(x) {
        return notYetImplemented('isInf');
    }
    isFinite(x) {
        return notYetImplemented('isFinite');
    }
    pow(a, b) {
        return notYetImplemented('pow');
    }
    exp(x) {
        return notYetImplemented('exp');
    }
    expm1(x) {
        return notYetImplemented('expm1');
    }
    softmax(x, dim) {
        return notYetImplemented('softmax');
    }
    log(x) {
        return notYetImplemented('log');
    }
    log1p(x) {
        return notYetImplemented('log1p');
    }
    sqrt(x) {
        return notYetImplemented('sqrt');
    }
    rsqrt(x) {
        return notYetImplemented('rsqrt');
    }
    square(x) {
        return notYetImplemented('square');
    }
    reciprocal(x) {
        return notYetImplemented('reciprocal');
    }
    relu(x) {
        return notYetImplemented('relu');
    }
    relu6(x) {
        return notYetImplemented('relu6');
    }
    prelu(x, a) {
        return notYetImplemented('prelu');
    }
    elu(x) {
        return notYetImplemented('elu');
    }
    eluDer(dy, y) {
        return notYetImplemented('eluDer');
    }
    selu(x) {
        return notYetImplemented('selu');
    }
    int(x) {
        return notYetImplemented('int');
    }
    clip(x, min, max) {
        return notYetImplemented('clip');
    }
    abs(x) {
        return notYetImplemented('abs');
    }
    complexAbs(x) {
        return notYetImplemented('complexAbs');
    }
    sigmoid(x) {
        return notYetImplemented('sigmoid');
    }
    softplus(x) {
        return notYetImplemented('softplus');
    }
    sin(x) {
        return notYetImplemented('sin');
    }
    cos(x) {
        return notYetImplemented('cos');
    }
    tan(x) {
        return notYetImplemented('tan');
    }
    asin(x) {
        return notYetImplemented('asin');
    }
    acos(x) {
        return notYetImplemented('acos');
    }
    atan(x) {
        return notYetImplemented('atan');
    }
    atan2(a, b) {
        return notYetImplemented('atan2');
    }
    sinh(x) {
        return notYetImplemented('sinh');
    }
    cosh(x) {
        return notYetImplemented('cosh');
    }
    tanh(x) {
        return notYetImplemented('tanh');
    }
    asinh(x) {
        return notYetImplemented('asinh');
    }
    acosh(x) {
        return notYetImplemented('acosh');
    }
    atanh(x) {
        return notYetImplemented('atanh');
    }
    erf(x) {
        return notYetImplemented('erf');
    }
    step(x, alpha) {
        return notYetImplemented('step');
    }
    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {
        return notYetImplemented('fusedConv2d');
    }
    conv2d(x, filter, convInfo) {
        return notYetImplemented('conv2d');
    }
    conv2dDerInput(dy, filter, convInfo) {
        return notYetImplemented('conv2dDerInput');
    }
    conv2dDerFilter(x, dY, convInfo) {
        return notYetImplemented('conv2dDerFilter');
    }
    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {
        return notYetImplemented('fusedDepthwiseConv2D');
    }
    depthwiseConv2D(input, filter, convInfo) {
        return notYetImplemented('depthwiseConv2D');
    }
    depthwiseConv2DDerInput(dy, filter, convInfo) {
        return notYetImplemented('depthwiseConv2DDerInput');
    }
    depthwiseConv2DDerFilter(x, dY, convInfo) {
        return notYetImplemented('depthwiseConv2DDerFilter');
    }
    conv3d(x, filter, convInfo) {
        return notYetImplemented('conv3d');
    }
    conv3dDerInput(dy, filter, convInfo) {
        return notYetImplemented('conv3dDerInput');
    }
    conv3dDerFilter(x, dY, convInfo) {
        return notYetImplemented('conv3dDerFilter');
    }
    maxPool(x, convInfo) {
        return notYetImplemented('maxPool');
    }
    maxPoolBackprop(dy, x, y, convInfo) {
        return notYetImplemented('maxPoolBackprop');
    }
    avgPool(x, convInfo) {
        return notYetImplemented('avgPool');
    }
    avgPoolBackprop(dy, x, convInfo) {
        return notYetImplemented('avgPoolBackprop');
    }
    avgPool3d(x, convInfo) {
        return notYetImplemented('avgPool3d');
    }
    avgPool3dBackprop(dy, x, convInfo) {
        return notYetImplemented('avgPool3dBackprop');
    }
    maxPool3d(x, convInfo) {
        return notYetImplemented('maxPool3d');
    }
    maxPool3dBackprop(dy, x, y, convInfo) {
        return notYetImplemented('maxPool3dBackprop');
    }
    reshape(x, shape) {
        return notYetImplemented('reshape');
    }
    cast(x, dtype) {
        return notYetImplemented('cast');
    }
    tile(x, reps) {
        return notYetImplemented('tile');
    }
    pad(x, paddings, constantValue) {
        return notYetImplemented('pad');
    }
    transpose(x, perm) {
        return notYetImplemented('transpose');
    }
    gather(x, indices, axis) {
        return notYetImplemented('gather');
    }
    gatherND(x, indices) {
        return notYetImplemented('gatherND');
    }
    scatterND(indices, updates, shape) {
        return notYetImplemented('scatterND');
    }
    batchToSpaceND(x, blockShape, crops) {
        return notYetImplemented('batchToSpaceND');
    }
    spaceToBatchND(x, blockShape, paddings) {
        return notYetImplemented('spaceToBatchND');
    }
    resizeBilinear(x, newHeight, newWidth, alignCorners) {
        return notYetImplemented('resizeBilinear');
    }
    resizeBilinearBackprop(dy, x, alignCorners) {
        return notYetImplemented('resizeBilinearBackprop');
    }
    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {
        return notYetImplemented('resizeNearestNeighbor');
    }
    resizeNearestNeighborBackprop(dy, x, alignCorners) {
        return notYetImplemented('resizeNearestNeighborBackprop');
    }
    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {
        return notYetImplemented('batchNorm');
    }
    localResponseNormalization4D(x, radius, bias, alpha, beta) {
        return notYetImplemented('localResponseNormalization4D');
    }
    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {
        return notYetImplemented('LRNGrad');
    }
    multinomial(logits, normalized, numSamples, seed) {
        return notYetImplemented('multinomial');
    }
    oneHot(indices, depth, onValue, offValue) {
        return notYetImplemented('oneHot');
    }
    cumsum(x, axis, exclusive, reverse) {
        return notYetImplemented('cumsum');
    }
    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
        return notYetImplemented('nonMaxSuppression');
    }
    fft(x) {
        return notYetImplemented('fft');
    }
    ifft(x) {
        return notYetImplemented('ifft');
    }
    complex(real, imag) {
        return notYetImplemented('complex');
    }
    real(input) {
        return notYetImplemented('real');
    }
    imag(input) {
        return notYetImplemented('imag');
    }
    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {
        return notYetImplemented('cropAndResize');
    }
    depthToSpace(x, blockSize, dataFormat) {
        return notYetImplemented('depthToSpace');
    }
    // Aligns with the "SplitV" kernel in TensorFlow.
    split(value, sizeSplits, axis) {
        return notYetImplemented('split');
    }
    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {
        return notYetImplemented('sparseToDense');
    }
    diag(x) {
        return notYetImplemented('diag');
    }
    fill(shape, value, dtype) {
        return notYetImplemented('fill');
    }
    onesLike(x) {
        return notYetImplemented('onesLike');
    }
    zerosLike(x) {
        return notYetImplemented('zerosLike');
    }
    linspace(start, stop, num) {
        return notYetImplemented('linspace');
    }
    dispose() {
        return notYetImplemented('dispose');
    }
}
function notYetImplemented(kernelName) {
    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +
        `This kernel may not be supported by the tfjs backend you have chosen`);
}
//# sourceMappingURL=backend.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js ***!
  \**************************************************************************/
/*! exports provided: axesAreInnerMostDims, combineLocations, computeOutAndReduceShapes, expandShapeToKeepDim, assertAxesAreInnerMostDims, getAxesPermutation, getUndoAxesPermutation, getInnerMostAxes, getBroadcastDims, getReductionAxes, assertAndGetBroadcastShape, assertParamsConsistent, computeOutShape, computeDilation2DInfo, computePool2DInfo, computePool3DInfo, computeConv2DInfo, computeConv3DInfo, computeDefaultPad, tupleValuesAreOne, eitherStridesOrDilationsAreOne, convertConv2DDataFormat, getFusedDyActivation, getFusedBiasGradient, applyActivation, shouldFuse, PARALLELIZE_THRESHOLD, computeOptimalWindowSize, slice_util, upcastType, getImageCenter, getReshaped, getPermuted, getReshapedPermuted, getSliceBeginCoords, getSliceSize, prepareAndValidate, validateUpdateShape, validateInput, calculateShapes, SELU_SCALEALPHA, SELU_SCALE, ERF_P, ERF_A1, ERF_A2, ERF_A3, ERF_A4, ERF_A5, warn, log, mergeRealAndImagArrays, splitRealAndImagArrays, complexWithEvenIndex, complexWithOddIndex, getComplexWithIndex, assignToTypedArray, exponents, exponent, prepareSplitSize, segment_util, castTensor, reshapeTensor, linspaceImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castTensor", function() { return castTensor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reshapeTensor", function() { return reshapeTensor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linspaceImpl", function() { return linspaceImpl; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_tensor1d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/* harmony import */ var _ops_zeros__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "axesAreInnerMostDims", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["axesAreInnerMostDims"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "combineLocations", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["combineLocations"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeOutAndReduceShapes", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["computeOutAndReduceShapes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expandShapeToKeepDim", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["expandShapeToKeepDim"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertAxesAreInnerMostDims", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["assertAxesAreInnerMostDims"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getAxesPermutation", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["getAxesPermutation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getUndoAxesPermutation", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["getUndoAxesPermutation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getInnerMostAxes", function() { return _ops_axis_util__WEBPACK_IMPORTED_MODULE_6__["getInnerMostAxes"]; });

/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getBroadcastDims", function() { return _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_7__["getBroadcastDims"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getReductionAxes", function() { return _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_7__["getReductionAxes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertAndGetBroadcastShape", function() { return _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_7__["assertAndGetBroadcastShape"]; });

/* harmony import */ var _ops_concat_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/concat_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertParamsConsistent", function() { return _ops_concat_util__WEBPACK_IMPORTED_MODULE_8__["assertParamsConsistent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeOutShape", function() { return _ops_concat_util__WEBPACK_IMPORTED_MODULE_8__["computeOutShape"]; });

/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeDilation2DInfo", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["computeDilation2DInfo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computePool2DInfo", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["computePool2DInfo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computePool3DInfo", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["computePool3DInfo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeConv2DInfo", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["computeConv2DInfo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeConv3DInfo", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["computeConv3DInfo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeDefaultPad", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["computeDefaultPad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tupleValuesAreOne", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["tupleValuesAreOne"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eitherStridesOrDilationsAreOne", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["eitherStridesOrDilationsAreOne"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "convertConv2DDataFormat", function() { return _ops_conv_util__WEBPACK_IMPORTED_MODULE_9__["convertConv2DDataFormat"]; });

/* harmony import */ var _ops_fused_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFusedDyActivation", function() { return _ops_fused_util__WEBPACK_IMPORTED_MODULE_10__["getFusedDyActivation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFusedBiasGradient", function() { return _ops_fused_util__WEBPACK_IMPORTED_MODULE_10__["getFusedBiasGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyActivation", function() { return _ops_fused_util__WEBPACK_IMPORTED_MODULE_10__["applyActivation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shouldFuse", function() { return _ops_fused_util__WEBPACK_IMPORTED_MODULE_10__["shouldFuse"]; });

/* harmony import */ var _ops_reduce_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ops/reduce_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PARALLELIZE_THRESHOLD", function() { return _ops_reduce_util__WEBPACK_IMPORTED_MODULE_11__["PARALLELIZE_THRESHOLD"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeOptimalWindowSize", function() { return _ops_reduce_util__WEBPACK_IMPORTED_MODULE_11__["computeOptimalWindowSize"]; });

/* harmony import */ var _ops_slice_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ops/slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "slice_util", function() { return _ops_slice_util__WEBPACK_IMPORTED_MODULE_12__; });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../types */ "./node_modules/@tensorflow/tfjs-core/dist/types.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "upcastType", function() { return _types__WEBPACK_IMPORTED_MODULE_13__["upcastType"]; });

/* harmony import */ var _ops_rotate_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ops/rotate_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getImageCenter", function() { return _ops_rotate_util__WEBPACK_IMPORTED_MODULE_14__["getImageCenter"]; });

/* harmony import */ var _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ops/array_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getReshaped", function() { return _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_15__["getReshaped"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getPermuted", function() { return _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_15__["getPermuted"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getReshapedPermuted", function() { return _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_15__["getReshapedPermuted"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSliceBeginCoords", function() { return _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_15__["getSliceBeginCoords"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSliceSize", function() { return _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_15__["getSliceSize"]; });

/* harmony import */ var _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../ops/gather_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prepareAndValidate", function() { return _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_16__["prepareAndValidate"]; });

/* harmony import */ var _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../ops/scatter_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validateUpdateShape", function() { return _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_17__["validateUpdateShape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validateInput", function() { return _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_17__["validateInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calculateShapes", function() { return _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_17__["calculateShapes"]; });

/* harmony import */ var _ops_selu_util__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../ops/selu_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SELU_SCALEALPHA", function() { return _ops_selu_util__WEBPACK_IMPORTED_MODULE_18__["SELU_SCALEALPHA"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SELU_SCALE", function() { return _ops_selu_util__WEBPACK_IMPORTED_MODULE_18__["SELU_SCALE"]; });

/* empty/unused harmony star reexport *//* harmony import */ var _ops_erf_util__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../ops/erf_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERF_P", function() { return _ops_erf_util__WEBPACK_IMPORTED_MODULE_19__["ERF_P"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERF_A1", function() { return _ops_erf_util__WEBPACK_IMPORTED_MODULE_19__["ERF_A1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERF_A2", function() { return _ops_erf_util__WEBPACK_IMPORTED_MODULE_19__["ERF_A2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERF_A3", function() { return _ops_erf_util__WEBPACK_IMPORTED_MODULE_19__["ERF_A3"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERF_A4", function() { return _ops_erf_util__WEBPACK_IMPORTED_MODULE_19__["ERF_A4"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERF_A5", function() { return _ops_erf_util__WEBPACK_IMPORTED_MODULE_19__["ERF_A5"]; });

/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../log */ "./node_modules/@tensorflow/tfjs-core/dist/log.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "warn", function() { return _log__WEBPACK_IMPORTED_MODULE_20__["warn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log", function() { return _log__WEBPACK_IMPORTED_MODULE_20__["log"]; });

/* harmony import */ var _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../backends/complex_util */ "./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeRealAndImagArrays", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["mergeRealAndImagArrays"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitRealAndImagArrays", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["splitRealAndImagArrays"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "complexWithEvenIndex", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["complexWithEvenIndex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "complexWithOddIndex", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["complexWithOddIndex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getComplexWithIndex", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["getComplexWithIndex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assignToTypedArray", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["assignToTypedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exponents", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["exponents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exponent", function() { return _backends_complex_util__WEBPACK_IMPORTED_MODULE_21__["exponent"]; });

/* harmony import */ var _ops_split_util__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../ops/split_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prepareSplitSize", function() { return _ops_split_util__WEBPACK_IMPORTED_MODULE_22__["prepareSplitSize"]; });

/* harmony import */ var _ops_segment_util__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../ops/segment_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "segment_util", function() { return _ops_segment_util__WEBPACK_IMPORTED_MODULE_23__; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






// Utilities needed by backend consumers of tf-core.





















function castTensor(x, dtype, backend) {
    if (dtype === 'complex64') {
        if (x.dtype === 'complex64') {
            return x.clone();
        }
        const zerosTensor = Object(_ops_zeros__WEBPACK_IMPORTED_MODULE_4__["zeros"])(x.shape);
        const floatX = Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32');
        const result = backend.complex(floatX, zerosTensor);
        zerosTensor.dispose();
        floatX.dispose();
        return result;
    }
    if (!Object(_util__WEBPACK_IMPORTED_MODULE_5__["hasEncodingLoss"])(x.dtype, dtype)) {
        // We don't change the underlying data, since we cast to higher
        // precision.
        return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensorFromDataId(x.dataId, x.shape, dtype);
    }
    if (x.dtype === 'complex64') {
        const real = backend.real(x);
        const result = Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(real, dtype);
        real.dispose();
        return result;
    }
    if (dtype === 'int32') {
        return backend.int(x);
    }
    else if (dtype === 'bool') {
        const zero = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_2__["scalar"])(0, x.dtype);
        const result = backend.notEqual(x, zero);
        zero.dispose();
        return result;
    }
    else {
        throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
    }
}
function reshapeTensor(x, shape) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensorFromDataId(x.dataId, shape, x.dtype);
}
function linspaceImpl(start, stop, num) {
    const step = (stop - start) / (num - 1);
    const values = Object(_util__WEBPACK_IMPORTED_MODULE_5__["makeZerosTypedArray"])(num, 'float32');
    values[0] = start;
    for (let i = 1; i < values.length; i++) {
        values[i] = values[i - 1] + step;
    }
    return Object(_ops_tensor1d__WEBPACK_IMPORTED_MODULE_3__["tensor1d"])(values, 'float32');
}
//# sourceMappingURL=backend_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js ***!
  \**************************************************************************/
/*! exports provided: mergeRealAndImagArrays, splitRealAndImagArrays, complexWithEvenIndex, complexWithOddIndex, getComplexWithIndex, assignToTypedArray, exponents, exponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeRealAndImagArrays", function() { return mergeRealAndImagArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitRealAndImagArrays", function() { return splitRealAndImagArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "complexWithEvenIndex", function() { return complexWithEvenIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "complexWithOddIndex", function() { return complexWithOddIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getComplexWithIndex", function() { return getComplexWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignToTypedArray", function() { return assignToTypedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exponents", function() { return exponents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exponent", function() { return exponent; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Merges real and imaginary Float32Arrays into a single complex Float32Array.
 *
 * The memory layout is interleaved as follows:
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 * complex: [r0, i0, r1, i1, r2, i2]
 *
 * This is the inverse of splitRealAndImagArrays.
 *
 * @param real The real values of the complex tensor values.
 * @param imag The imag values of the complex tensor values.
 * @returns A complex tensor as a Float32Array with merged values.
 */
function mergeRealAndImagArrays(real, imag) {
    if (real.length !== imag.length) {
        throw new Error(`Cannot merge real and imag arrays of different lengths. real:` +
            `${real.length}, imag: ${imag.length}.`);
    }
    const result = new Float32Array(real.length * 2);
    for (let i = 0; i < result.length; i += 2) {
        result[i] = real[i / 2];
        result[i + 1] = imag[i / 2];
    }
    return result;
}
/**
 * Splits a complex Float32Array into real and imag parts.
 *
 * The memory layout is interleaved as follows:
 * complex: [r0, i0, r1, i1, r2, i2]
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 *
 * This is the inverse of mergeRealAndImagArrays.
 *
 * @param complex The complex tensor values.
 * @returns An object with real and imag Float32Array components of the complex
 *     tensor.
 */
function splitRealAndImagArrays(complex) {
    const real = new Float32Array(complex.length / 2);
    const imag = new Float32Array(complex.length / 2);
    for (let i = 0; i < complex.length; i += 2) {
        real[i / 2] = complex[i];
        imag[i / 2] = complex[i + 1];
    }
    return { real, imag };
}
/**
 * Extracts even indexed complex values in the given array.
 * @param complex The complex tensor values
 */
function complexWithEvenIndex(complex) {
    const len = Math.ceil(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for (let i = 0; i < complex.length; i += 4) {
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return { real, imag };
}
/**
 * Extracts odd indexed comple values in the given array.
 * @param complex The complex tensor values
 */
function complexWithOddIndex(complex) {
    const len = Math.floor(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for (let i = 2; i < complex.length; i += 4) {
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return { real, imag };
}
/**
 * Get the map representing a complex value in the given array.
 * @param complex The complex tensor values.
 * @param index An index of the target complex value.
 */
function getComplexWithIndex(complex, index) {
    const real = complex[index * 2];
    const imag = complex[index * 2 + 1];
    return { real, imag };
}
/**
 * Insert a given complex value into the TypedArray.
 * @param data The array in which the complex value is inserted.
 * @param c The complex value to be inserted.
 * @param index An index of the target complex value.
 */
function assignToTypedArray(data, real, imag, index) {
    data[index * 2] = real;
    data[index * 2 + 1] = imag;
}
/**
 * Make the list of exponent terms used by FFT.
 */
function exponents(n, inverse) {
    const real = new Float32Array(n / 2);
    const imag = new Float32Array(n / 2);
    for (let i = 0; i < Math.ceil(n / 2); i++) {
        const x = (inverse ? 2 : -2) * Math.PI * (i / n);
        real[i] = Math.cos(x);
        imag[i] = Math.sin(x);
    }
    return { real, imag };
}
/**
 * Make the exponent term used by FFT.
 */
function exponent(k, n, inverse) {
    const x = (inverse ? 2 : -2) * Math.PI * (k / n);
    const real = Math.cos(x);
    const imag = Math.sin(x);
    return { real, imag };
}
//# sourceMappingURL=complex_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js ***!
  \**************************************************************************/
/*! exports provided: nonMaxSuppressionV3Impl, nonMaxSuppressionV4Impl, nonMaxSuppressionV5Impl, split, tile, topkImpl, whereImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionV3Impl", function() { return _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__["nonMaxSuppressionV3Impl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionV4Impl", function() { return _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__["nonMaxSuppressionV4Impl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionV5Impl", function() { return _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__["nonMaxSuppressionV5Impl"]; });

/* harmony import */ var _split_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./split_shared */ "./node_modules/@tensorflow/tfjs-core/dist/backends/split_shared.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "split", function() { return _split_shared__WEBPACK_IMPORTED_MODULE_1__["split"]; });

/* harmony import */ var _tile_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tile_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/tile_impl.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tile", function() { return _tile_impl__WEBPACK_IMPORTED_MODULE_2__["tile"]; });

/* harmony import */ var _topk_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./topk_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/topk_impl.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "topkImpl", function() { return _topk_impl__WEBPACK_IMPORTED_MODULE_3__["topkImpl"]; });

/* harmony import */ var _where_impl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./where_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "whereImpl", function() { return _where_impl__WEBPACK_IMPORTED_MODULE_4__["whereImpl"]; });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





//# sourceMappingURL=kernel_impls.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js ***!
  \**************************************************************************************/
/*! exports provided: nonMaxSuppressionV3Impl, nonMaxSuppressionV4Impl, nonMaxSuppressionV5Impl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionV3Impl", function() { return nonMaxSuppressionV3Impl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionV4Impl", function() { return nonMaxSuppressionV4Impl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionV5Impl", function() { return nonMaxSuppressionV5Impl; });
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_tensor1d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/* harmony import */ var _array_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./array_util */ "./node_modules/@tensorflow/tfjs-core/dist/backends/array_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.
 */



function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */)
        .selectedIndices;
}
function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true
    /* returnValidOutputs */ );
}
function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);
}
function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {
    // The list is sorted in ascending order, so that we can always pop the
    // candidate with the largest score in O(1) time.
    const candidates = [];
    for (let i = 0; i < scores.length; i++) {
        if (scores[i] > scoreThreshold) {
            candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });
        }
    }
    candidates.sort(ascendingComparator);
    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
    // before.
    const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;
    const selectedIndices = [];
    const selectedScores = [];
    while (selectedIndices.length < maxOutputSize && candidates.length > 0) {
        const candidate = candidates.pop();
        const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;
        if (originalScore < scoreThreshold) {
            break;
        }
        // Overlapping boxes are likely to have similar scores, therefore we
        // iterate through the previously selected boxes backwards in order to
        // see if candidate's score should be suppressed. We use
        // suppressBeginIndex to track and ensure a candidate can be suppressed
        // by a selected box no more than once. Also, if the overlap exceeds
        // iouThreshold, we simply ignore the candidate.
        let ignoreCandidate = false;
        for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {
            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);
            if (iou >= iouThreshold) {
                ignoreCandidate = true;
                break;
            }
            candidate.score =
                candidate.score * suppressWeight(iouThreshold, scale, iou);
            if (candidate.score <= scoreThreshold) {
                break;
            }
        }
        // At this point, if `candidate.score` has not dropped below
        // `scoreThreshold`, then we know that we went through all of the
        // previous selections and can safely update `suppressBeginIndex` to the
        // end of the selected array. Then we can re-insert the candidate with
        // the updated score and suppressBeginIndex back in the candidate list.
        // If on the other hand, `candidate.score` has dropped below the score
        // threshold, we will not add it back to the candidates list.
        candidate.suppressBeginIndex = selectedIndices.length;
        if (!ignoreCandidate) {
            // Candidate has passed all the tests, and is not suppressed, so
            // select the candidate.
            if (candidate.score === originalScore) {
                selectedIndices.push(boxIndex);
                selectedScores.push(candidate.score);
            }
            else if (candidate.score > scoreThreshold) {
                // Candidate's score is suppressed but is still high enough to be
                // considered, so add back to the candidates list.
                Object(_array_util__WEBPACK_IMPORTED_MODULE_2__["binaryInsert"])(candidates, candidate, ascendingComparator);
            }
        }
    }
    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.
    const validOutputs = selectedIndices.length;
    const elemsToPad = maxOutputSize - validOutputs;
    if (padToMaxOutputSize && elemsToPad > 0) {
        selectedIndices.push(...new Array(elemsToPad).fill(0));
        selectedScores.push(...new Array(elemsToPad).fill(0.0));
    }
    const result = { selectedIndices: Object(_ops_tensor1d__WEBPACK_IMPORTED_MODULE_1__["tensor1d"])(selectedIndices, 'int32') };
    if (returnScoresTensor) {
        result['selectedScores'] = Object(_ops_tensor1d__WEBPACK_IMPORTED_MODULE_1__["tensor1d"])(selectedScores, 'float32');
    }
    if (returnValidOutputs) {
        result['validOutputs'] = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_0__["scalar"])(validOutputs, 'int32');
    }
    return result;
}
function intersectionOverUnion(boxes, i, j) {
    const iCoord = boxes.subarray(i * 4, i * 4 + 4);
    const jCoord = boxes.subarray(j * 4, j * 4 + 4);
    const yminI = Math.min(iCoord[0], iCoord[2]);
    const xminI = Math.min(iCoord[1], iCoord[3]);
    const ymaxI = Math.max(iCoord[0], iCoord[2]);
    const xmaxI = Math.max(iCoord[1], iCoord[3]);
    const yminJ = Math.min(jCoord[0], jCoord[2]);
    const xminJ = Math.min(jCoord[1], jCoord[3]);
    const ymaxJ = Math.max(jCoord[0], jCoord[2]);
    const xmaxJ = Math.max(jCoord[1], jCoord[3]);
    const areaI = (ymaxI - yminI) * (xmaxI - xminI);
    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
    if (areaI <= 0 || areaJ <= 0) {
        return 0.0;
    }
    const intersectionYmin = Math.max(yminI, yminJ);
    const intersectionXmin = Math.max(xminI, xminJ);
    const intersectionYmax = Math.min(ymaxI, ymaxJ);
    const intersectionXmax = Math.min(xmaxI, xmaxJ);
    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *
        Math.max(intersectionXmax - intersectionXmin, 0.0);
    return intersectionArea / (areaI + areaJ - intersectionArea);
}
// A Gaussian penalty function, this method always returns values in [0, 1].
// The weight is a function of similarity, the more overlap two boxes are, the
// smaller the weight is, meaning highly overlapping boxe will be significantly
// penalized. On the other hand, a non-overlapping box will not be penalized.
function suppressWeight(iouThreshold, scale, iou) {
    const weight = Math.exp(scale * iou * iou);
    return iou <= iouThreshold ? weight : 0.0;
}
function ascendingComparator(c1, c2) {
    // For objects with same scores, we make the object with the larger index go
    // first. In an array that pops from the end, this means that the object with
    // the smaller index will be popped first. This ensures the same output as
    // the TensorFlow python version.
    return (c1.score - c2.score) ||
        ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));
}
//# sourceMappingURL=non_max_suppression_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/split_shared.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/split_shared.js ***!
  \**************************************************************************/
/*! exports provided: split */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "split", function() { return split; });
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// TODO(annxingyuan): Use this helper in WASM Split kernel once intermediate
// kernels have been modularized in WebGL and CPU
// https://github.com/tensorflow/tfjs/issues/2822.
/** Shared implementation of the split kernel across WebGL and CPU. */
function split(x, sizeSplits, axis) {
    const begin = new Array(x.rank).fill(0);
    const size = x.shape.slice();
    return sizeSplits.map(s => {
        const sliceSize = [...size];
        sliceSize[axis] = s;
        const sliceT = Object(_ops_slice__WEBPACK_IMPORTED_MODULE_0__["slice"])(x, begin, sliceSize);
        begin[axis] += s;
        return sliceT;
    });
}
//# sourceMappingURL=split_shared.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/tile_impl.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/tile_impl.js ***!
  \***********************************************************************/
/*! exports provided: tile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tile", function() { return tile; });
/* harmony import */ var _ops_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * An implementation of the tile kernel shared between webgl and cpu for string
 * tensors only.
 */

function tile(xBuf, reps) {
    const newShape = new Array(xBuf.rank);
    for (let i = 0; i < newShape.length; i++) {
        newShape[i] = xBuf.shape[i] * reps[i];
    }
    const result = Object(_ops_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])(newShape, xBuf.dtype);
    for (let i = 0; i < result.values.length; ++i) {
        const newLoc = result.indexToLoc(i);
        const originalLoc = new Array(xBuf.rank);
        for (let j = 0; j < originalLoc.length; j++) {
            originalLoc[j] = newLoc[j] % xBuf.shape[j];
        }
        const originalIndex = xBuf.locToIndex(originalLoc);
        result.values[i] = xBuf.values[originalIndex];
    }
    return result.toTensor();
}
//# sourceMappingURL=tile_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/topk_impl.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/topk_impl.js ***!
  \***********************************************************************/
/*! exports provided: topkImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "topkImpl", function() { return topkImpl; });
/* harmony import */ var _ops_tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/** An implementation of the TopK kernel shared between webgl and cpu. */


function topkImpl(x, xShape, xDtype, k, sorted) {
    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
    const lastDim = xShape[xShape.length - 1];
    const [batch, size] = [x.length / lastDim, lastDim];
    const allTopKVals = Object(_util__WEBPACK_IMPORTED_MODULE_1__["getTypedArrayFromDType"])(xDtype, batch * k);
    const allTopKIndices = Object(_util__WEBPACK_IMPORTED_MODULE_1__["getTypedArrayFromDType"])('int32', batch * k);
    for (let b = 0; b < batch; b++) {
        const offset = b * size;
        const vals = x.subarray(offset, offset + size);
        const valAndInd = [];
        for (let i = 0; i < vals.length; i++) {
            valAndInd.push({ value: vals[i], index: i });
        }
        valAndInd.sort((a, b) => b.value - a.value);
        const outOffset = b * k;
        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);
        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);
        for (let i = 0; i < k; i++) {
            topKVals[i] = valAndInd[i].value;
            topKIndices[i] = valAndInd[i].index;
        }
    }
    // Reshape back to the original input shape, except that the last
    // dimension is k.
    const outputShape = xShape.slice();
    outputShape[outputShape.length - 1] = k;
    return [
        Object(_ops_tensor__WEBPACK_IMPORTED_MODULE_0__["tensor"])(allTopKVals, outputShape, xDtype),
        Object(_ops_tensor__WEBPACK_IMPORTED_MODULE_0__["tensor"])(allTopKIndices, outputShape, 'int32')
    ];
}
//# sourceMappingURL=topk_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js ***!
  \************************************************************************/
/*! exports provided: whereImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whereImpl", function() { return whereImpl; });
/* harmony import */ var _ops_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/** An implementation of the Where kernel shared between cpu and webgl */

function whereImpl(condShape, condVals) {
    const indices = [];
    for (let i = 0; i < condVals.length; i++) {
        if (condVals[i]) {
            indices.push(i);
        }
    }
    const inBuffer = Object(_ops_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])(condShape, 'int32');
    const out = Object(_ops_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])([indices.length, condShape.length], 'int32');
    for (let i = 0; i < indices.length; i++) {
        const loc = inBuffer.indexToLoc(indices[i]);
        const offset = i * condShape.length;
        out.values.set(loc, offset);
    }
    return out.toTensor();
}
//# sourceMappingURL=where_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/base.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/base.js ***!
  \*********************************************************/
/*! exports provided: AdadeltaOptimizer, AdagradOptimizer, AdamOptimizer, AdamaxOptimizer, MomentumOptimizer, Optimizer, RMSPropOptimizer, SGDOptimizer, Tensor, TensorBuffer, Variable, Rank, sumOutType, upcastType, abs, acos, acosh, add, addN, all, any, argMax, argMin, asin, asinh, atan, atan2, atanh, avgPool, avgPool3d, basicLSTMCell, batchToSpaceND, batchNorm, batchNorm2d, batchNorm3d, batchNorm4d, broadcastTo, buffer, cast, ceil, clipByValue, clone, complex, concat, concat1d, concat2d, concat3d, concat4d, conv1d, conv2d, conv2dTranspose, conv3d, conv3dTranspose, cos, cosh, cumsum, depthToSpace, depthwiseConv2d, diag, dilation2d, div, divNoNan, dot, elu, equal, erf, exp, expandDims, expm1, eye, fill, floor, floorDiv, gather, greater, greaterEqual, imag, isFinite, isInf, isNaN, leakyRelu, less, lessEqual, linspace, localResponseNormalization, log, log1p, logSigmoid, logSoftmax, logSumExp, logicalAnd, logicalNot, logicalOr, logicalXor, matMul, max, maxPool, maxPool3d, maxPoolWithArgmax, maximum, mean, min, minimum, mirrorPad, mod, moments, mul, multiRNNCell, multinomial, neg, notEqual, oneHot, ones, onesLike, outerProduct, pad, pad1d, pad2d, pad3d, pad4d, pool, pow, prelu, print, prod, rand, randomGamma, randomNormal, randomUniform, range, real, reciprocal, relu, relu6, reshape, reverse, reverse1d, reverse2d, reverse3d, reverse4d, round, rsqrt, scalar, selu, separableConv2d, setdiff1dAsync, sigmoid, sign, sin, sinh, slice, slice1d, slice2d, slice3d, slice4d, softmax, softplus, spaceToBatchND, fft, ifft, irfft, rfft, split, sqrt, square, squaredDifference, squeeze, stack, step, stridedSlice, sub, sum, tan, tanh, tensor, tensor1d, tensor2d, tensor3d, tensor4d, tensor5d, tensor6d, tile, topk, truncatedNormal, unique, unsortedSegmentSum, unstack, variable, where, whereAsync, zeros, zerosLike, booleanMaskAsync, equalStrict, greaterEqualStrict, greaterStrict, lessEqualStrict, lessStrict, notEqualStrict, addStrict, divStrict, maximumStrict, minimumStrict, modStrict, mulStrict, powStrict, squaredDifferenceStrict, subStrict, transpose, norm, movingAverage, scatterND, sparseToDense, gatherND, dropout, enclosingPowerOfTwo, cosineWindow, inTopKAsync, op, OP_SCOPE_SUFFIX, image, linalg, losses, spectral, fused, signal, Reduction, train, enableProdMode, enableDebugMode, disableDeprecationWarnings, deprecationWarn, disposeVariables, engine, memory, profile, tidy, dispose, keep, time, setBackend, ready, getBackend, removeBackend, findBackend, findBackendFactory, registerBackend, backend, setPlatform, getKernel, getGradient, getKernelsForBackend, registerKernel, registerGradient, unregisterKernel, unregisterGradient, copyRegisteredKernels, customGrad, grad, grads, valueAndGrad, valueAndGrads, variableGrads, Environment, env, ENV, version_core, nextFrame, browser, io, math, serialization, test_util, util, backend_util, tensor_util, slice_util, gather_util, scatter_util, device_util, kernel_impls, KernelBackend, DataStorage, Abs, Acos, Acosh, Add, AddN, All, Any, ArgMax, ArgMin, Asin, Asinh, Atan, Atanh, Atan2, AvgPool, AvgPoolBackprop, AvgPool3D, AvgPool3DBackprop, BatchMatMul, BatchToSpaceND, BroadcastTo, Cast, Ceil, ClipByValue, Complex, Concat, Conv2D, Conv2DBackpropFilter, Conv2DBackpropInput, Conv3D, Conv3DBackpropFilterV2, Conv3DBackpropInputV2, Cos, Cosh, Cumsum, CropAndResize, DepthToSpace, DepthwiseConv2dNative, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropInput, Diag, Dilation2D, Dilation2DBackpropInput, Dilation2DBackpropFilter, Div, Elu, EluGrad, Erf, Equal, Exp, Expm1, FFT, Fill, FlipLeftRight, Floor, FloorDiv, FusedBatchNorm, GatherV2, GatherNd, Greater, GreaterEqual, Identity, IFFT, Imag, IsFinite, IsInf, IsNan, Less, LessEqual, LinSpace, Log, Log1p, LogicalAnd, LogicalNot, LogicalOr, LogSoftmax, LRN, LRNBackprop, Max, Maximum, MaxPool, MaxPoolBackprop, MaxPool3D, MaxPool3DBackprop, MaxPoolWithArgmax, Mean, Min, Minimum, MirrorPad, Mod, Multiply, Negate, NotEqual, NonMaxSuppressionV3, NonMaxSuppressionV4, NonMaxSuppressionV5, OnesLike, OneHot, PadV2, Pool, Pow, Prelu, Prod, Range, Real, Reciprocal, Relu, Reshape, ResizeNearestNeighbor, ResizeNearestNeighborGrad, ResizeBilinear, ResizeBilinearGrad, Relu6, Reverse, Round, Rsqrt, ScatterNd, SelectV2, Selu, Slice, Sin, Sinh, Sign, Sigmoid, Softplus, Sqrt, Sum, SpaceToBatchND, SplitV, Softmax, SquaredDifference, Square, Sub, SparseToDense, StridedSlice, Tan, Tanh, Tile, TopK, Transpose, Unique, Unpack, UnsortedSegmentSum, ZerosLike, Step, FromPixels, RotateWithOffset, _FusedMatMul, FusedConv2D, FusedDepthwiseConv2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _io_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io/io */ "./node_modules/@tensorflow/tfjs-core/dist/io/io.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "io", function() { return _io_io__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ "./node_modules/@tensorflow/tfjs-core/dist/math.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "math", function() { return _math__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _ops_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ops/browser */ "./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "browser", function() { return _ops_browser__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ops/gather_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "gather_util", function() { return _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_3__; });
/* harmony import */ var _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ops/scatter_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "scatter_util", function() { return _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_4__; });
/* harmony import */ var _ops_slice_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ops/slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "slice_util", function() { return _ops_slice_util__WEBPACK_IMPORTED_MODULE_5__; });
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "serialization", function() { return _serialization__WEBPACK_IMPORTED_MODULE_6__; });
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "tensor_util", function() { return _tensor_util__WEBPACK_IMPORTED_MODULE_7__; });
/* harmony import */ var _test_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./test_util */ "./node_modules/@tensorflow/tfjs-core/dist/test_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "test_util", function() { return _test_util__WEBPACK_IMPORTED_MODULE_8__; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "util", function() { return _util__WEBPACK_IMPORTED_MODULE_9__; });
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./version */ "./node_modules/@tensorflow/tfjs-core/dist/version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "version_core", function() { return _version__WEBPACK_IMPORTED_MODULE_10__["version"]; });

/* harmony import */ var _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./optimizers/adadelta_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdadeltaOptimizer", function() { return _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_11__["AdadeltaOptimizer"]; });

/* harmony import */ var _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./optimizers/adagrad_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdagradOptimizer", function() { return _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_12__["AdagradOptimizer"]; });

/* harmony import */ var _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./optimizers/adam_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdamOptimizer", function() { return _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_13__["AdamOptimizer"]; });

/* harmony import */ var _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./optimizers/adamax_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdamaxOptimizer", function() { return _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_14__["AdamaxOptimizer"]; });

/* harmony import */ var _optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./optimizers/momentum_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MomentumOptimizer", function() { return _optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_15__["MomentumOptimizer"]; });

/* harmony import */ var _optimizers_optimizer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./optimizers/optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Optimizer", function() { return _optimizers_optimizer__WEBPACK_IMPORTED_MODULE_16__["Optimizer"]; });

/* harmony import */ var _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./optimizers/rmsprop_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RMSPropOptimizer", function() { return _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_17__["RMSPropOptimizer"]; });

/* harmony import */ var _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./optimizers/sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SGDOptimizer", function() { return _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_18__["SGDOptimizer"]; });

/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tensor", function() { return _tensor__WEBPACK_IMPORTED_MODULE_19__["Tensor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TensorBuffer", function() { return _tensor__WEBPACK_IMPORTED_MODULE_19__["TensorBuffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return _tensor__WEBPACK_IMPORTED_MODULE_19__["Variable"]; });

/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/types.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rank", function() { return _types__WEBPACK_IMPORTED_MODULE_20__["Rank"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sumOutType", function() { return _types__WEBPACK_IMPORTED_MODULE_20__["sumOutType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "upcastType", function() { return _types__WEBPACK_IMPORTED_MODULE_20__["upcastType"]; });

/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "abs", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["abs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acos", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["acos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acosh", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["acosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "add", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["add"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addN", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["addN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "all", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["all"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "any", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMax", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["argMax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMin", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["argMin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asin", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["asin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asinh", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["asinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["atan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan2", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["atan2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atanh", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["atanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["avgPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["avgPool3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basicLSTMCell", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["basicLSTMCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchToSpaceND", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["batchToSpaceND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["batchNorm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["batchNorm2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["batchNorm3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm4d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["batchNorm4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "broadcastTo", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["broadcastTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["buffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cast", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["cast"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["ceil"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clipByValue", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["clipByValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["clone"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "complex", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["complex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["concat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat1d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["concat1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["concat2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["concat3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat4d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["concat4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv1d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["conv1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["conv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2dTranspose", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["conv2dTranspose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["conv3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3dTranspose", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["conv3dTranspose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["cos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosh", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["cosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cumsum", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["cumsum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthToSpace", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["depthToSpace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["depthwiseConv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "diag", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["diag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dilation2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["dilation2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "div", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["div"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divNoNan", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["divNoNan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["dot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elu", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["elu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equal", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["equal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "erf", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["erf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exp", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["exp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expandDims", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["expandDims"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expm1", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["expm1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eye", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["eye"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fill", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["fill"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["floor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floorDiv", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["floorDiv"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gather", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["gather"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greater", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["greater"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqual", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["greaterEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "imag", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["imag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFinite", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["isFinite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInf", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["isInf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["isNaN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "leakyRelu", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["leakyRelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "less", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["less"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqual", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["lessEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linspace", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["linspace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "localResponseNormalization", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["localResponseNormalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["log"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log1p", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["log1p"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSigmoid", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["logSigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSoftmax", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["logSoftmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSumExp", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["logSumExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalAnd", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["logicalAnd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalNot", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["logicalNot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalOr", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["logicalOr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalXor", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["logicalXor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matMul", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["matMul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "max", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["max"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["maxPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["maxPool3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPoolWithArgmax", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["maxPoolWithArgmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximum", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["maximum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mean", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["mean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "min", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["min"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimum", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["minimum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mirrorPad", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["mirrorPad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["mod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moments", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["moments"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["mul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multiRNNCell", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["multiRNNCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multinomial", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["multinomial"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "neg", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["neg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqual", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["notEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "oneHot", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["oneHot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ones", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["ones"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onesLike", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["onesLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "outerProduct", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["outerProduct"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["pad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad1d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["pad1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["pad2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["pad3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad4d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["pad4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pool", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["pool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["pow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prelu", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["prelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "print", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["print"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prod", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["prod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rand", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["rand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomGamma", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["randomGamma"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomNormal", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["randomNormal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomUniform", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["randomUniform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["range"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "real", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["real"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reciprocal", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["reciprocal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["relu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu6", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["relu6"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reshape", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["reshape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["reverse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse1d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["reverse1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["reverse2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["reverse3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse4d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["reverse4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "round", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["round"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rsqrt", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["rsqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scalar", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["scalar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "selu", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["selu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "separableConv2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["separableConv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setdiff1dAsync", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["setdiff1dAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sigmoid", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sinh", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["slice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice1d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["slice1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["slice2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["slice3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice4d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["slice4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softmax", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["softmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softplus", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["softplus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spaceToBatchND", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["spaceToBatchND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fft", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["fft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ifft", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["ifft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "irfft", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["irfft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rfft", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["rfft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "split", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["split"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sqrt", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "square", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["square"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifference", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["squaredDifference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squeeze", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["squeeze"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stack", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["stack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "step", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["step"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stridedSlice", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["stridedSlice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tan", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tanh", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tensor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor1d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tensor1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor2d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tensor2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor3d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tensor3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor4d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tensor4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor5d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tensor5d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor6d", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tensor6d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tile", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["tile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "topk", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["topk"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "truncatedNormal", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["truncatedNormal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unique", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["unique"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unsortedSegmentSum", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["unsortedSegmentSum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstack", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["unstack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variable", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["variable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "where", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["where"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "whereAsync", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["whereAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zeros", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["zeros"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zerosLike", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["zerosLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "booleanMaskAsync", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["booleanMaskAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equalStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["equalStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqualStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["greaterEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["greaterStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqualStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["lessEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["lessStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqualStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["notEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["addStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["divStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximumStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["maximumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimumStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["minimumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["modStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mulStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["mulStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "powStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["powStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifferenceStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["squaredDifferenceStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "subStrict", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["subStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["transpose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "norm", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["norm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "movingAverage", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["movingAverage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scatterND", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["scatterND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sparseToDense", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["sparseToDense"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gatherND", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["gatherND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dropout", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["dropout"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enclosingPowerOfTwo", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["enclosingPowerOfTwo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosineWindow", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["cosineWindow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inTopKAsync", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["inTopKAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "op", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["op"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OP_SCOPE_SUFFIX", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["OP_SCOPE_SUFFIX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "image", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["image"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linalg", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["linalg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "losses", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["losses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spectral", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["spectral"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fused", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["fused"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "signal", function() { return _ops_ops__WEBPACK_IMPORTED_MODULE_21__["signal"]; });

/* harmony import */ var _ops_loss_ops_utils__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ops/loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reduction", function() { return _ops_loss_ops_utils__WEBPACK_IMPORTED_MODULE_22__["Reduction"]; });

/* harmony import */ var _train__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./train */ "./node_modules/@tensorflow/tfjs-core/dist/train.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "train", function() { return _train__WEBPACK_IMPORTED_MODULE_23__["train"]; });

/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enableProdMode", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["enableProdMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enableDebugMode", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["enableDebugMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disableDeprecationWarnings", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["disableDeprecationWarnings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecationWarn", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["deprecationWarn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disposeVariables", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["disposeVariables"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "engine", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["engine"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memory", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["memory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "profile", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["profile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tidy", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["tidy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dispose", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["dispose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keep", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["keep"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "time", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["time"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setBackend", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["setBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ready", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["ready"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getBackend", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["getBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeBackend", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["removeBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findBackend", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["findBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findBackendFactory", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["findBackendFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerBackend", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["registerBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "backend", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["backend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setPlatform", function() { return _globals__WEBPACK_IMPORTED_MODULE_24__["setPlatform"]; });

/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getKernel", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["getKernel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getGradient", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["getGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getKernelsForBackend", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["getKernelsForBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerKernel", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["registerKernel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerGradient", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["registerGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unregisterKernel", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["unregisterKernel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unregisterGradient", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["unregisterGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copyRegisteredKernels", function() { return _kernel_registry__WEBPACK_IMPORTED_MODULE_25__["copyRegisteredKernels"]; });

/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "customGrad", function() { return _gradients__WEBPACK_IMPORTED_MODULE_26__["customGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "grad", function() { return _gradients__WEBPACK_IMPORTED_MODULE_26__["grad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "grads", function() { return _gradients__WEBPACK_IMPORTED_MODULE_26__["grads"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "valueAndGrad", function() { return _gradients__WEBPACK_IMPORTED_MODULE_26__["valueAndGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "valueAndGrads", function() { return _gradients__WEBPACK_IMPORTED_MODULE_26__["valueAndGrads"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variableGrads", function() { return _gradients__WEBPACK_IMPORTED_MODULE_26__["variableGrads"]; });

/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Environment", function() { return _environment__WEBPACK_IMPORTED_MODULE_27__["Environment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "env", function() { return _environment__WEBPACK_IMPORTED_MODULE_27__["env"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ENV", function() { return _environment__WEBPACK_IMPORTED_MODULE_27__["ENV"]; });

/* harmony import */ var _browser_util__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./browser_util */ "./node_modules/@tensorflow/tfjs-core/dist/browser_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nextFrame", function() { return _browser_util__WEBPACK_IMPORTED_MODULE_28__["nextFrame"]; });

/* harmony import */ var _backends_backend_util__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./backends/backend_util */ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "backend_util", function() { return _backends_backend_util__WEBPACK_IMPORTED_MODULE_29__; });
/* harmony import */ var _device_util__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./device_util */ "./node_modules/@tensorflow/tfjs-core/dist/device_util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "device_util", function() { return _device_util__WEBPACK_IMPORTED_MODULE_30__; });
/* harmony import */ var _backends_kernel_impls__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./backends/kernel_impls */ "./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "kernel_impls", function() { return _backends_kernel_impls__WEBPACK_IMPORTED_MODULE_31__; });
/* harmony import */ var _backends_backend__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./backends/backend */ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KernelBackend", function() { return _backends_backend__WEBPACK_IMPORTED_MODULE_32__["KernelBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataStorage", function() { return _backends_backend__WEBPACK_IMPORTED_MODULE_32__["DataStorage"]; });

/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Abs", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Abs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Acos", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Acos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Acosh", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Acosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Add", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Add"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AddN", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["AddN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "All", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["All"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Any", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArgMax", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ArgMax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArgMin", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ArgMin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Asin", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Asin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Asinh", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Asinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Atan", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Atan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Atanh", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Atanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Atan2", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Atan2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPool", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["AvgPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPoolBackprop", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["AvgPoolBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPool3D", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["AvgPool3D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPool3DBackprop", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["AvgPool3DBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BatchMatMul", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["BatchMatMul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BatchToSpaceND", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["BatchToSpaceND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BroadcastTo", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["BroadcastTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cast", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Cast"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Ceil", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Ceil"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ClipByValue", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ClipByValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Complex", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Complex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Concat", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Concat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv2D", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Conv2D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv2DBackpropFilter", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Conv2DBackpropFilter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv2DBackpropInput", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Conv2DBackpropInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv3D", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Conv3D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv3DBackpropFilterV2", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Conv3DBackpropFilterV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv3DBackpropInputV2", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Conv3DBackpropInputV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cos", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Cos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cosh", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Cosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cumsum", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Cumsum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CropAndResize", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["CropAndResize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthToSpace", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["DepthToSpace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNative", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["DepthwiseConv2dNative"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNativeBackpropFilter", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["DepthwiseConv2dNativeBackpropFilter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNativeBackpropInput", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["DepthwiseConv2dNativeBackpropInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Diag", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Diag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dilation2D", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Dilation2D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dilation2DBackpropInput", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Dilation2DBackpropInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dilation2DBackpropFilter", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Dilation2DBackpropFilter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Div", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Div"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Elu", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Elu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EluGrad", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["EluGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Erf", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Erf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Equal", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Equal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Exp", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Exp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Expm1", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Expm1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FFT", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["FFT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Fill"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlipLeftRight", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["FlipLeftRight"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Floor", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Floor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FloorDiv", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["FloorDiv"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FusedBatchNorm", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["FusedBatchNorm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GatherV2", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["GatherV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GatherNd", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["GatherNd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Greater", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Greater"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GreaterEqual", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["GreaterEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Identity", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Identity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IFFT", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["IFFT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Imag", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Imag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsFinite", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["IsFinite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsInf", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["IsInf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsNan", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["IsNan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Less", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Less"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LessEqual", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LessEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LinSpace", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LinSpace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Log", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Log"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Log1p", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Log1p"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogicalAnd", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LogicalAnd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogicalNot", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LogicalNot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogicalOr", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LogicalOr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogSoftmax", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LogSoftmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LRN", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LRN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LRNBackprop", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["LRNBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Max", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Max"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Maximum", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Maximum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPool", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["MaxPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPoolBackprop", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["MaxPoolBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPool3D", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["MaxPool3D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPool3DBackprop", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["MaxPool3DBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPoolWithArgmax", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["MaxPoolWithArgmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Mean", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Mean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Min", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Min"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Minimum", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Minimum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MirrorPad", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["MirrorPad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Mod", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Mod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Multiply", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Multiply"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Negate", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Negate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NotEqual", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["NotEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV3", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["NonMaxSuppressionV3"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV4", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["NonMaxSuppressionV4"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV5", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["NonMaxSuppressionV5"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OnesLike", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["OnesLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OneHot", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["OneHot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PadV2", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["PadV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pool", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Pool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pow", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Pow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Prelu", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Prelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Prod", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Prod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Range", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Range"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Real", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Real"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reciprocal", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Reciprocal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Relu", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Relu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reshape", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Reshape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeNearestNeighbor", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ResizeNearestNeighbor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeNearestNeighborGrad", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ResizeNearestNeighborGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeBilinear", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ResizeBilinear"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeBilinearGrad", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ResizeBilinearGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Relu6", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Relu6"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reverse", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Reverse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Round", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Round"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rsqrt", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Rsqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ScatterNd", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ScatterNd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SelectV2", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["SelectV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Selu", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Selu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Slice", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Slice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sin", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Sin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sinh", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Sinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sign", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Sign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sigmoid", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Sigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Softplus", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Softplus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sqrt", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Sqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sum", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Sum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpaceToBatchND", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["SpaceToBatchND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitV", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["SplitV"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Softmax", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Softmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SquaredDifference", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["SquaredDifference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Square", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Square"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sub", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Sub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SparseToDense", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["SparseToDense"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StridedSlice", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["StridedSlice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tan", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Tan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tanh", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Tanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tile", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Tile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TopK", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["TopK"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transpose", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Transpose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Unique", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Unique"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Unpack", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Unpack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnsortedSegmentSum", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["UnsortedSegmentSum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZerosLike", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["ZerosLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Step", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["Step"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FromPixels", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["FromPixels"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RotateWithOffset", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["RotateWithOffset"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_FusedMatMul", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["_FusedMatMul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FusedConv2D", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["FusedConv2D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FusedDepthwiseConv2D", function() { return _kernel_names__WEBPACK_IMPORTED_MODULE_33__["FusedDepthwiseConv2D"]; });

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// base.ts is tfjs-core without auto registration of things like flags,
// gradients, chained ops or the opHandler. See base_side_effects.ts for parts
// tfjs core that are required side effects.
/**
 * @fileoverview
 * @suppress {partialAlias} Optimization disabled due to passing the module
 * object into a function below:
 *
 *   import * as ops from './ops/ops';
 *   setOpHandler(ops);
 */
// Serialization.











// Optimizers.


















// Top-level method exports.

// Second level exports.





// Backend specific.

// Export all kernel names / info.

//# sourceMappingURL=base.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js ***!
  \**********************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _platforms_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platforms/platform_browser */ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js");
/* harmony import */ var _platforms_platform_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platforms/platform_node */ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js");
/* harmony import */ var _ops_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ops/buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_clone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ops/clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _ops_print__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ops/print */ "./node_modules/@tensorflow/tfjs-core/dist/ops/print.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Required side effectful code for tfjs-core
// Set up Engine and ENV

Object(_engine__WEBPACK_IMPORTED_MODULE_0__["getOrMakeEngine"])();
// Register backend-agnostic flags.

// Register platforms


// Set up OpHandler





const opHandler = {
    buffer: _ops_buffer__WEBPACK_IMPORTED_MODULE_4__["buffer"],
    cast: _ops_cast__WEBPACK_IMPORTED_MODULE_5__["cast"],
    clone: _ops_clone__WEBPACK_IMPORTED_MODULE_6__["clone"],
    print: _ops_print__WEBPACK_IMPORTED_MODULE_7__["print"]
};
Object(_tensor__WEBPACK_IMPORTED_MODULE_8__["setOpHandler"])(opHandler);
//# sourceMappingURL=base_side_effects.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/browser_util.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/browser_util.js ***!
  \*****************************************************************/
/*! exports provided: nextFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextFrame", function() { return nextFrame; });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const delayCallback = (() => {
    if (typeof requestAnimationFrame !== 'undefined') {
        return requestAnimationFrame;
    }
    else if (typeof setImmediate !== 'undefined') {
        return setImmediate;
    }
    return (f) => f(); // no delays
})();
/**
 * Returns a promise that resolve when a requestAnimationFrame has completed.
 *
 * On Node.js this uses setImmediate instead of requestAnimationFrame.
 *
 * This is simply a sugar method so that users can do the following:
 * `await tf.nextFrame();`
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */
function nextFrame() {
    return new Promise(resolve => delayCallback(() => resolve()));
}

//# sourceMappingURL=browser_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/device_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/device_util.js ***!
  \****************************************************************/
/*! exports provided: isMobile, isBrowser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return isMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBrowser", function() { return isBrowser; });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line:no-any
function _isNavigatorDefined() {
    return typeof navigator !== 'undefined' && navigator != null;
}
function isMobile() {
    if (_isNavigatorDefined()) {
        // tslint:disable-next-line:no-any
        const a = navigator.userAgent || navigator.vendor || window.opera;
        // tslint:disable-next-line:max-line-length
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i
            .test(a) ||
            // tslint:disable-next-line:max-line-length
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
                .test(a.substr(0, 4));
    }
    return false;
}
function isBrowser() {
    return (typeof window !== 'undefined' && window.document != null) ||
        //@ts-ignore
        (typeof WorkerGlobalScope !== 'undefined');
}
//# sourceMappingURL=device_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/engine.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/engine.js ***!
  \***********************************************************/
/*! exports provided: Engine, getOrMakeEngine, ENGINE, add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Engine", function() { return Engine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrMakeEngine", function() { return getOrMakeEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENGINE", function() { return ENGINE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony import */ var _backends_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backends/backend */ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _global_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global_util */ "./node_modules/@tensorflow/tfjs-core/dist/global_util.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/* harmony import */ var _profiler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./profiler */ "./node_modules/@tensorflow/tfjs-core/dist/profiler.js");
/* harmony import */ var _tape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tape */ "./node_modules/@tensorflow/tfjs-core/dist/tape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











class EngineState {
    constructor() {
        // Public since optimizers will use it.
        this.registeredVariables = {};
        this.nextTapeNodeId = 0;
        this.numBytes = 0;
        this.numTensors = 0;
        this.numStringTensors = 0;
        this.numDataBuffers = 0;
        // Number of nested tf.grad() statements when computing higher-order
        // gradients. E.g. `1` for first-order gradients and `2` for second-order
        // gradients. Used to track if the tape should be removed after a backprop.
        this.gradientDepth = 0;
        // Number of nested kernel calls. When kernel depth is greater than 1, we turn
        // off the tape.
        this.kernelDepth = 0;
        this.scopeStack = [];
        /**
         * Keeps track of the number of data moves during a kernel execution. We
         * maintain a stack since kernels can call other kernels, recursively.
         */
        this.numDataMovesStack = [];
        this.nextScopeId = 0;
        this.tensorInfo = new WeakMap();
        this.profiling = false;
        this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null };
    }
    dispose() {
        for (const variableName in this.registeredVariables) {
            this.registeredVariables[variableName].dispose();
        }
    }
}
class Engine {
    constructor(ENV) {
        this.ENV = ENV;
        this.registry = {};
        this.registryFactory = {};
        this.pendingBackendInitId = 0;
        this.state = new EngineState();
    }
    async ready() {
        if (this.pendingBackendInit != null) {
            return this.pendingBackendInit.then(() => { });
        }
        if (this.backendInstance != null) {
            return;
        }
        const sortedBackends = this.getSortedBackends();
        for (let i = 0; i < sortedBackends.length; i++) {
            const backendName = sortedBackends[i];
            const success = await this.initializeBackend(backendName).success;
            if (success) {
                await this.setBackend(backendName);
                return;
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` +
            `failed.`);
    }
    get backend() {
        if (this.pendingBackendInit != null) {
            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +
                `sure to await tf.ready() or await tf.setBackend() before calling ` +
                `other methods`);
        }
        if (this.backendInstance == null) {
            const { name, asyncInit } = this.initializeBackendsAndReturnBest();
            if (asyncInit) {
                throw new Error(`The highest priority backend '${name}' has not yet been ` +
                    `initialized. Make sure to await tf.ready() or ` +
                    `await tf.setBackend() before calling other methods`);
            }
            this.setBackend(name);
        }
        return this.backendInstance;
    }
    backendNames() {
        return Object.keys(this.registryFactory);
    }
    findBackend(backendName) {
        if (!(backendName in this.registry)) {
            // If the backend hasn't been initialized but we have a registry entry for
            // it, initialize it and return it.
            if (backendName in this.registryFactory) {
                const { asyncInit } = this.initializeBackend(backendName);
                if (asyncInit) {
                    // Backend is not ready yet.
                    return null;
                }
            }
            else {
                return null;
            }
        }
        return this.registry[backendName];
    }
    findBackendFactory(backendName) {
        if (!(backendName in this.registryFactory)) {
            return null;
        }
        return this.registryFactory[backendName].factory;
    }
    registerBackend(backendName, factory, priority = 1) {
        if (backendName in this.registryFactory) {
            console.warn(`${backendName} backend was already registered. ` +
                `Reusing existing backend factory.`);
            return false;
        }
        this.registryFactory[backendName] = { factory, priority };
        return true;
    }
    async setBackend(backendName) {
        if (this.registryFactory[backendName] == null) {
            throw new Error(`Backend name '${backendName}' not found in registry`);
        }
        this.backendName = backendName;
        if (this.registry[backendName] == null) {
            this.backendInstance = null;
            const { success, asyncInit } = this.initializeBackend(backendName);
            const result = asyncInit ? await success : success;
            if (!result) {
                return false;
            }
        }
        this.backendInstance = this.registry[backendName];
        this.setupRegisteredKernels();
        // Reset the profiler.
        this.profiler = new _profiler__WEBPACK_IMPORTED_MODULE_5__["Profiler"](this.backendInstance);
        return true;
    }
    setupRegisteredKernels() {
        const kernels = Object(_kernel_registry__WEBPACK_IMPORTED_MODULE_4__["getKernelsForBackend"])(this.backendName);
        kernels.forEach(kernel => {
            if (kernel.setupFunc != null) {
                kernel.setupFunc(this.backendInstance);
            }
        });
    }
    disposeRegisteredKernels(backendName) {
        const kernels = Object(_kernel_registry__WEBPACK_IMPORTED_MODULE_4__["getKernelsForBackend"])(backendName);
        kernels.forEach(kernel => {
            if (kernel.disposeFunc != null) {
                kernel.disposeFunc(this.registry[backendName]);
            }
        });
    }
    /**
     * Initializes a backend by looking up the backend name in the factory
     * registry and calling the factory method. Returns a boolean representing
     * whether the initialization of the backend suceeded. Throws an error if
     * there is no backend in the factory registry.
     */
    initializeBackend(backendName) {
        const registryFactoryEntry = this.registryFactory[backendName];
        if (registryFactoryEntry == null) {
            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
        }
        try {
            const backend = registryFactoryEntry.factory();
            /* Test if the factory returns a promise.
            Done in a more liberal way than
            previous 'Promise.resolve(backend)===backend'
            as we needed to account for custom Promise
            implementations (e.g. Angular) */
            if (backend && !(backend instanceof _backends_backend__WEBPACK_IMPORTED_MODULE_0__["KernelBackend"])
                && typeof backend.then === 'function') {
                const promiseId = ++this.pendingBackendInitId;
                const success = backend
                    .then(backendInstance => {
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) {
                        return false;
                    }
                    this.registry[backendName] = backendInstance;
                    this.pendingBackendInit = null;
                    return true;
                })
                    .catch(err => {
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) {
                        return false;
                    }
                    this.pendingBackendInit = null;
                    console.warn(`Initialization of backend ${backendName} failed`);
                    console.warn(err.stack || err.message);
                    return false;
                });
                this.pendingBackendInit = success;
                return { success, asyncInit: true };
            }
            else {
                this.registry[backendName] = backend;
                return { success: true, asyncInit: false };
            }
        }
        catch (err) {
            console.warn(`Initialization of backend ${backendName} failed`);
            console.warn(err.stack || err.message);
            return { success: false, asyncInit: false };
        }
    }
    removeBackend(backendName) {
        if (!(backendName in this.registryFactory)) {
            throw new Error(`${backendName} backend not found in registry`);
        }
        if (this.backendName === backendName && this.pendingBackendInit != null) {
            // There is a pending promise of the backend we want to remove. Make it
            // obsolete.
            this.pendingBackendInitId++;
        }
        if (backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        delete this.registryFactory[backendName];
        // Unset the backend if it is active.
        if (this.backendName === backendName) {
            this.pendingBackendInit = null;
            this.backendName = null;
            this.backendInstance = null;
        }
    }
    getSortedBackends() {
        if (Object.keys(this.registryFactory).length === 0) {
            throw new Error('No backend found in registry.');
        }
        return Object.keys(this.registryFactory).sort((a, b) => {
            // Highest priority comes first.
            return this.registryFactory[b].priority -
                this.registryFactory[a].priority;
        });
    }
    initializeBackendsAndReturnBest() {
        const sortedBackends = this.getSortedBackends();
        for (let i = 0; i < sortedBackends.length; i++) {
            const backendName = sortedBackends[i];
            const { success, asyncInit } = this.initializeBackend(backendName);
            if (asyncInit || success) {
                return { name: backendName, asyncInit };
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` +
            `failed.`);
    }
    moveData(backend, dataId) {
        const info = this.state.tensorInfo.get(dataId);
        const srcBackend = info.backend;
        const values = this.readSync(dataId);
        // Delete the tensor from the old backend and move it to the new
        // backend.
        srcBackend.disposeData(dataId);
        info.backend = backend;
        backend.move(dataId, values, info.shape, info.dtype);
        if (this.shouldCheckForMemLeaks()) {
            // Track the number of moves during a kernel execution to correctly
            // detect memory leaks.
            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
        }
    }
    tidy(nameOrFn, fn) {
        let name = null;
        if (fn == null) {
            // Called with only 1 argument.
            if (typeof nameOrFn !== 'function') {
                throw new Error('Please provide a function to tidy()');
            }
            fn = nameOrFn;
        }
        else {
            // Called with 2 arguments.
            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
                throw new Error('When calling with two arguments, the first argument ' +
                    'to tidy() must be a string');
            }
            if (typeof fn !== 'function') {
                throw new Error('When calling with two arguments, the 2nd argument ' +
                    'to tidy() must be a function');
            }
            name = nameOrFn;
            // TODO(nsthorat,smilkov): Do operation logging and performance
            // profiling.
        }
        let result;
        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {
            result = fn();
            if (result instanceof Promise) {
                console.error('Cannot return a Promise inside of tidy.');
            }
            return result;
        });
    }
    scopedRun(start, end, f) {
        start();
        try {
            const res = f();
            end();
            return res;
        }
        catch (ex) {
            end();
            throw ex;
        }
    }
    nextTensorId() {
        return Engine.nextTensorId++;
    }
    nextVariableId() {
        return Engine.nextVariableId++;
    }
    /**
     * This method is called instead of the public-facing tensor.clone() when
     * saving a tensor for backwards pass. It makes sure to add the clone
     * operation to the tape regardless of being called inside a kernel
     * execution.
     *
     * This method will go away once all kernels are modularized since we won't
     * need to turn off the tape inside runKernel().
     */
    clone(x) {
        const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);
        const inputs = { x };
        const grad = (dy) => ({
            x: () => {
                const dtype = 'float32';
                const gradInputs = { x: dy };
                const attrs = { dtype };
                return ENGINE.runKernelFunc(backend => backend.cast(dy, dtype), gradInputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_3__["Cast"], attrs);
            }
        });
        const saved = [];
        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});
        return y;
    }
    /**
     * Execute a kernel with the given name and return the output tensor.
     *
     * @param kernelName The name of the kernel to execute.
     * @param inputs A map of input names to tensors.
     * @param attrs A map of attribute names to their values. An attribute is a
     *     primitive (non-tensor) input to the kernel.
     * @param inputsToSave A list of tensors, inputs to save for the backprop
     *     computation.
     * @param outputsToSave A list of booleans, specifying which output to save
     *     for the backprop computation. These are booleans since the output
     * tensors are not visible to the user.
     */
    runKernel(kernelName, inputs, attrs, inputsToSave, outputsToSave) {
        const forwardFunc = null;
        const backwardsFunc = null;
        // Call runKernel as a stop-gap until we modularize all kernels.
        // Once we modularize all kernels, we will remove the existing
        // `runKernelFunc`.
        return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);
    }
    shouldCheckForMemLeaks() {
        return this.ENV.getBool('IS_TEST');
    }
    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
        const numDataIdsAfter = this.backend.numDataIds();
        // Count the number of data ids associated with the result of the kernel.
        let numOutputDataIds = 0;
        outInfos.forEach(info => {
            // Complex numbers allocate 3 data ids, one for 'real', one for
            // 'imaginary', and one for the container that holds the former two.
            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);
        });
        // Account for the number of moves during kernel execution. A "data move"
        // can happen in the middle of a kernel execution, placing a new (key,value)
        // pair in the data storage. Since data moves have net zero effect (we
        // always remove the data from the old backend), we have to cancel them out
        // when detecting memory leaks.
        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;
        if (dataIdsLeaked > 0) {
            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +
                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
        }
    }
    /**
     * @deprecated Use `runKernel` for newly added kernels. Keep using this method
     *     only for kernels that are not yet fully modularized.
     */
    runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {
        let outputs;
        let saved = [];
        const isTapeOn = this.isTapeOn();
        if (kernelName == null) {
            kernelName =
                this.state.activeScope != null ? this.state.activeScope.name : '';
        }
        const startingBytecount = this.state.numBytes;
        const startingNumTensors = this.state.numTensors;
        if (this.shouldCheckForMemLeaks()) {
            this.state.numDataMovesStack.push(0);
        }
        let kernelFunc;
        const kernel = Object(_kernel_registry__WEBPACK_IMPORTED_MODULE_4__["getKernel"])(kernelName, this.backendName);
        let out;
        if (kernel != null) {
            kernelFunc = () => {
                const numDataIdsBefore = this.backend.numDataIds();
                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });
                const outInfos = Array.isArray(out) ? out : [out];
                if (this.shouldCheckForMemLeaks()) {
                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
                }
                const outTensors = outInfos.map(({ dataId, shape, dtype }) => this.makeTensorFromDataId(dataId, shape, dtype));
                // Save the inputs and outputs.
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since we would never run backprop, which disposes
                // the kept tensors.
                if (isTapeOn) {
                    let tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);
                    if (tensorsToSave == null) {
                        // Fallback for ops that call runKernelFunc and pass in
                        // inputsToSave and outputsToSave. Currently this is the set of ops
                        // with kernel support in the WASM backend. Once those ops and
                        // respective gradients are modularised we can remove this path.
                        if (outputsToSave == null) {
                            outputsToSave = [];
                        }
                        const outsToSave = outTensors.filter((_, i) => outputsToSave[i]);
                        tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);
                    }
                    saved = this.saveTensorsForBackwardMode(tensorsToSave);
                }
                return outTensors;
            };
        }
        else {
            const saveFunc = (tensors) => {
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since we would never run backprop, which disposes
                // the kept tensors.
                if (!isTapeOn) {
                    return;
                }
                saved = tensors.map(tensor => this.keep(this.clone(tensor)));
            };
            kernelFunc = () => {
                const numDataIdsBefore = this.backend.numDataIds();
                out = this.tidy(() => forwardFunc(this.backend, saveFunc));
                const outs = (Array.isArray(out) ? out : [out]);
                if (this.shouldCheckForMemLeaks()) {
                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);
                }
                return outs;
            };
        }
        // Stop recording to a tape when running a kernel.
        let kernelProfile;
        this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {
                outputs = kernelFunc();
            }
            else {
                kernelProfile = this.profiler.profileKernel(kernelName, inputs, () => kernelFunc());
                if (this.ENV.getBool('DEBUG')) {
                    this.profiler.logKernelProfile(kernelProfile);
                }
                outputs = kernelProfile.outputs;
            }
        });
        if (isTapeOn) {
            this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);
        }
        if (this.state.profiling) {
            this.state.activeProfile.kernels.push({
                name: kernelName,
                bytesAdded: this.state.numBytes - startingBytecount,
                totalBytesSnapshot: this.state.numBytes,
                tensorsAdded: this.state.numTensors - startingNumTensors,
                totalTensorsSnapshot: this.state.numTensors,
                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),
                outputShapes: outputs.map(item => item.shape),
                kernelTimeMs: kernelProfile.timeMs,
                extraInfo: kernelProfile.extraInfo
            });
        }
        return (Array.isArray(out) ? outputs : outputs[0]);
    }
    /**
     * Saves tensors used in forward mode for use in backward mode.
     *
     * @param tensors the list of tensors to save.
     */
    saveTensorsForBackwardMode(tensors) {
        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));
        return saved;
    }
    /**
     * Returns a list of tensors to save for a given gradient calculation.
     *
     * Returns undefined if their is no registered gradient for this kernel in the
     * gradient registry.
     *
     * @param kernelName name of kernel to look up gradient for.
     * @param inputs a map of input tensors.
     * @param outputs an array of output tensors from forward mode of kernel.
     */
    getTensorsForGradient(kernelName, inputs, outputs) {
        const gradConfig = Object(_kernel_registry__WEBPACK_IMPORTED_MODULE_4__["getGradient"])(kernelName);
        if (gradConfig != null) {
            const inputsToSave = gradConfig.inputsToSave || [];
            const outputsToSave = gradConfig.outputsToSave || [];
            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
            // specified in inputsToSave will be saved.
            let inputTensorsToSave;
            if (gradConfig.saveAllInputs) {
                _util__WEBPACK_IMPORTED_MODULE_9__["assert"](Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');
                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);
            }
            else {
                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);
            }
            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);
            return inputTensorsToSave.concat(outputTensorsToSave);
        }
        // TODO(yassogba) throw exception here once all runkernelFunc calls with
        // inputsToSave/outputsToSave are removed
        return null;
    }
    /**
     * Internal method used by public APIs for tensor creation. Makes a new
     * tensor with the provided shape, dtype and values. It always
     * creates a new data id and writes the values to the underlying backend.
     */
    makeTensor(values, shape, dtype, backend) {
        if (values == null) {
            throw new Error('Values passed to engine.makeTensor() are null');
        }
        dtype = dtype || 'float32';
        backend = backend || this.backend;
        let backendVals = values;
        if (dtype === 'string' && _util__WEBPACK_IMPORTED_MODULE_9__["isString"](values[0])) {
            backendVals = values.map(d => _util__WEBPACK_IMPORTED_MODULE_9__["encodeString"](d));
        }
        const dataId = backend.write(backendVals, shape, dtype);
        const t = new _tensor__WEBPACK_IMPORTED_MODULE_7__["Tensor"](shape, dtype, dataId, this.nextTensorId());
        this.incRef(t, backend);
        // Count bytes for string tensors.
        if (dtype === 'string') {
            const info = this.state.tensorInfo.get(dataId);
            const newBytes = Object(_util__WEBPACK_IMPORTED_MODULE_9__["bytesFromStringArray"])(backendVals);
            this.state.numBytes += newBytes - info.bytes;
            info.bytes = newBytes;
        }
        return t;
    }
    /**
     * Internal method used by backends. Makes a new tensor
     * that is a wrapper around an existing data id. It doesn't create
     * a new data id, only increments the ref count used in memory tracking.
     */
    makeTensorFromDataId(dataId, shape, dtype, backend) {
        dtype = dtype || 'float32';
        const t = new _tensor__WEBPACK_IMPORTED_MODULE_7__["Tensor"](shape, dtype, dataId, this.nextTensorId());
        this.incRef(t, backend);
        return t;
    }
    makeVariable(initialValue, trainable = true, name, dtype) {
        name = name || this.nextVariableId().toString();
        if (dtype != null && dtype !== initialValue.dtype) {
            initialValue = initialValue.cast(dtype);
        }
        const v = new _tensor__WEBPACK_IMPORTED_MODULE_7__["Variable"](initialValue, trainable, name, this.nextTensorId());
        if (this.state.registeredVariables[v.name] != null) {
            throw new Error(`Variable with name ${v.name} was already registered`);
        }
        this.state.registeredVariables[v.name] = v;
        this.incRef(v, this.backend);
        return v;
    }
    incRef(a, backend) {
        const refCount = this.state.tensorInfo.has(a.dataId) ?
            this.state.tensorInfo.get(a.dataId).refCount :
            0;
        this.state.numTensors++;
        if (a.dtype === 'string') {
            this.state.numStringTensors++;
        }
        if (refCount === 0) {
            this.state.numDataBuffers++;
            // Bytes for complex numbers are counted by their components. Bytes for
            // string tensors are counted when writing values.
            let bytes = 0;
            if (a.dtype !== 'complex64' && a.dtype !== 'string') {
                bytes = a.size * _util__WEBPACK_IMPORTED_MODULE_9__["bytesPerElement"](a.dtype);
            }
            this.state.tensorInfo.set(a.dataId, {
                backend: backend || this.backend,
                dtype: a.dtype,
                shape: a.shape,
                bytes,
                refCount: 0
            });
            this.state.numBytes += bytes;
        }
        this.state.tensorInfo.get(a.dataId).refCount++;
        if (!(a instanceof _tensor__WEBPACK_IMPORTED_MODULE_7__["Variable"])) {
            this.track(a);
        }
    }
    disposeTensor(a) {
        if (!this.state.tensorInfo.has(a.dataId)) {
            return;
        }
        this.state.numTensors--;
        if (a.dtype === 'string') {
            this.state.numStringTensors--;
        }
        const info = this.state.tensorInfo.get(a.dataId);
        const refCount = info.refCount;
        if (refCount <= 1) {
            // Don't count bytes for complex numbers as they are counted by their
            // components.
            if (a.dtype !== 'complex64') {
                this.state.numBytes -= info.bytes;
            }
            this.state.numDataBuffers--;
            info.backend.disposeData(a.dataId);
            this.state.tensorInfo.delete(a.dataId);
        }
        else {
            this.state.tensorInfo.get(a.dataId).refCount--;
        }
        // TODO(nsthorat): Construct an error and save the stack trace for
        // debugging when in debug mode. Creating a stack trace is too expensive
        // to do unconditionally.
    }
    disposeVariables() {
        for (const varName in this.state.registeredVariables) {
            const v = this.state.registeredVariables[varName];
            this.disposeVariable(v);
        }
    }
    disposeVariable(v) {
        this.disposeTensor(v);
        if (this.state.registeredVariables[v.name] != null) {
            delete this.state.registeredVariables[v.name];
        }
    }
    memory() {
        const info = this.backend.memory();
        info.numTensors = this.state.numTensors;
        info.numDataBuffers = this.state.numDataBuffers;
        info.numBytes = this.state.numBytes;
        if (this.state.numStringTensors > 0) {
            info.unreliable = true;
            if (info.reasons == null) {
                info.reasons = [];
            }
            info.reasons.push('Memory usage by string tensors is approximate ' +
                '(2 bytes per character)');
        }
        return info;
    }
    async profile(query) {
        this.state.profiling = true;
        const startBytes = this.state.numBytes;
        const startNumTensors = this.state.numTensors;
        this.state.activeProfile.kernels = [];
        this.state.activeProfile.result = await query();
        this.state.profiling = false;
        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));
        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
        this.state.activeProfile.newTensors =
            this.state.numTensors - startNumTensors;
        for (const kernel of this.state.activeProfile.kernels) {
            kernel.kernelTimeMs = await kernel.kernelTimeMs;
            kernel.extraInfo = await kernel.extraInfo;
        }
        return this.state.activeProfile;
    }
    isTapeOn() {
        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };
        const gradConfig = Object(_kernel_registry__WEBPACK_IMPORTED_MODULE_4__["getGradient"])(kernelName);
        if (gradConfig != null) {
            gradientsFunc = gradConfig.gradFunc;
        }
        if (gradientsFunc != null) {
            tapeNode.gradient = (dys) => {
                // TODO(smilkov): To optimize back-prop, pass dys that are not used in
                // the backprop graph to the user as null instead of zeros
                dys = dys.map((dy, i) => {
                    if (dy == null) {
                        const output = outputs[i];
                        const vals = _util__WEBPACK_IMPORTED_MODULE_9__["makeZerosTypedArray"](output.size, output.dtype);
                        return this.makeTensor(vals, output.shape, output.dtype);
                    }
                    return dy;
                });
                // Grad functions of ops with single outputs expect a dy, while ops
                // with multiple outputs expect dys (array of dy).
                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
            };
        }
        this.state.activeTape.push(tapeNode);
    }
    keep(result) {
        result.kept = true;
        return result;
    }
    startTape() {
        if (this.state.gradientDepth === 0) {
            this.state.activeTape = [];
        }
        this.state.gradientDepth++;
    }
    endTape() {
        this.state.gradientDepth--;
    }
    /**
     * Start a scope. Use this with endScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    startScope(name) {
        const scopeInfo = {
            track: [],
            name: 'unnamed scope',
            id: this.state.nextScopeId++
        };
        if (name) {
            scopeInfo.name = name;
        }
        this.state.scopeStack.push(scopeInfo);
        this.state.activeScope = scopeInfo;
    }
    /**
     * End a scope. Use this with startScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    endScope(result) {
        const tensorsToTrackInParent = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_8__["getTensorsInContainer"])(result);
        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));
        // Dispose the arrays tracked in this scope.
        for (let i = 0; i < this.state.activeScope.track.length; i++) {
            const tensor = this.state.activeScope.track[i];
            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {
                tensor.dispose();
            }
        }
        const oldScope = this.state.scopeStack.pop();
        this.state.activeScope = this.state.scopeStack.length === 0 ?
            null :
            this.state.scopeStack[this.state.scopeStack.length - 1];
        // Track the current result in the parent scope.
        tensorsToTrackInParent.forEach(tensor => {
            // Only track the tensor if was allocated in the inner scope and is not
            // globally kept.
            if (!tensor.kept && tensor.scopeId === oldScope.id) {
                this.track(tensor);
            }
        });
    }
    /**
     * Returns gradients of `f` with respect to each of the `xs`. The gradients
     * returned are of the same length as `xs`, but some might be null if `f`
     * was not a function of that `x`. It also takes optional dy to multiply the
     * gradient, which defaults to `1`.
     */
    gradients(f, xs, dy, allowNoGradients = false) {
        _util__WEBPACK_IMPORTED_MODULE_9__["assert"](xs.length > 0, () => 'gradients() received an empty list of xs.');
        if (dy != null && dy.dtype !== 'float32') {
            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
        }
        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));
        _util__WEBPACK_IMPORTED_MODULE_9__["assert"](y instanceof _tensor__WEBPACK_IMPORTED_MODULE_7__["Tensor"], () => 'The result y returned by f() must be a tensor.');
        // Filter out the nodes that don't connect x => y.
        const filteredTape = Object(_tape__WEBPACK_IMPORTED_MODULE_6__["getFilteredNodesXToY"])(this.state.activeTape, xs, y);
        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +
                'that the f you passed encloses all operations that lead from x ' +
                'to y.');
        }
        return this.tidy('backward', () => {
            const accumulatedGradientMap = {};
            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;
            // Backprop gradients through the filtered nodes.
            Object(_tape__WEBPACK_IMPORTED_MODULE_6__["backpropagateGradients"])(accumulatedGradientMap, filteredTape, 
            // Pass the tidy function to avoid circular dep with `tape.ts`.
            f => this.tidy(f), 
            // Pass an add function to avoide a circular dep with `tape.ts`.
            add);
            const grads = xs.map(x => accumulatedGradientMap[x.id]);
            if (this.state.gradientDepth === 0) {
                // This means that we are not computing higher-order gradients
                // and can clean up the tape.
                this.state.activeTape.forEach(node => {
                    for (const tensor of node.saved) {
                        tensor.dispose();
                    }
                });
                this.state.activeTape = null;
            }
            return { value: y, grads };
        });
    }
    customGrad(f) {
        _util__WEBPACK_IMPORTED_MODULE_9__["assert"](_util__WEBPACK_IMPORTED_MODULE_9__["isFunction"](f), () => 'The f passed in customGrad(f) must be a function.');
        return (...inputs) => {
            _util__WEBPACK_IMPORTED_MODULE_9__["assert"](inputs.every(t => t instanceof _tensor__WEBPACK_IMPORTED_MODULE_7__["Tensor"]), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +
                'tensors');
            let res;
            const inputMap = {};
            inputs.forEach((input, i) => {
                inputMap[i] = input;
            });
            return this.runKernelFunc((_, save) => {
                res = f(...[...inputs, save]);
                _util__WEBPACK_IMPORTED_MODULE_9__["assert"](res.value instanceof _tensor__WEBPACK_IMPORTED_MODULE_7__["Tensor"], () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.value` is a tensor');
                _util__WEBPACK_IMPORTED_MODULE_9__["assert"](_util__WEBPACK_IMPORTED_MODULE_9__["isFunction"](res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function.');
                return res.value;
            }, inputMap, (dy, saved) => {
                const gradRes = res.gradFunc(dy, saved);
                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];
                _util__WEBPACK_IMPORTED_MODULE_9__["assert"](grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function that returns ' +
                    'the same number of tensors as inputs passed to f(...).');
                _util__WEBPACK_IMPORTED_MODULE_9__["assert"](grads.every(t => t instanceof _tensor__WEBPACK_IMPORTED_MODULE_7__["Tensor"]), () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function that returns ' +
                    'a list of only tensors.');
                const gradMap = {};
                grads.forEach((grad, i) => {
                    gradMap[i] = () => grad;
                });
                return gradMap;
            });
        };
    }
    readSync(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.readSync(dataId);
    }
    read(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.read(dataId);
    }
    async time(query) {
        const start = Object(_util__WEBPACK_IMPORTED_MODULE_9__["now"])();
        const timingInfo = await this.backend.time(query);
        timingInfo.wallMs = Object(_util__WEBPACK_IMPORTED_MODULE_9__["now"])() - start;
        return timingInfo;
    }
    /**
     * Tracks a Tensor in the current scope to be automatically cleaned up
     * when the current scope ends, and returns the value.
     *
     * @param result The Tensor to track in the current scope.
     */
    track(result) {
        if (this.state.activeScope != null) {
            result.scopeId = this.state.activeScope.id;
            this.state.activeScope.track.push(result);
        }
        return result;
    }
    get registeredVariables() {
        return this.state.registeredVariables;
    }
    /**
     * Resets the engine state. Removes all backends but does not remove
     * registered backend factories.
     */
    reset() {
        // Make any pending promise obsolete.
        this.pendingBackendInitId++;
        this.state.dispose();
        this.ENV.reset();
        this.state = new EngineState();
        for (const backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        this.backendName = null;
        this.backendInstance = null;
        this.pendingBackendInit = null;
    }
}
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;
function ones(shape) {
    const values = Object(_util__WEBPACK_IMPORTED_MODULE_9__["makeOnesTypedArray"])(Object(_util__WEBPACK_IMPORTED_MODULE_9__["sizeFromShape"])(shape), 'float32');
    return ENGINE.makeTensor(values, shape, 'float32');
}
function getOrMakeEngine() {
    const ns = Object(_global_util__WEBPACK_IMPORTED_MODULE_2__["getGlobalNamespace"])();
    if (ns._tfengine == null) {
        const environment = new _environment__WEBPACK_IMPORTED_MODULE_1__["Environment"](ns);
        ns._tfengine = new Engine(environment);
    }
    Object(_environment__WEBPACK_IMPORTED_MODULE_1__["setEnvironmentGlobal"])(ns._tfengine.ENV);
    // Tell the current tensor interface that the global engine is responsible
    // for tracking.
    Object(_tensor__WEBPACK_IMPORTED_MODULE_7__["setTensorTracker"])(() => ns._tfengine);
    return ns._tfengine;
}
const ENGINE = getOrMakeEngine();
/**
 * A implementation of the add op for use within engine and tape.
 *
 * This allows us to avoid a circular dependency between add.ts and engine.
 * It is exported to be available in tape tests.
 */
function add(a, b) {
    // We duplicate Add here to avoid a circular dependency with add.ts.
    const inputs = { a, b };
    return ENGINE.runKernelFunc((backend, save) => {
        const res = backend.add(a, b);
        save([a, b]);
        return res;
    }, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_3__["Add"]);
}
//# sourceMappingURL=engine.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/environment.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/environment.js ***!
  \****************************************************************/
/*! exports provided: Environment, getQueryParams, env, ENV, setEnvironmentGlobal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Environment", function() { return Environment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getQueryParams", function() { return getQueryParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "env", function() { return env; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENV", function() { return ENV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setEnvironmentGlobal", function() { return setEnvironmentGlobal; });
/* harmony import */ var _util_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util_base */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
const TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 *
 * @doc {heading: 'Environment'}
 */
class Environment {
    // tslint:disable-next-line: no-any
    constructor(global) {
        this.global = global;
        this.flags = {};
        this.flagRegistry = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    setPlatform(platformName, platform) {
        if (this.platform != null) {
            console.warn(`Platform ${this.platformName} has already been set. ` +
                `Overwriting the platform with ${platform}.`);
        }
        this.platformName = platformName;
        this.platform = platform;
    }
    registerFlag(flagName, evaluationFn, setHook) {
        this.flagRegistry[flagName] = { evaluationFn, setHook };
        // Override the flag value from the URL. This has to happen here because the
        // environment is initialized before flags get registered.
        if (this.urlFlags[flagName] != null) {
            const flagValue = this.urlFlags[flagName];
            console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
            this.set(flagName, flagValue);
        }
    }
    async getAsync(flagName) {
        if (flagName in this.flags) {
            return this.flags[flagName];
        }
        this.flags[flagName] = await this.evaluateFlag(flagName);
        return this.flags[flagName];
    }
    get(flagName) {
        if (flagName in this.flags) {
            return this.flags[flagName];
        }
        const flagValue = this.evaluateFlag(flagName);
        if (Object(_util_base__WEBPACK_IMPORTED_MODULE_0__["isPromise"])(flagValue)) {
            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +
                `Please use getAsync() instead.`);
        }
        this.flags[flagName] = flagValue;
        return this.flags[flagName];
    }
    getNumber(flagName) {
        return this.get(flagName);
    }
    getBool(flagName) {
        return this.get(flagName);
    }
    getFlags() {
        return this.flags;
    }
    // For backwards compatibility.
    get features() {
        return this.flags;
    }
    set(flagName, value) {
        if (this.flagRegistry[flagName] == null) {
            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
        }
        this.flags[flagName] = value;
        if (this.flagRegistry[flagName].setHook != null) {
            this.flagRegistry[flagName].setHook(value);
        }
    }
    evaluateFlag(flagName) {
        if (this.flagRegistry[flagName] == null) {
            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
        }
        return this.flagRegistry[flagName].evaluationFn();
    }
    setFlags(flags) {
        this.flags = Object.assign({}, flags);
    }
    reset() {
        this.flags = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    populateURLFlags() {
        if (typeof this.global === 'undefined' ||
            typeof this.global.location === 'undefined' ||
            typeof this.global.location.search === 'undefined') {
            return;
        }
        const urlParams = getQueryParams(this.global.location.search);
        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
            keyValues.forEach(keyValue => {
                const [key, value] = keyValue.split(':');
                this.urlFlags[key] = parseValue(key, value);
            });
        }
    }
}
function getQueryParams(queryString) {
    const params = {};
    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {
        decodeParam(params, t[0], t[1]);
        return t.join('=');
    });
    return params;
}
function decodeParam(params, name, value) {
    params[decodeURIComponent(name)] = decodeURIComponent(value || '');
}
function parseValue(flagName, value) {
    value = value.toLowerCase();
    if (value === 'true' || value === 'false') {
        return value === 'true';
    }
    else if (`${+value}` === value) {
        return +value;
    }
    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);
}
/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 *
 * @doc {heading: 'Environment'}
 */
function env() {
    return ENV;
}
let ENV = null;
function setEnvironmentGlobal(environment) {
    ENV = environment;
}
//# sourceMappingURL=environment.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/flags.js ***!
  \**********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _device_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./device_util */ "./node_modules/@tensorflow/tfjs-core/dist/device_util.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ENV = Object(_environment__WEBPACK_IMPORTED_MODULE_2__["env"])();
/**
 * This file contains environment-related flag registrations.
 */
/** Whether to enable debug mode. */
ENV.registerFlag('DEBUG', () => false, debugValue => {
    if (debugValue) {
        console.warn('Debugging mode is ON. The output of every math call will ' +
            'be downloaded to CPU and checked for NaNs. ' +
            'This significantly impacts performance.');
    }
});
/** Whether we are in a browser (as versus, say, node.js) environment. */
ENV.registerFlag('IS_BROWSER', () => _device_util__WEBPACK_IMPORTED_MODULE_1__["isBrowser"]());
/** Whether we are in a browser (as versus, say, node.js) environment. */
ENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&
    (typeof process.versions !== 'undefined') &&
    (typeof process.versions.node !== 'undefined'));
/** Whether this browser is Chrome. */
ENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&
    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&
    /Google Inc/.test(navigator.vendor));
/**
 * True when the environment is "production" where we disable safety checks
 * to gain performance.
 */
ENV.registerFlag('PROD', () => false);
/**
 * Whether to do sanity checks when inferring a shape from user-provided
 * values, used when creating a new tensor.
 */
ENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));
/** Whether deprecation warnings are enabled. */
ENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);
/** True if running unit tests. */
ENV.registerFlag('IS_TEST', () => false);
//# sourceMappingURL=flags.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/global_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/global_util.js ***!
  \****************************************************************/
/*! exports provided: getGlobalNamespace, getGlobal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGlobalNamespace", function() { return getGlobalNamespace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGlobal", function() { return getGlobal; });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
let globalNameSpace;
// tslint:disable-next-line:no-any
function getGlobalNamespace() {
    if (globalNameSpace == null) {
        // tslint:disable-next-line:no-any
        let ns;
        if (typeof (window) !== 'undefined') {
            ns = window;
        }
        else if (typeof (global) !== 'undefined') {
            ns = global;
        }
        else if (typeof (process) !== 'undefined') {
            ns = process;
        }
        else if (typeof (self) !== 'undefined') {
            ns = self;
        }
        else {
            throw new Error('Could not find a global object');
        }
        globalNameSpace = ns;
    }
    return globalNameSpace;
}
// tslint:disable-next-line:no-any
function getGlobalMap() {
    const ns = getGlobalNamespace();
    if (ns._tfGlobals == null) {
        ns._tfGlobals = new Map();
    }
    return ns._tfGlobals;
}
/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */
function getGlobal(key, init) {
    const globalMap = getGlobalMap();
    if (globalMap.has(key)) {
        return globalMap.get(key);
    }
    else {
        const singleton = init();
        globalMap.set(key, singleton);
        return globalMap.get(key);
    }
}
//# sourceMappingURL=global_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/globals.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/globals.js ***!
  \************************************************************/
/*! exports provided: enableProdMode, enableDebugMode, disableDeprecationWarnings, deprecationWarn, disposeVariables, engine, memory, profile, tidy, dispose, keep, time, setBackend, ready, getBackend, removeBackend, findBackend, findBackendFactory, registerBackend, backend, setPlatform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableProdMode", function() { return enableProdMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableDebugMode", function() { return enableDebugMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableDeprecationWarnings", function() { return disableDeprecationWarnings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deprecationWarn", function() { return deprecationWarn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disposeVariables", function() { return disposeVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "engine", function() { return engine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memory", function() { return memory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "profile", function() { return profile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tidy", function() { return tidy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dispose", function() { return dispose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keep", function() { return keep; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "time", function() { return time; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setBackend", function() { return setBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ready", function() { return ready; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBackend", function() { return getBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeBackend", function() { return removeBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findBackend", function() { return findBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findBackendFactory", function() { return findBackendFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerBackend", function() { return registerBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "backend", function() { return backend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPlatform", function() { return setPlatform; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Enables production mode which disables correctness checks in favor of
 * performance.
 *
 * @doc {heading: 'Environment'}
 */
function enableProdMode() {
    Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().set('PROD', true);
}
/**
 * Enables debug mode which will log information about all executed kernels:
 * the elapsed time of the kernel execution, as well as the rank, shape, and
 * size of the output tensor.
 *
 * Debug mode will significantly slow down your application as it will
 * download the result of every operation to the CPU. This should not be used in
 * production. Debug mode does not affect the timing information of the kernel
 * execution as we do not measure download time in the kernel execution time.
 *
 * See also: `tf.profile`, `tf.memory`.
 *
 * @doc {heading: 'Environment'}
 */
function enableDebugMode() {
    Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().set('DEBUG', true);
}
/** Globally disables deprecation warnings */
function disableDeprecationWarnings() {
    Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().set('DEPRECATION_WARNINGS_ENABLED', false);
    console.warn(`TensorFlow.js deprecation warnings have been disabled.`);
}
/** Warn users about deprecated functionality. */
function deprecationWarn(msg) {
    if (Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('DEPRECATION_WARNINGS_ENABLED')) {
        console.warn(msg + ' You can disable deprecation warnings with ' +
            'tf.disableDeprecationWarnings().');
    }
}
Object(_tensor__WEBPACK_IMPORTED_MODULE_2__["setDeprecationWarningFn"])(deprecationWarn);
/**
 * Dispose all variables kept in backend engine.
 *
 * @doc {heading: 'Environment'}
 */
function disposeVariables() {
    _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].disposeVariables();
}
/**
 * It returns the global engine that keeps track of all tensors and backends.
 *
 * @doc {heading: 'Environment'}
 */
function engine() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"];
}
/**
 * Returns memory info at the current time in the program. The result is an
 * object with the following properties:
 *
 * - `numBytes`: Number of bytes allocated (undisposed) at this time.
 * - `numTensors`: Number of unique tensors allocated.
 * - `numDataBuffers`: Number of unique data buffers allocated
 *   (undisposed) at this time, which is ≤ the number of tensors
 *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
 *   data buffer with `a`).
 * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
 *    `unreliable` is true.
 * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
 *    `unreliable` is true.
 *
 * WebGL Properties:
 * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
 *     this time.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function memory() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].memory();
}
/**
 * Executes the provided function `f()` and returns a promise that resolves
 * with information about the function's memory use:
 * - `newBytes`: the number of new bytes allocated
 * - `newTensors`: the number of new tensors created
 * - `peakBytes`: the peak number of bytes allocated
 * - `kernels`: an array of objects for each kernel involved that reports
 * their input and output shapes, number of bytes used, and number of new
 * tensors created.
 *
 * ```js
 * const profile = await tf.profile(() => {
 *   const x = tf.tensor1d([1, 2, 3]);
 *   let x2 = x.square();
 *   x2.dispose();
 *   x2 = x.square();
 *   x2.dispose();
 *   return x;
 * });
 *
 * console.log(`newBytes: ${profile.newBytes}`);
 * console.log(`newTensors: ${profile.newTensors}`);
 * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
 * k.totalBytesSnapshot)}`);
 * ```
 *
 *
 * @doc {heading: 'Performance', subheading: 'Profile'}
 */
function profile(f) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].profile(f);
}
/**
 * Executes the provided function `fn` and after it is executed, cleans up all
 * intermediate tensors allocated by `fn` except those returned by `fn`.
 * `fn` must not return a Promise (async functions not allowed). The returned
 * result can be a complex object.
 *
 * Using this method helps avoid memory leaks. In general, wrap calls to
 * operations in `tf.tidy` for automatic memory cleanup.
 *
 * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
 * dispose variables, please use `tf.disposeVariables` or call dispose()
 * directly on variables.
 *
 * ```js
 * // y = 2 ^ 2 + 1
 * const y = tf.tidy(() => {
 *   // a, b, and one will be cleaned up when the tidy ends.
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *   const b = a.square();
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * y.print();
 * ```
 *
 * @param nameOrFn The name of the closure, or the function to execute.
 *     If a name is provided, the 2nd argument should be the function.
 *     If debug mode is on, the timing and the memory usage of the function
 *     will be tracked and displayed on the console using the provided name.
 * @param fn The function to execute.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function tidy(nameOrFn, fn) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].tidy(nameOrFn, fn);
}
/**
 * Disposes any `tf.Tensor`s found within the provided object.
 *
 * @param container an object that may be a `tf.Tensor` or may directly
 *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
 *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
 *     happens. In general it is safe to pass any object here, except that
 *     `Promise`s are not supported.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function dispose(container) {
    const tensors = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_3__["getTensorsInContainer"])(container);
    tensors.forEach(tensor => tensor.dispose());
}
/**
 * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
 * automatically.
 *
 * ```js
 * let b;
 * const y = tf.tidy(() => {
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *
 *   // b will not be cleaned up by the tidy. a and one will be cleaned up
 *   // when the tidy ends.
 *   b = tf.keep(a.square());
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * console.log('y:');
 * y.print();
 * console.log('b:');
 * b.print();
 * ```
 *
 * @param result The tensor to keep from being disposed.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function keep(result) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].keep(result);
}
/**
 * Executes `f()` and returns a promise that resolves with timing
 * information.
 *
 * The result is an object with the following properties:
 *
 * - `wallMs`: Wall execution time.
 * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
 * WebGL backend and the query timer extension is not available, this will
 * return an error object.
 * - On `WebGL` The following additional properties exist:
 *   - `uploadWaitMs`: CPU blocking time on texture uploads.
 *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
 *
 * ```js
 * const x = tf.randomNormal([20, 20]);
 * const time = await tf.time(() => x.matMul(x));
 *
 * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
 * ```
 *
 * @param f The function to execute and time.
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */
function time(f) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].time(f);
}
/**
 * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
 * executing operations on those tensors. Returns a promise that resolves
 * to a boolean if the backend initialization was successful.
 *
 * Note this disposes the current backend, if any, as well as any tensors
 * associated with it. A new backend is initialized, even if it is of the
 * same type as the previous one.
 *
 * @param backendName The name of the backend. Currently supports
 *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
 *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
 *
 * @doc {heading: 'Backends'}
 */
function setBackend(backendName) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].setBackend(backendName);
}
/**
 * Returns a promise that resolves when the currently selected backend (or the
 * highest priority one) has initialized. Await this promise when you are using
 * a backend that has async initialization.
 *
 * @doc {heading: 'Backends'}
 */
function ready() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].ready();
}
/**
 * Returns the current backend name (cpu, webgl, etc). The backend is
 * responsible for creating tensors and executing operations on those tensors.
 *
 * @doc {heading: 'Backends'}
 */
function getBackend() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backendName;
}
/**
 * Removes a backend and the registered factory.
 *
 * @doc {heading: 'Backends'}
 */
function removeBackend(name) {
    _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].removeBackend(name);
}
/**
 * Finds the backend registered under the provided name. Returns null if the
 * name is not in the registry, or the registration hasn't finished yet.
 */
function findBackend(name) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].findBackend(name);
}
/**
 * Finds the backend factory registered under the provided name. Returns a
 * function that produces a new backend when called. Returns null if the name
 * is not in the registry.
 */
function findBackendFactory(name) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].findBackendFactory(name);
}
/**
 * Registers a global backend. The registration should happen when importing
 * a module file (e.g. when importing `backend_webgl.ts`), and is used for
 * modular builds (e.g. custom tfjs bundle with only webgl support).
 *
 * @param factory The backend factory function. When called, it should
 * return a backend instance, or a promise of an instance.
 * @param priority The priority of the backend (higher = more important).
 *     In case multiple backends are registered, the priority is used to find
 *     the best backend. Defaults to 1.
 * @return False if there is already a registered backend under this name, true
 *     if not.
 *
 * @doc {heading: 'Backends'}
 */
function registerBackend(name, factory, priority = 1) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registerBackend(name, factory, priority);
}
/**
 * Gets the current backend. If no backends have been initialized, this will
 * attempt to initialize the best backend. Will throw an error if the highest
 * priority backend has async initialization, in which case, you should call
 * 'await tf.ready()' before running other code.
 *
 * @doc {heading: 'Backends'}
 */
function backend() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backend;
}
/**
 * Sets the global platform.
 *
 * @param platformName The name of this platform.
 * @param platform A platform implementation.
 */
function setPlatform(platformName, platform) {
    Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().setPlatform(platformName, platform);
}
//# sourceMappingURL=globals.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients.js ***!
  \**************************************************************/
/*! exports provided: customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "customGrad", function() { return customGrad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "variableGrads", function() { return variableGrads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valueAndGrad", function() { return valueAndGrad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valueAndGrads", function() { return valueAndGrads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "grad", function() { return grad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "grads", function() { return grads; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
 * gradient of `f(x)` with respect to `x`.
 *
 * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
 * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
 * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.grad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * g(x).print();
 * ```
 *
 * ```js
 * // f(x) = x ^ 3
 * const f = x => x.pow(tf.scalar(3, 'int32'));
 * // f'(x) = 3x ^ 2
 * const g = tf.grad(f);
 * // f''(x) = 6x
 * const gg = tf.grad(g);
 *
 * const x = tf.tensor1d([2, 3]);
 * gg(x).print();
 * ```
 *
 * @param f The function f(x), to compute gradient for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function grad(f) {
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isFunction"](f), () => 'The f passed in grad(f) must be a function');
    return (x, dy) => {
        // x can be of any dtype, thus null as the last argument.
        const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'tf.grad', null);
        const $dy = (dy != null) ? Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(dy, 'dy', 'tf.grad') : null;
        return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].tidy(() => {
            const { value, grads } = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].gradients(() => f($x), [$x], $dy);
            if ($dy != null) {
                _util__WEBPACK_IMPORTED_MODULE_3__["assertShapesMatch"](value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +
                    'returned by f(x)');
            }
            checkGrads(grads);
            return grads[0];
        });
    };
}
/**
 * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
 * which gives an array of gradients of `f()` with respect to each input
 * [`x1`,`x2`,...].
 *
 * If `dy` is passed when calling `g()`, the gradient of
 * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
 * The provided `f` must take one or more tensors and return a single tensor
 * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df / da = b, df / db = a
 * const g = tf.grads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const [da, db] = g([a, b]);
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @param f The function `f(x1, x2,...)` to compute gradients for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function grads(f) {
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isFunction"](f), () => 'The f passed in grads(f) must be a function');
    return (args, dy) => {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' +
            'of `Tensor`s or `TensorLike`s');
        // args can be of any dtype, thus null as the last argument.
        const $args = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensorArray"])(args, 'args', 'tf.grads', null);
        const $dy = (dy != null) ? Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(dy, 'dy', 'tf.grads') : null;
        return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].tidy(() => {
            const { value, grads } = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].gradients(() => f(...$args), $args, $dy);
            if ($dy != null) {
                _util__WEBPACK_IMPORTED_MODULE_3__["assertShapesMatch"](value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +
                    'match the shape returned by f([x1,...])');
            }
            checkGrads(grads);
            return grads;
        });
    };
}
/**
 * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.valueAndGrad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * const {value, grad} = g(x);
 *
 * console.log('value');
 * value.print();
 * console.log('grad');
 * grad.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function valueAndGrad(f) {
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isFunction"](f), () => 'The f passed in valueAndGrad(f) must be a function');
    return (x, dy) => {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"], () => 'The x passed in valueAndGrad(f)(x) must be a tensor');
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](dy == null || dy instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"], () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');
        const { grads, value } = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].gradients(() => f(x), [x], dy);
        checkGrads(grads);
        return { grad: grads[0], value };
    };
}
/**
 * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df/da = b, df/db = a
 * const g = tf.valueAndGrads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const {value, grads} = g([a, b]);
 *
 * const [da, db] = grads;
 *
 * console.log('value');
 * value.print();
 *
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function valueAndGrads(f) {
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isFunction"](f), () => 'The f passed in valueAndGrads(f) must be a function');
    return (args, dy) => {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](Array.isArray(args) && args.every(arg => arg instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"]), () => 'The args passed in valueAndGrads(f)(args) must be array of ' +
            'tensors');
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](dy == null || dy instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"], () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');
        const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].gradients(() => f(...args), args, dy);
        if (dy != null) {
            _util__WEBPACK_IMPORTED_MODULE_3__["assertShapesMatch"](res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +
                'match the shape returned by f([x1,...])');
        }
        checkGrads(res.grads);
        return res;
    };
}
/**
 * Computes and returns the gradient of f(x) with respect to the list of
 * trainable variables provided by `varList`. If no list is provided, it
 * defaults to all trainable variables.
 *
 * ```js
 * const a = tf.variable(tf.tensor1d([3, 4]));
 * const b = tf.variable(tf.tensor1d([5, 6]));
 * const x = tf.tensor1d([1, 2]);
 *
 * // f(a, b) = a * x ^ 2 + b * x
 * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
 * // df/da = x ^ 2, df/db = x
 * const {value, grads} = tf.variableGrads(f);
 *
 * Object.keys(grads).forEach(varName => grads[varName].print());
 * ```
 *
 * @param f The function to execute. f() should return a scalar.
 * @param varList The list of variables to compute the gradients with respect
 *     to. Defaults to all trainable variables.
 * @returns An object with the following keys and values:
 *   - `value`: The value of the function `f`.
 *   - `grads`: A map from the names of the variables to the gradients.
 *     If the `varList` argument is provided explicitly and contains a subset of
 *     non-trainable variables, this map in the return value will contain keys
 *     that map the names of the non-trainable variables to `null`.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function variableGrads(f, varList) {
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isFunction"](f), () => 'The f passed in variableGrads(f) must be a function');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](varList == null ||
        Array.isArray(varList) && varList.every(v => v instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__["Variable"]), () => 'The varList passed in variableGrads(f, varList) must be an array ' +
        'of variables');
    const specifiedVarList = varList != null;
    if (!specifiedVarList) {
        // Get all of the trainable variables.
        varList = [];
        for (const varName in _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables) {
            varList.push(_engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[varName]);
        }
    }
    const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;
    // Prune non-trainable variables.
    const originalVarCount = varList.length;
    varList = varList.filter(variable => variable.trainable);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` +
        `be trainable, but none of the ${originalVarCount} variables is ` +
        `trainable.`);
    const allowNoGradients = true;
    const { value, grads } = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].gradients(f, varList, null, allowNoGradients);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' +
        'the loss function y=f(x). Please make sure the operations that ' +
        'use variables are inside the function f passed to minimize().');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` +
        `returned a rank-${value.rank} tensor`);
    const namedGrads = {};
    varList.forEach((v, i) => {
        if (grads[i] != null) {
            namedGrads[v.name] = grads[i];
        }
    });
    if (specifiedNonTrainable != null) {
        // If varList is explicitly provided and contains non-trainable values,
        // add them to the returned gradients with `null` values.
        specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);
    }
    return { value, grads: namedGrads };
}
/**
 * Overrides the gradient computation of a function `f`.
 *
 * Takes a function
 * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
 * and returns another function `g(...inputs)` which takes the same inputs as
 * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
 * with respect to each input of `f` are computed using `f().gradFunc`.
 *
 * The `save` function passsed to `f` should be used for saving tensors needed
 * in the gradient. And the `saved` passed to the `gradFunc` is a
 * `NamedTensorMap`, which contains those saved tensor.
 *
 * ```js
 * const customOp = tf.customGrad((x, save) => {
 *   // Save x to make sure it's available later for the gradient.
 *   save([x]);
 *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
 *   return {
 *     value: x.square(),
 *     // Note `saved.x` which points to the `x` we saved earlier.
 *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
 *   };
 * });
 *
 * const x = tf.tensor1d([-1, -2, 3]);
 * const dx = tf.grad(x => customOp(x));
 *
 * console.log(`f(x):`);
 * customOp(x).print();
 * console.log(`f'(x):`);
 * dx(x).print();
 * ```
 *
 * @param f The function to evaluate in forward mode, which should return
 *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
 *     returns the custom gradients of `f` with respect to its inputs.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function customGrad(f) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].customGrad(f);
}
function checkGrads(grads) {
    const numNullGradients = grads.filter(g => g == null).length;
    if (numNullGradients > 0) {
        throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
    }
}

//# sourceMappingURL=gradients.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js ***!
  \***********************************************************************/
/*! exports provided: absGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "absGradConfig", function() { return absGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const absGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Abs"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(dy, Object(_ops_step__WEBPACK_IMPORTED_MODULE_3__["step"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32'), -1)) };
    }
};
//# sourceMappingURL=Abs_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js ***!
  \************************************************************************/
/*! exports provided: acosGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "acosGradConfig", function() { return acosGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const acosGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Acos"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const a = Object(_ops_square__WEBPACK_IMPORTED_MODULE_6__["square"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32'));
                const b = Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_5__["sqrt"])(Object(_ops_sub__WEBPACK_IMPORTED_MODULE_7__["sub"])(Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_4__["scalar"])(1), a));
                return Object(_ops_neg__WEBPACK_IMPORTED_MODULE_3__["neg"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, b));
            }
        };
    }
};
//# sourceMappingURL=Acos_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js ***!
  \*************************************************************************/
/*! exports provided: acoshGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "acoshGradConfig", function() { return acoshGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const acoshGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Acosh"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const a = Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_3__["sqrt"])(Object(_ops_sub__WEBPACK_IMPORTED_MODULE_5__["sub"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_4__["square"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')), 1));
                return Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, a);
            }
        };
    }
};
//# sourceMappingURL=Acosh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js ***!
  \************************************************************************/
/*! exports provided: addNGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addNGradConfig", function() { return addNGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const addNGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["AddN"],
    saveAllInputs: true,
    gradFunc: (dy, saved) => {
        const ders = {};
        saved.forEach((_, i) => {
            ders[i] = () => dy.clone();
        });
        return ders;
    }
};
//# sourceMappingURL=AddN_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js ***!
  \***********************************************************************/
/*! exports provided: addGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addGradConfig", function() { return addGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const addGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Add"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"](a.shape, b.shape);
        const derA = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](a.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_3__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_2__["reshape"])(res, a.shape);
        };
        const derB = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_3__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_2__["reshape"])(res, b.shape);
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Add_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js ***!
  \**************************************************************************/
/*! exports provided: argMaxGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argMaxGradConfig", function() { return argMaxGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const argMaxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["ArgMax"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(x) };
    }
};
//# sourceMappingURL=ArgMax_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js ***!
  \**************************************************************************/
/*! exports provided: argMinGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argMinGradConfig", function() { return argMinGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const argMinGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["ArgMin"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(x) };
    }
};
//# sourceMappingURL=ArgMin_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js ***!
  \************************************************************************/
/*! exports provided: asinGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asinGradConfig", function() { return asinGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const asinGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Asin"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_4__["sqrt"])(Object(_ops_sub__WEBPACK_IMPORTED_MODULE_6__["sub"])(Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_3__["scalar"])(1), Object(_ops_square__WEBPACK_IMPORTED_MODULE_5__["square"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32'))))) };
    }
};
//# sourceMappingURL=Asin_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js ***!
  \*************************************************************************/
/*! exports provided: asinhGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asinhGradConfig", function() { return asinhGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const asinhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Asinh"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const a = Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_5__["sqrt"])(Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_4__["scalar"])(1), Object(_ops_square__WEBPACK_IMPORTED_MODULE_6__["square"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(x, 'float32'))));
                return Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(dy, a);
            }
        };
    }
};
//# sourceMappingURL=Asinh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js ***!
  \*************************************************************************/
/*! exports provided: atan2GradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atan2GradConfig", function() { return atan2GradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const atan2GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Atan2"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__["assertAndGetBroadcastShape"])(a.shape, b.shape);
        const derA = () => {
            const d = Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_7__["square"])(a), Object(_ops_square__WEBPACK_IMPORTED_MODULE_7__["square"])(b));
            let res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(b, d));
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__["getReductionAxes"])(a.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, a.shape);
        };
        const derB = () => {
            const d = Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_7__["square"])(a), Object(_ops_square__WEBPACK_IMPORTED_MODULE_7__["square"])(b));
            let res = Object(_ops_neg__WEBPACK_IMPORTED_MODULE_5__["neg"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(a, d)));
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__["getReductionAxes"])(b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, b.shape);
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Atan2_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js ***!
  \************************************************************************/
/*! exports provided: atanGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atanGradConfig", function() { return atanGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const atanGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Atan"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(dy, Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_4__["square"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(x, 'float32')), 1)) };
    }
};
//# sourceMappingURL=Atan_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js ***!
  \*************************************************************************/
/*! exports provided: atanhGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atanhGradConfig", function() { return atanhGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const atanhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Atanh"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, Object(_ops_sub__WEBPACK_IMPORTED_MODULE_4__["sub"])(Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_5__["scalar"])(1), Object(_ops_square__WEBPACK_IMPORTED_MODULE_3__["square"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')))) };
    }
};
//# sourceMappingURL=Atanh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js ***!
  \*****************************************************************************/
/*! exports provided: avgPool3DGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "avgPool3DGradConfig", function() { return avgPool3DGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_avg_pool_3d_backprop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/avg_pool_3d_backprop */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_backprop.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const avgPool3DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["AvgPool3D"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { filterSize, strides, dilations, pad, dimRoundingMode } = attrs;
        const $dilations = dilations == null ? [1, 1, 1] : dilations;
        return {
            x: () => Object(_ops_avg_pool_3d_backprop__WEBPACK_IMPORTED_MODULE_1__["avgPool3dBackprop"])(dy, x, filterSize, strides, $dilations, pad, dimRoundingMode)
        };
    }
};
//# sourceMappingURL=AvgPool3D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js ***!
  \***************************************************************************/
/*! exports provided: avgPoolGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "avgPoolGradConfig", function() { return avgPoolGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_avg_pool_backprop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/avg_pool_backprop */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_backprop.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const avgPoolGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["AvgPool"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { filterSize, strides, pad } = attrs;
        return {
            x: () => Object(_ops_avg_pool_backprop__WEBPACK_IMPORTED_MODULE_1__["avgPoolBackprop"])(dy, x, filterSize, strides, pad)
        };
    }
};
//# sourceMappingURL=AvgPool_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js ***!
  \*******************************************************************************/
/*! exports provided: batchMatMulGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchMatMulGradConfig", function() { return batchMatMulGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const batchMatMulGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["BatchMatMul"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved, attrs) => {
        const [a, b] = saved;
        const { transposeA, transposeB } = attrs;
        if (!transposeA && !transposeB) {
            return {
                a: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(dy, b, false, true),
                b: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(a, dy, true, false)
            };
        }
        else if (!transposeA && transposeB) {
            return {
                a: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(dy, b, false, false),
                b: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(dy, a, true, false)
            };
        }
        else if (transposeA && !transposeB) {
            return {
                a: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(b, dy, false, true),
                b: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(a, dy, false, false)
            };
        }
        else {
            return {
                a: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(b, dy, true, true),
                b: () => Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__["matMul"])(dy, a, true, true)
            };
        }
    }
};
//# sourceMappingURL=BatchMatMul_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js ***!
  \**********************************************************************************/
/*! exports provided: batchToSpaceNDGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchToSpaceNDGradConfig", function() { return batchToSpaceNDGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const batchToSpaceNDGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["BatchToSpaceND"],
    gradFunc: (dy, saved, attrs) => {
        const { blockShape, crops } = attrs;
        return { x: () => Object(_ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__["spaceToBatchND"])(dy, blockShape, crops) };
    }
};
//# sourceMappingURL=BatchToSpaceND_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js ***!
  \*******************************************************************************/
/*! exports provided: broadcastToGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "broadcastToGradConfig", function() { return broadcastToGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const broadcastToGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["BroadcastTo"],
    gradFunc: (dy, saved, attrs) => {
        const broadCastToAttrs = attrs;
        const inputShape = broadCastToAttrs.inputShape;
        const outputShape = broadCastToAttrs.shape;
        const reps = Array.from(outputShape);
        for (let i = inputShape.length - 1; i >= 0; i--) {
            if (inputShape[i] === outputShape[i]) {
                reps[i] = 1;
            }
            else if (inputShape[i] !== 1) {
                throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);
            }
        }
        const axes = [];
        for (let i = 0; i < reps.length; i++) {
            if (reps[i] > 1) {
                axes.push(i);
            }
        }
        return { x: () => Object(_ops_sum__WEBPACK_IMPORTED_MODULE_1__["sum"])(dy, axes, true /* keepDims */) };
    }
};
//# sourceMappingURL=BroadcastTo_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js ***!
  \************************************************************************/
/*! exports provided: castGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "castGradConfig", function() { return castGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const castGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Cast"],
    gradFunc: (dy) => {
        return { x: () => dy.clone() };
    }
};
//# sourceMappingURL=Cast_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js ***!
  \************************************************************************/
/*! exports provided: ceilGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceilGradConfig", function() { return ceilGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ceilGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Ceil"],
    gradFunc: (dy) => {
        // TODO(manrajgrover): Return null for gradients when backprop supports it.
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=Ceil_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js ***!
  \*******************************************************************************/
/*! exports provided: clipByValueGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clipByValueGradConfig", function() { return clipByValueGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const clipByValueGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["ClipByValue"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { clipValueMin, clipValueMax } = attrs;
        return {
            x: () => Object(_ops_where__WEBPACK_IMPORTED_MODULE_4__["where"])(Object(_ops_logical_and__WEBPACK_IMPORTED_MODULE_3__["logicalAnd"])(Object(_ops_greater_equal__WEBPACK_IMPORTED_MODULE_1__["greaterEqual"])(x, clipValueMin), Object(_ops_less_equal__WEBPACK_IMPORTED_MODULE_2__["lessEqual"])(x, clipValueMax)), dy, Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__["zerosLike"])(dy)),
        };
    }
};
//# sourceMappingURL=ClipByValue_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js ***!
  \**************************************************************************/
/*! exports provided: concatGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatGradConfig", function() { return concatGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const concatGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Concat"],
    saveAllInputs: true,
    gradFunc: (dy, saved, attrs) => {
        const shapes = saved.map(t => t.shape);
        const { axis } = attrs;
        const $axis = Object(_util__WEBPACK_IMPORTED_MODULE_2__["parseAxisParam"])(axis, saved[0].shape)[0];
        const sizeSplits = shapes.map(s => s[$axis]);
        const derTensors = Object(_ops_split__WEBPACK_IMPORTED_MODULE_1__["split"])(dy, sizeSplits, $axis);
        return derTensors.map(t => () => t);
    }
};
//# sourceMappingURL=Concat_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js ***!
  \***************************************************************************************/
/*! exports provided: conv2DBackpropInputGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv2DBackpropInputGradConfig", function() { return conv2DBackpropInputGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv2d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const conv2DBackpropInputGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Conv2DBackpropInput"],
    inputsToSave: ['dy', 'filter'],
    gradFunc: (ddx, saved, attrs) => {
        const [dy, filter] = saved;
        const { strides, pad, dataFormat, dimRoundingMode } = attrs;
        return {
            dy: () => Object(_ops_conv2d__WEBPACK_IMPORTED_MODULE_1__["conv2d"])(ddx, filter, strides, pad, dataFormat, 1 /* dilations */, dimRoundingMode),
            filter: () => Object(_ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_2__["conv2DBackpropFilter"])(ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode)
        };
    }
};
//# sourceMappingURL=Conv2DBackpropInput_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js ***!
  \**************************************************************************/
/*! exports provided: conv2DGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv2DGradConfig", function() { return conv2DGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/conv2d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js");
/* harmony import */ var _ops_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv2d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js");
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const conv2DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Conv2D"],
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const [x4D, $filter] = saved;
        const { dilations, strides, pad, dataFormat } = attrs;
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_ops_conv_util__WEBPACK_IMPORTED_MODULE_3__["tupleValuesAreOne"](dilations), () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +
            `are not yet supported in gradients. Got dilations '${dilations}'`);
        return {
            x: () => Object(_ops_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_2__["conv2DBackpropInput"])(x4D.shape, dy, $filter, strides, pad, dataFormat),
            filter: () => Object(_ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_1__["conv2DBackpropFilter"])(x4D, dy, $filter.shape, strides, pad, dataFormat)
        };
    }
};
//# sourceMappingURL=Conv2D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js ***!
  \**************************************************************************/
/*! exports provided: conv3DGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv3DGradConfig", function() { return conv3DGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv3d_backprop_filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/conv3d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js");
/* harmony import */ var _ops_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv3d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js");
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const conv3DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Conv3D"],
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const { dilations, strides, pad } = attrs;
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](Object(_ops_conv_util__WEBPACK_IMPORTED_MODULE_3__["tupleValuesAreOne"])(dilations), () => 'Error in gradient of conv3D: dilation rates greater than 1 are ' +
            `not yet supported in gradients. Got dilations '${dilations}'`);
        const [x5D, $filter] = saved;
        return {
            x: () => Object(_ops_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_2__["conv3DBackpropInput"])(x5D.shape, dy, $filter, strides, pad),
            filter: () => Object(_ops_conv3d_backprop_filter__WEBPACK_IMPORTED_MODULE_1__["conv3DBackpropFilter"])(x5D, dy, $filter.shape, strides, pad)
        };
    }
};
//# sourceMappingURL=Conv3D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js ***!
  \***********************************************************************/
/*! exports provided: cosGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cosGradConfig", function() { return cosGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_sin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sin */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const cosGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Cos"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(Object(_ops_neg__WEBPACK_IMPORTED_MODULE_3__["neg"])(Object(_ops_sin__WEBPACK_IMPORTED_MODULE_4__["sin"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32'))), dy) };
    }
};
//# sourceMappingURL=Cos_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js ***!
  \************************************************************************/
/*! exports provided: coshGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coshGradConfig", function() { return coshGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sinh__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sinh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const coshGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Cosh"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(Object(_ops_sinh__WEBPACK_IMPORTED_MODULE_3__["sinh"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')), dy) };
    }
};
//# sourceMappingURL=Cosh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js ***!
  \**************************************************************************/
/*! exports provided: cumsumGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cumsumGradConfig", function() { return cumsumGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_cumsum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js");
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const cumsumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Cumsum"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { axis, exclusive, reverse } = attrs;
        return {
            x: () => {
                const permutation = Object(_ops_axis_util__WEBPACK_IMPORTED_MODULE_1__["getAxesPermutation"])([axis], x.rank);
                let out = Object(_ops_cumsum__WEBPACK_IMPORTED_MODULE_2__["cumsum"])(dy, axis, exclusive, !reverse);
                if (permutation != null) {
                    out = Object(_ops_transpose__WEBPACK_IMPORTED_MODULE_3__["transpose"])(out, permutation);
                }
                return out;
            }
        };
    }
};
//# sourceMappingURL=Cumsum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js ***!
  \*****************************************************************************************/
/*! exports provided: depthwiseConv2dNativeGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2dNativeGradConfig", function() { return depthwiseConv2dNativeGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _ops_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/depthwise_conv2d_native_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js");
/* harmony import */ var _ops_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/depthwise_conv2d_native_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const depthwiseConv2dNativeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["DepthwiseConv2dNative"],
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const { dilations, strides, pad, dimRoundingMode } = attrs;
        const $dilations = dilations == null ? [1, 1] : dilations;
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_ops_conv_util__WEBPACK_IMPORTED_MODULE_1__["tupleValuesAreOne"]($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +
            `greater than 1 are not yet supported. Got dilations ` +
            `'${$dilations}'`);
        const [x, filter] = saved;
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` +
            `rank 4, but got rank ${x.rank}.`);
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` +
            `rank 4, but got rank ${filter.rank}.`);
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` +
            `channels (${x.shape[3]}) must match the inChannels dimension ` +
            `in filter ${filter.shape[2]}.`);
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_ops_conv_util__WEBPACK_IMPORTED_MODULE_1__["eitherStridesOrDilationsAreOne"](strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' +
            `dilations must be  1. Got strides ${strides} and dilations ` +
            `'${$dilations}'.`);
        if (dimRoundingMode != null) {
            _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_util__WEBPACK_IMPORTED_MODULE_4__["isInt"](pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +
                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
        }
        return {
            x: () => Object(_ops_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_3__["depthwiseConv2dNativeBackpropInput"])(x.shape, dy, filter, strides, pad, dilations, dimRoundingMode),
            filter: () => Object(_ops_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_2__["depthwiseConv2dNativeBackpropFilter"])(x, dy, filter.shape, strides, pad, dilations, dimRoundingMode),
        };
    }
};
//# sourceMappingURL=DepthwiseConv2dNative_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js ***!
  \******************************************************************************/
/*! exports provided: dilation2dGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dilation2dGradConfig", function() { return dilation2dGradConfig; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const dilation2dGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Dilation2D"],
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const [x, filter] = saved;
        const inputInputs = { x, filter, dy };
        const filterInputs = { x, filter, dy };
        return {
            x: () => _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["Dilation2DBackpropInput"], inputInputs, attrs),
            filter: () => _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["Dilation2DBackpropFilter"], filterInputs, attrs)
        };
    }
};
//# sourceMappingURL=Dilation2D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Div_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Div_grad.js ***!
  \***********************************************************************/
/*! exports provided: divGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divGradConfig", function() { return divGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const divGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Div"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"](a.shape, b.shape);
        const derA = () => {
            const res = Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(b, 'float32'));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](a.shape, outShape);
            if (reduceAxes.length > 0) {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(res, reduceAxes), a.shape);
            }
            return res;
        };
        const derB = () => {
            let res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(a, 'float32'));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(res, reduceAxes), b.shape);
            }
            const tmp = Object(_ops_square__WEBPACK_IMPORTED_MODULE_7__["square"])(b);
            return Object(_ops_neg__WEBPACK_IMPORTED_MODULE_5__["neg"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(res, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(tmp, 'float32')));
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Div_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js ***!
  \***********************************************************************/
/*! exports provided: eluGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eluGradConfig", function() { return eluGradConfig; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const eluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Elu"],
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        const backPropKernelFunc = (backend) => {
            return backend.eluDer(dy, y);
        };
        const inputs = { dy, y };
        return {
            x: () => _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backPropKernelFunc, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["EluGrad"])
        };
    }
};
//# sourceMappingURL=Elu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js ***!
  \***********************************************************************/
/*! exports provided: erfGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "erfGradConfig", function() { return erfGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const erfGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Erf"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        const a = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(Object(_ops_exp__WEBPACK_IMPORTED_MODULE_1__["exp"])(Object(_ops_neg__WEBPACK_IMPORTED_MODULE_3__["neg"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_4__["square"])(x))), 2 / Math.sqrt(Math.PI));
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(dy, a) };
    }
};
//# sourceMappingURL=Erf_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js ***!
  \***********************************************************************/
/*! exports provided: expGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expGradConfig", function() { return expGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const expGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Exp"],
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(dy, y) };
    }
};
//# sourceMappingURL=Exp_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js ***!
  \*************************************************************************/
/*! exports provided: expm1GradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expm1GradConfig", function() { return expm1GradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const expm1GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Expm1"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(dy, Object(_ops_exp__WEBPACK_IMPORTED_MODULE_1__["exp"])(x)) };
    }
};
//# sourceMappingURL=Expm1_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js ***!
  \****************************************************************************/
/*! exports provided: floorDivGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floorDivGradConfig", function() { return floorDivGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const floorDivGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["FloorDiv"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"])(a.shape, b.shape);
        const derA = () => {
            const res = Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(b, 'float32'));
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"])(a.shape, outShape);
            if (reduceAxes.length > 0) {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(res, reduceAxes), a.shape);
            }
            return res;
        };
        const derB = () => {
            let res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(a, 'float32'));
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"])(b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(res, reduceAxes), b.shape);
            }
            const tmp = Object(_ops_square__WEBPACK_IMPORTED_MODULE_7__["square"])(b);
            return Object(_ops_neg__WEBPACK_IMPORTED_MODULE_5__["neg"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(res, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(tmp, 'float32')));
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=FloorDiv_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js ***!
  \*************************************************************************/
/*! exports provided: floorGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floorGradConfig", function() { return floorGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const floorGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Floor"],
    gradFunc: (dy) => {
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=Floor_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js ***!
  \**********************************************************************************/
/*! exports provided: fusedBatchNormGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fusedBatchNormGradConfig", function() { return fusedBatchNormGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_rsqrt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/rsqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _ops_tile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










const fusedBatchNormGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["FusedBatchNorm"],
    inputsToSave: ['x', 'mean', 'variance', 'scale'],
    gradFunc: (dy, saved, attrs) => {
        const { varianceEpsilon } = attrs;
        const [x, mean, variance, scale] = saved;
        const scaleValue = scale == null ? Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(1) : scale;
        const reductionAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__["getReductionAxes"])(mean.shape, x.shape);
        const tileShape = [];
        if (mean.rank === 1) {
            for (let i = 0; i < x.shape.length - 1; ++i) {
                tileShape.push(x.shape[i]);
            }
            tileShape.push(1);
        }
        const xMinusMean = Object(_ops_sub__WEBPACK_IMPORTED_MODULE_7__["sub"])(x, mean);
        const dyTimesScaleValue = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, scaleValue);
        const oneOverSqrtVariance = Object(_ops_rsqrt__WEBPACK_IMPORTED_MODULE_5__["rsqrt"])(Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(variance, Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(varianceEpsilon)));
        const minusHalfRCube = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(-0.5));
        const derX = () => {
            if (mean.rank === 1) {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, Object(_ops_tile__WEBPACK_IMPORTED_MODULE_9__["tile"])(Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);
            }
            else {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, oneOverSqrtVariance), scaleValue), x.shape);
            }
        };
        const derMean = () => {
            let meanDer = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(oneOverSqrtVariance, Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(-1)), dyTimesScaleValue);
            if (mean.rank === 1) {
                meanDer = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(meanDer, reductionAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(meanDer, mean.shape);
        };
        const derVariance = () => {
            let varianceDer = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(minusHalfRCube, xMinusMean), dyTimesScaleValue);
            if (mean.rank === 1) {
                varianceDer = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(varianceDer, reductionAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(varianceDer, mean.shape);
        };
        const derScale = () => {
            const xMinusMean2TimesRsqrt = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(xMinusMean, oneOverSqrtVariance);
            let scaleDer = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, xMinusMean2TimesRsqrt);
            if (mean.rank === 1) {
                scaleDer = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(scaleDer, reductionAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(scaleDer, mean.shape);
        };
        const derOffset = () => {
            let offsetDer = dy;
            if (mean.rank === 1) {
                offsetDer = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(offsetDer, reductionAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(offsetDer, mean.shape);
        };
        return {
            x: derX,
            mean: derMean,
            variance: derVariance,
            scale: derScale,
            offset: derOffset
        };
    }
};
//# sourceMappingURL=FusedBatchNorm_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js ***!
  \****************************************************************************/
/*! exports provided: gatherGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gatherGradConfig", function() { return gatherGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const gatherGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["GatherV2"],
    inputsToSave: ['x', 'indices'],
    gradFunc: (dy, saved, attrs) => {
        const [x, indices] = saved;
        const { axis } = attrs;
        const parsedAxis = Object(_util__WEBPACK_IMPORTED_MODULE_5__["parseAxisParam"])(axis, x.shape)[0];
        const derX = () => {
            const paramsShape = x.shape;
            const indicesSize = indices.size;
            const outerShape = paramsShape.slice(0, parsedAxis);
            const outerDims = outerShape.length;
            const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);
            const innerDims = innerShape.length;
            const outerAxesIndices = arrayRange(0, outerDims);
            const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);
            const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);
            const values = Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_2__["reshape"])(dy, valuesShape);
            const reshapedIndices = Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_2__["reshape"])(indices, [indicesSize]);
            const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);
            const valuesTranspose = Object(_ops_transpose__WEBPACK_IMPORTED_MODULE_3__["transpose"])(values, transposeDims);
            let paramsGrad = Object(_ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_4__["unsortedSegmentSum"])(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);
            const invertTransposeDims = Object(_ops_axis_util__WEBPACK_IMPORTED_MODULE_1__["getUndoAxesPermutation"])(transposeDims);
            paramsGrad = Object(_ops_transpose__WEBPACK_IMPORTED_MODULE_3__["transpose"])(paramsGrad, invertTransposeDims);
            return paramsGrad;
        };
        return { x: derX, indices: () => indices };
    }
};
function arrayRange(start, stop) {
    const result = [];
    for (let i = start; i < stop; ++i) {
        result.push(i);
    }
    return result;
}
function arrayConcat(arrays) {
    const result = [];
    for (let i = 0; i < arrays.length; ++i) {
        for (let j = 0; j < arrays[i].length; ++j) {
            result.push(arrays[i][j]);
        }
    }
    return result;
}
//# sourceMappingURL=GatherV2_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js ***!
  \********************************************************************************/
/*! exports provided: greaterEqualGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greaterEqualGradConfig", function() { return greaterEqualGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const greaterEqualGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["GreaterEqual"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        return { a: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(a), b: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(b) };
    }
};
//# sourceMappingURL=GreaterEqual_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js ***!
  \****************************************************************************/
/*! exports provided: identityGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identityGradConfig", function() { return identityGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const identityGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Identity"],
    gradFunc: (dy) => {
        return { x: () => Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(dy, 'float32') };
    }
};
//# sourceMappingURL=Identity_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js ***!
  \****************************************************************************/
/*! exports provided: isFiniteGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFiniteGradConfig", function() { return isFiniteGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isFiniteGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["IsFinite"],
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=IsFinite_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js ***!
  \*************************************************************************/
/*! exports provided: isInfGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInfGradConfig", function() { return isInfGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isInfGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["IsInf"],
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=IsInf_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js ***!
  \*************************************************************************/
/*! exports provided: isNanGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNanGradConfig", function() { return isNanGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isNanGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["IsNan"],
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=IsNan_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js ***!
  \***********************************************************************/
/*! exports provided: lrnGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lrnGradConfig", function() { return lrnGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_local_response_normalization_backprop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/local_response_normalization_backprop */ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const lrnGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["LRN"],
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [x, y] = saved;
        const { depthRadius, bias, alpha, beta } = attrs;
        return {
            x: () => Object(_ops_local_response_normalization_backprop__WEBPACK_IMPORTED_MODULE_1__["localResponseNormalizationBackprop"])(x, y, dy, depthRadius, bias, alpha, beta)
        };
    }
};
//# sourceMappingURL=LRN_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js ***!
  \*************************************************************************/
/*! exports provided: log1pGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log1pGradConfig", function() { return log1pGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const log1pGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Log1p"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(x, 1)) };
    }
};
//# sourceMappingURL=Log1p_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js ***!
  \******************************************************************************/
/*! exports provided: logSoftmaxGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logSoftmaxGradConfig", function() { return logSoftmaxGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const logSoftmaxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["LogSoftmax"],
    inputsToSave: [],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [value] = saved;
        const { axis } = attrs;
        return {
            logits: () => {
                const keepDims = true;
                const softmax = Object(_ops_exp__WEBPACK_IMPORTED_MODULE_1__["exp"])(value);
                return Object(_ops_sub__WEBPACK_IMPORTED_MODULE_3__["sub"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_4__["sum"])(dy, axis, keepDims), softmax));
            }
        };
    }
};
//# sourceMappingURL=LogSoftmax_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js ***!
  \***********************************************************************/
/*! exports provided: logGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logGradConfig", function() { return logGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const logGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Log"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')) };
    }
};
//# sourceMappingURL=Log_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js ***!
  \*****************************************************************************/
/*! exports provided: maxPool3DGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPool3DGradConfig", function() { return maxPool3DGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_max_pool_3d_backprop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/max_pool_3d_backprop */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_backprop.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const maxPool3DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["MaxPool3D"],
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [x, y] = saved;
        const { filterSize, strides, dilations, pad, dimRoundingMode } = attrs;
        const $dilations = dilations == null ? [1, 1, 1] : dilations;
        return {
            x: () => Object(_ops_max_pool_3d_backprop__WEBPACK_IMPORTED_MODULE_1__["maxPool3dBackprop"])(dy, x, y, filterSize, strides, $dilations, pad, dimRoundingMode)
        };
    }
};
//# sourceMappingURL=MaxPool3D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js ***!
  \***************************************************************************/
/*! exports provided: maxPoolGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPoolGradConfig", function() { return maxPoolGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_max_pool_backprop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/max_pool_backprop */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_backprop.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const maxPoolGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["MaxPool"],
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [x, y] = saved;
        const { filterSize, strides, pad } = attrs;
        return {
            x: () => Object(_ops_max_pool_backprop__WEBPACK_IMPORTED_MODULE_1__["maxPoolBackprop"])(dy, x, y, filterSize, strides, pad)
        };
    }
};
//# sourceMappingURL=MaxPool_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js ***!
  \***********************************************************************/
/*! exports provided: maxGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxGradConfig", function() { return maxGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./min_max_grad_util */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const maxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Max"],
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const maxAttrs = attrs;
        const { reductionIndices } = maxAttrs;
        const x = saved[0];
        const y = saved[1];
        const origAxes = _util__WEBPACK_IMPORTED_MODULE_1__["parseAxisParam"](reductionIndices, x.shape);
        const maxGrad = Object(_min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__["gradForMinAndMax"])(dy, y, x, origAxes);
        return {
            x: () => {
                return maxGrad['x']();
            }
        };
    }
};
//# sourceMappingURL=Max_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js ***!
  \***************************************************************************/
/*! exports provided: maximumGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maximumGradConfig", function() { return maximumGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _ops_less__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const maximumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Maximum"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const derA = () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_greater_equal__WEBPACK_IMPORTED_MODULE_2__["greaterEqual"])(a, b), 'float32'));
        const derB = () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_less__WEBPACK_IMPORTED_MODULE_3__["less"])(a, b), 'float32'));
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Maximum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js ***!
  \***********************************************************************/
/*! exports provided: minGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "minGradConfig", function() { return minGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./min_max_grad_util */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const minGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Min"],
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const minAttrs = attrs;
        const { axis } = minAttrs;
        const [x, y] = saved;
        const origAxes = _util__WEBPACK_IMPORTED_MODULE_1__["parseAxisParam"](axis, x.shape);
        const minGrad = Object(_min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__["gradForMinAndMax"])(dy, y, x, origAxes);
        return {
            x: () => {
                return minGrad['x']();
            }
        };
    }
};
//# sourceMappingURL=Min_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js ***!
  \***************************************************************************/
/*! exports provided: minimumGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "minimumGradConfig", function() { return minimumGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const minimumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Minimum"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const derA = () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_less_equal__WEBPACK_IMPORTED_MODULE_3__["lessEqual"])(a, b), 'float32'));
        const derB = () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_greater__WEBPACK_IMPORTED_MODULE_2__["greater"])(a, b), 'float32'));
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Minimum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js ***!
  \*****************************************************************************/
/*! exports provided: mirrorPadGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mirrorPadGradConfig", function() { return mirrorPadGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const mirrorPadGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["MirrorPad"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        // Pad introduces values around the original tensor, so the gradient
        // slices the original shape out of the gradient.
        const x = saved[0];
        const { paddings } = attrs;
        const begin = paddings.map(p => p[0]);
        return { x: () => Object(_ops_slice__WEBPACK_IMPORTED_MODULE_1__["slice"])(dy, begin, x.shape) };
    }
};
//# sourceMappingURL=MirrorPad_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js ***!
  \***********************************************************************/
/*! exports provided: modGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modGradConfig", function() { return modGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_floor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/floor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const modGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Mod"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"])(a.shape, b.shape);
        const derA = () => {
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"])(a.shape, outShape);
            if (reduceAxes.length > 0) {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_7__["sum"])(dy, reduceAxes), a.shape);
            }
            return dy;
        };
        const derB = () => {
            const res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, Object(_ops_neg__WEBPACK_IMPORTED_MODULE_5__["neg"])(Object(_ops_floor__WEBPACK_IMPORTED_MODULE_3__["floor"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(a, b))));
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"])(b.shape, outShape);
            if (reduceAxes.length > 0) {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_7__["sum"])(res, reduceAxes), b.shape);
            }
            return res;
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Mod_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js ***!
  \****************************************************************************/
/*! exports provided: multiplyGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyGradConfig", function() { return multiplyGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const multiplyGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Multiply"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"])(a.shape, b.shape);
        const derA = () => {
            const res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(b, 'float32'));
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"])(a.shape, outShape);
            if (reduceAxes.length > 0) {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_5__["sum"])(res, reduceAxes), a.shape);
            }
            return res;
        };
        const derB = () => {
            const res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(a, 'float32'));
            const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"])(b.shape, outShape);
            if (reduceAxes.length > 0) {
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_5__["sum"])(res, reduceAxes), b.shape);
            }
            return res;
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Multiply_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Negate_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Negate_grad.js ***!
  \**************************************************************************/
/*! exports provided: negateGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negateGradConfig", function() { return negateGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const negateGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Negate"],
    gradFunc: (dy) => {
        return { x: () => Object(_ops_neg__WEBPACK_IMPORTED_MODULE_1__["neg"])(dy) };
    }
};
//# sourceMappingURL=Negate_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js ***!
  \**************************************************************************/
/*! exports provided: oneHotGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oneHotGradConfig", function() { return oneHotGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const oneHotGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["OneHot"],
    inputsToSave: ['indices'],
    gradFunc: (dy, saved) => {
        const indices = saved[0];
        return { indices: () => Object(_ops_zeros__WEBPACK_IMPORTED_MODULE_1__["zeros"])(indices.shape, 'float32') };
    }
};
//# sourceMappingURL=OneHot_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js ***!
  \****************************************************************************/
/*! exports provided: onesLikeGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onesLikeGradConfig", function() { return onesLikeGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const onesLikeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["OnesLike"],
    gradFunc: (dy) => {
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=OnesLike_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js ***!
  \*************************************************************************/
/*! exports provided: padV2GradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padV2GradConfig", function() { return padV2GradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const padV2GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["PadV2"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        // Pad introduces values around the original tensor, so the gradient
        // slices the original shape out of the gradient.
        const x = saved[0];
        const { paddings } = attrs;
        const begin = paddings.map(p => p[0]);
        return { x: () => Object(_ops_slice__WEBPACK_IMPORTED_MODULE_1__["slice"])(dy, begin, x.shape) };
    }
};
//# sourceMappingURL=PadV2_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js ***!
  \***********************************************************************/
/*! exports provided: powGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "powGradConfig", function() { return powGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













const powGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Pow"],
    inputsToSave: ['a', 'b'],
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [a, b, y] = saved;
        const base = a;
        const exp = b;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"](base.shape, exp.shape);
        const derBase = () => {
            const expFloat = Object(_ops_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(exp, 'float32');
            let res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])(expFloat, Object(_ops_pow__WEBPACK_IMPORTED_MODULE_6__["pow"])(base, Object(_ops_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(expFloat, Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(1)))));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](base.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(res, base.shape);
        };
        const derExp = () => {
            const condition = Object(_ops_greater__WEBPACK_IMPORTED_MODULE_3__["greater"])(base, 0);
            const logBase = Object(_ops_where__WEBPACK_IMPORTED_MODULE_11__["where"])(condition, Object(_ops_log__WEBPACK_IMPORTED_MODULE_4__["log"])(base), Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_12__["zerosLike"])(base));
            let res = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])(y, logBase));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](exp.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(res, exp.shape);
        };
        return { a: derBase, b: derExp };
    }
};
//# sourceMappingURL=Pow_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js ***!
  \*************************************************************************/
/*! exports provided: preluGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preluGradConfig", function() { return preluGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const preluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Prelu"],
    inputsToSave: ['x', 'alpha'],
    gradFunc: (dy, saved) => {
        const [x, alpha] = saved;
        const mask = Object(_ops_greater__WEBPACK_IMPORTED_MODULE_2__["greater"])(x, 0);
        return {
            x: () => Object(_ops_where__WEBPACK_IMPORTED_MODULE_6__["where"])(mask, dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, alpha)),
            alpha: () => {
                let res = Object(_ops_where__WEBPACK_IMPORTED_MODULE_6__["where"])(mask, Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_7__["zerosLike"])(dy), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, x));
                const reduceAxes = Object(_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"])(alpha.shape, dy.shape);
                if (reduceAxes.length > 0) {
                    res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_5__["sum"])(res, reduceAxes);
                }
                return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(res, alpha.shape);
            }
        };
    }
};
//# sourceMappingURL=Prelu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js ***!
  \******************************************************************************/
/*! exports provided: reciprocalGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reciprocalGradConfig", function() { return reciprocalGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const reciprocalGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Reciprocal"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_1__["div"])(dy, Object(_ops_neg__WEBPACK_IMPORTED_MODULE_2__["neg"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_3__["square"])(x))) };
    }
};
//# sourceMappingURL=Reciprocal_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js ***!
  \*************************************************************************/
/*! exports provided: relu6GradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "relu6GradConfig", function() { return relu6GradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const relu6GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Relu6"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        const mask = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_less_equal__WEBPACK_IMPORTED_MODULE_2__["lessEqual"])(x, 6), Object(_ops_step__WEBPACK_IMPORTED_MODULE_4__["step"])(x));
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(mask, 'float32')) };
    }
};
//# sourceMappingURL=Relu6_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js ***!
  \************************************************************************/
/*! exports provided: reluGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reluGradConfig", function() { return reluGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const reluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Relu"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_step__WEBPACK_IMPORTED_MODULE_3__["step"])(x), 'float32')) };
    }
};
//# sourceMappingURL=Relu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js ***!
  \***************************************************************************/
/*! exports provided: reshapeGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reshapeGradConfig", function() { return reshapeGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const reshapeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Reshape"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_1__["reshape"])(dy, x.shape) };
    }
};
//# sourceMappingURL=Reshape_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js ***!
  \**********************************************************************************/
/*! exports provided: resizeBilinearGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizeBilinearGradConfig", function() { return resizeBilinearGradConfig; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const resizeBilinearGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ResizeBilinear"],
    inputsToSave: ['images'],
    gradFunc: (dy, saved, attrs) => {
        const [images] = saved;
        const backPropKernelFunc = (backend) => {
            const { alignCorners } = attrs;
            return backend.resizeBilinearBackprop(dy, images, alignCorners);
        };
        const inputs = { images };
        const imagesDer = () => _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backPropKernelFunc, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ResizeBilinearGrad"], attrs);
        return { images: imagesDer };
    }
};
//# sourceMappingURL=ResizeBilinear_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js ***!
  \*****************************************************************************************/
/*! exports provided: resizeNearestNeighborGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizeNearestNeighborGradConfig", function() { return resizeNearestNeighborGradConfig; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const resizeNearestNeighborGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ResizeNearestNeighbor"],
    inputsToSave: ['images'],
    gradFunc: (dy, saved, attrs) => {
        const [images] = saved;
        const backPropKernelFunc = (backend) => {
            const { alignCorners } = attrs;
            return backend.resizeNearestNeighborBackprop(dy, images, alignCorners);
        };
        const inputs = { images };
        const imagesDer = () => _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backPropKernelFunc, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ResizeNearestNeighborGrad"], attrs);
        return { images: imagesDer };
    }
};
//# sourceMappingURL=ResizeNearestNeighbor_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js ***!
  \***************************************************************************/
/*! exports provided: reverseGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverseGradConfig", function() { return reverseGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_reverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const reverseGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Reverse"],
    gradFunc: (dy, saved, attrs) => {
        const { dims } = attrs;
        const axes = Object(_util__WEBPACK_IMPORTED_MODULE_2__["parseAxisParam"])(dims, dy.shape);
        return { x: () => Object(_ops_reverse__WEBPACK_IMPORTED_MODULE_1__["reverse"])(dy, axes) };
    }
};
//# sourceMappingURL=Reverse_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js ***!
  \*************************************************************************/
/*! exports provided: roundGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "roundGradConfig", function() { return roundGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const roundGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Round"],
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=Round_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js ***!
  \*************************************************************************/
/*! exports provided: rsqrtGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rsqrtGradConfig", function() { return rsqrtGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const rsqrtGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Rsqrt"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_neg__WEBPACK_IMPORTED_MODULE_3__["neg"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_1__["div"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(Object(_ops_pow__WEBPACK_IMPORTED_MODULE_4__["pow"])(x, 1.5), 2))) };
    }
};
//# sourceMappingURL=Rsqrt_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SelectV2_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SelectV2_grad.js ***!
  \****************************************************************************/
/*! exports provided: selectV2PoolGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectV2PoolGradConfig", function() { return selectV2PoolGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_logical_not__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const selectV2PoolGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["SelectV2"],
    inputsToSave: ['condition'],
    gradFunc: (dy, saved) => {
        const [condition] = saved;
        return {
            // TODO(julianoks): Return null for condition gradient
            // when backprop supports it.
            condition: () => Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__["zerosLike"])(condition), 'float32'),
            t: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(condition, dy.dtype)),
            e: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_logical_not__WEBPACK_IMPORTED_MODULE_2__["logicalNot"])(condition), dy.dtype))
        };
    }
};
//# sourceMappingURL=SelectV2_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js ***!
  \************************************************************************/
/*! exports provided: seluGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seluGradConfig", function() { return seluGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_selu_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/selu_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const seluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Selu"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const mask = Object(_ops_greater__WEBPACK_IMPORTED_MODULE_3__["greater"])(x, Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_5__["scalar"])(0));
                const scaleAlpha = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_5__["scalar"])(_ops_selu_util__WEBPACK_IMPORTED_MODULE_6__["SELU_SCALEALPHA"]);
                const scale = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_5__["scalar"])(_ops_selu_util__WEBPACK_IMPORTED_MODULE_6__["SELU_SCALE"]);
                const greaterThanZeroDer = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, scale);
                const lessEqualZeroDer = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(dy, scaleAlpha), Object(_ops_exp__WEBPACK_IMPORTED_MODULE_2__["exp"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')));
                return Object(_ops_where__WEBPACK_IMPORTED_MODULE_7__["where"])(mask, greaterThanZeroDer, lessEqualZeroDer);
            }
        };
    }
};
//# sourceMappingURL=Selu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js ***!
  \***************************************************************************/
/*! exports provided: sigmoidGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sigmoidGradConfig", function() { return sigmoidGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sigmoidGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Sigmoid"],
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(y, Object(_ops_sub__WEBPACK_IMPORTED_MODULE_3__["sub"])(Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_2__["scalar"])(1), y))) };
    }
};
//# sourceMappingURL=Sigmoid_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js ***!
  \************************************************************************/
/*! exports provided: signGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "signGradConfig", function() { return signGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const signGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Sign"],
    gradFunc: (dy) => {
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=Sign_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js ***!
  \***********************************************************************/
/*! exports provided: sinGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sinGradConfig", function() { return sinGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_cos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sinGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Sin"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_cos__WEBPACK_IMPORTED_MODULE_2__["cos"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')), dy) };
    }
};
//# sourceMappingURL=Sin_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js ***!
  \************************************************************************/
/*! exports provided: sinhGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sinhGradConfig", function() { return sinhGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_cosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cosh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sinhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Sinh"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_cosh__WEBPACK_IMPORTED_MODULE_2__["cosh"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')), dy) };
    }
};
//# sourceMappingURL=Sinh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js ***!
  \*************************************************************************/
/*! exports provided: sliceGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sliceGradConfig", function() { return sliceGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");
/* harmony import */ var _ops_slice_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const sliceGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Slice"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { begin, size } = attrs;
        const inputShape = x.shape;
        const [begin_, size_] = Object(_ops_slice_util__WEBPACK_IMPORTED_MODULE_2__["parseSliceParams"])(x, begin, size);
        // Create an Nx2 padding where the first column represents how many
        // zeros are prepended (at start) for each dimension, and the second
        // column indicates how many zeros are appended (at end).
        // The number of zeros to append is the shape of the input
        // elementwise-subtracted by both the begin vector and sizes vector.
        const paddings = [];
        for (let i = 0; i < dy.rank; i++) {
            paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);
        }
        return { x: () => Object(_ops_pad__WEBPACK_IMPORTED_MODULE_1__["pad"])(dy, paddings) };
    }
};
//# sourceMappingURL=Slice_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js ***!
  \***************************************************************************/
/*! exports provided: softmaxGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "softmaxGradConfig", function() { return softmaxGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const softmaxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Softmax"],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [y] = saved;
        const { dim } = attrs;
        const keepDims = true;
        const dyTimesY = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(dy, y);
        return {
            logits: () => Object(_ops_sub__WEBPACK_IMPORTED_MODULE_2__["sub"])(dyTimesY, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(Object(_ops_sum__WEBPACK_IMPORTED_MODULE_3__["sum"])(dyTimesY, [dim], keepDims), y))
        };
    }
};
//# sourceMappingURL=Softmax_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js ***!
  \****************************************************************************/
/*! exports provided: softplusGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "softplusGradConfig", function() { return softplusGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sigmoid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const softplusGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Softplus"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(dy, Object(_ops_sigmoid__WEBPACK_IMPORTED_MODULE_2__["sigmoid"])(x)) };
    }
};
//# sourceMappingURL=Softplus_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js ***!
  \**********************************************************************************/
/*! exports provided: spaceToBatchNDGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spaceToBatchNDGradConfig", function() { return spaceToBatchNDGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const spaceToBatchNDGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["SpaceToBatchND"],
    gradFunc: (dy, saved, attrs) => {
        const { blockShape, paddings } = attrs;
        return { x: () => Object(_ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__["batchToSpaceND"])(dy, blockShape, paddings) };
    }
};
//# sourceMappingURL=SpaceToBatchND_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js ***!
  \**************************************************************************/
/*! exports provided: splitVGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitVGradConfig", function() { return splitVGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const splitVGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["SplitV"],
    gradFunc: (dy, saved, attrs) => {
        const { axis } = attrs;
        return { x: () => Object(_ops_concat__WEBPACK_IMPORTED_MODULE_1__["concat"])(dy, axis) };
    }
};
//# sourceMappingURL=SplitV_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js ***!
  \************************************************************************/
/*! exports provided: sqrtGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrtGradConfig", function() { return sqrtGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const sqrtGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Sqrt"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_4__["sqrt"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32')), 2)) };
    }
};
//# sourceMappingURL=Sqrt_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js ***!
  \**************************************************************************/
/*! exports provided: squareGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squareGradConfig", function() { return squareGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const squareGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Square"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(x, 'float32'), 2)) };
    }
};
//# sourceMappingURL=Square_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js ***!
  \*************************************************************************************/
/*! exports provided: squaredDifferenceGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDifferenceGradConfig", function() { return squaredDifferenceGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const squaredDifferenceGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["SquaredDifference"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const two = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_2__["scalar"])(2);
        const derA = () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(two, Object(_ops_sub__WEBPACK_IMPORTED_MODULE_3__["sub"])(a, b)));
        const derB = () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(dy, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(two, Object(_ops_sub__WEBPACK_IMPORTED_MODULE_3__["sub"])(b, a)));
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=SquaredDifference_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js ***!
  \************************************************************************/
/*! exports provided: stepGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stepGradConfig", function() { return stepGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const stepGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Step"],
    gradFunc: (dy) => {
        // TODO(manrajgrover): Return null for gradients when backprop supports
        // it.
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=Step_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js ***!
  \***********************************************************************/
/*! exports provided: subGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subGradConfig", function() { return subGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const subGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Sub"],
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"](a.shape, b.shape);
        const derA = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](a.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_4__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])(res, a.shape);
        };
        const derB = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["getReductionAxes"](b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = Object(_ops_sum__WEBPACK_IMPORTED_MODULE_4__["sum"])(res, reduceAxes);
            }
            return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])(Object(_ops_neg__WEBPACK_IMPORTED_MODULE_2__["neg"])(res), b.shape);
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Sub_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js ***!
  \***********************************************************************/
/*! exports provided: sumGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sumGradConfig", function() { return sumGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const sumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Sum"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const expandedDyShape = x.shape.slice();
        const { axis } = attrs;
        const axes = Object(_util__WEBPACK_IMPORTED_MODULE_4__["parseAxisParam"])(axis, x.shape);
        axes.forEach(axis => {
            expandedDyShape[axis] = 1;
        });
        const expandedDy = Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])(dy, expandedDyShape);
        const derX = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(expandedDy, Object(_ops_ones__WEBPACK_IMPORTED_MODULE_2__["ones"])(x.shape, 'float32'));
        return { x: () => derX };
    }
};
//# sourceMappingURL=Sum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js ***!
  \***********************************************************************/
/*! exports provided: tanGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tanGradConfig", function() { return tanGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const tanGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Tan"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => Object(_ops_div__WEBPACK_IMPORTED_MODULE_2__["div"])(dy, Object(_ops_square__WEBPACK_IMPORTED_MODULE_3__["square"])(Object(_ops_cos__WEBPACK_IMPORTED_MODULE_1__["cos"])(x))) };
    }
};
//# sourceMappingURL=Tan_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js ***!
  \************************************************************************/
/*! exports provided: tanhGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tanhGradConfig", function() { return tanhGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const tanhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Tanh"],
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        return { x: () => Object(_ops_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(Object(_ops_sub__WEBPACK_IMPORTED_MODULE_4__["sub"])(Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_2__["scalar"])(1), Object(_ops_square__WEBPACK_IMPORTED_MODULE_3__["square"])(y)), dy) };
    }
};
//# sourceMappingURL=Tanh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js ***!
  \************************************************************************/
/*! exports provided: tileGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tileGradConfig", function() { return tileGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const tileGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Tile"],
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { reps } = attrs;
        const derX = () => {
            let xGrad = Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__["zerosLike"])(x);
            // TODO(cais): Maybe reduce memory footprint by avoiding repeated
            // slicing.
            if (x.rank === 1) {
                for (let i = 0; i < reps[0]; ++i) {
                    xGrad = Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(xGrad, Object(_ops_slice__WEBPACK_IMPORTED_MODULE_2__["slice"])(dy, [i * x.shape[0]], [x.shape[0]]));
                }
            }
            else if (x.rank === 2) {
                for (let i = 0; i < reps[0]; ++i) {
                    for (let j = 0; j < reps[1]; ++j) {
                        xGrad = Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(xGrad, Object(_ops_slice__WEBPACK_IMPORTED_MODULE_2__["slice"])(dy, [i * x.shape[0], j * x.shape[1]], [
                            x.shape[0], x.shape[1]
                        ]));
                    }
                }
            }
            else if (x.rank === 3) {
                for (let i = 0; i < reps[0]; ++i) {
                    for (let j = 0; j < reps[1]; ++j) {
                        for (let k = 0; k < reps[2]; ++k) {
                            xGrad =
                                Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(xGrad, Object(_ops_slice__WEBPACK_IMPORTED_MODULE_2__["slice"])(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));
                        }
                    }
                }
            }
            else if (x.rank === 4) {
                for (let i = 0; i < reps[0]; ++i) {
                    for (let j = 0; j < reps[1]; ++j) {
                        for (let k = 0; k < reps[2]; ++k) {
                            for (let l = 0; l < reps[3]; ++l) {
                                xGrad =
                                    Object(_ops_add__WEBPACK_IMPORTED_MODULE_1__["add"])(xGrad, Object(_ops_slice__WEBPACK_IMPORTED_MODULE_2__["slice"])(dy, [
                                        i * x.shape[0], j * x.shape[1], k * x.shape[2],
                                        l * x.shape[3]
                                    ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));
                            }
                        }
                    }
                }
            }
            else {
                throw new Error(`Gradient for tile operation is not implemented for rank-` +
                    `${x.rank} tensors yet.`);
            }
            return xGrad;
        };
        return { x: derX };
    },
};
//# sourceMappingURL=Tile_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js ***!
  \*****************************************************************************/
/*! exports provided: transposeGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transposeGradConfig", function() { return transposeGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const transposeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Transpose"],
    gradFunc: (dy, saved, attrs) => {
        const transposeAttrs = attrs;
        const { perm } = transposeAttrs;
        const undoPerm = _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__["getUndoAxesPermutation"](perm);
        return { x: () => Object(_ops_transpose__WEBPACK_IMPORTED_MODULE_2__["transpose"])(dy, undoPerm) };
    }
};
//# sourceMappingURL=Transpose_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js ***!
  \**************************************************************************/
/*! exports provided: unpackGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unpackGradConfig", function() { return unpackGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const unpackGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["Unpack"],
    gradFunc: (dy, saved, attrs) => {
        const unpackAttrs = attrs;
        const { axis } = unpackAttrs;
        return { value: () => Object(_ops_stack__WEBPACK_IMPORTED_MODULE_1__["stack"])(dy, axis) };
    }
};
//# sourceMappingURL=Unpack_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js ***!
  \**************************************************************************************/
/*! exports provided: unsortedSegmentSumGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsortedSegmentSumGradConfig", function() { return unsortedSegmentSumGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_expand_dims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _ops_gather__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










const unsortedSegmentSumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["UnsortedSegmentSum"],
    inputsToSave: ['segmentIds'],
    gradFunc: (dy, saved) => {
        const [segmentIds] = saved;
        const derX = () => {
            return gatherDropNegatives(dy, segmentIds);
        };
        return { x: derX };
    }
};
function gatherDropNegatives(x, indices) {
    // Helper function for unsorted segment ops. Gathers params for
    // positive segment ids and gathers 0 for inputs with negative segment id.
    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py
    const zeroClippedIndices = Object(_ops_maximum__WEBPACK_IMPORTED_MODULE_5__["maximum"])(indices, Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_9__["zerosLike"])(indices));
    const gathered = Object(_ops_gather__WEBPACK_IMPORTED_MODULE_2__["gather"])(x, zeroClippedIndices);
    let isPositive = Object(_ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__["greaterEqual"])(indices, Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_7__["scalar"])(0, 'int32'));
    const numIters = gathered.rank - isPositive.rank;
    for (let i = 0; i < numIters; ++i) {
        isPositive = Object(_ops_expand_dims__WEBPACK_IMPORTED_MODULE_1__["expandDims"])(isPositive, i + 1);
    }
    isPositive = Object(_ops_logical_and__WEBPACK_IMPORTED_MODULE_4__["logicalAnd"])(isPositive, Object(_ops_ones__WEBPACK_IMPORTED_MODULE_6__["ones"])(gathered.shape, 'bool'));
    const zeroSlice = Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_9__["zerosLike"])(gathered);
    return Object(_ops_where__WEBPACK_IMPORTED_MODULE_8__["where"])(isPositive, gathered, zeroSlice);
}
//# sourceMappingURL=UnsortedSegmentSum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js ***!
  \*****************************************************************************/
/*! exports provided: zerosLikeGradConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zerosLikeGradConfig", function() { return zerosLikeGradConfig; });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const zerosLikeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__["ZerosLike"],
    gradFunc: (dy) => {
        return { x: () => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__["zerosLike"])(dy) };
    }
};
//# sourceMappingURL=ZerosLike_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js ***!
  \********************************************************************************/
/*! exports provided: gradForMinAndMax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gradForMinAndMax", function() { return gradForMinAndMax; });
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Gradient helper function for the min and max operations.
 */
function gradForMinAndMax(dy, y, xOrig, origAxes) {
    if (y.rank < xOrig.rank) {
        y = Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(y, _ops_axis_util__WEBPACK_IMPORTED_MODULE_0__["expandShapeToKeepDim"](y.shape, origAxes));
    }
    if (dy.rank < xOrig.rank) {
        dy = Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(dy, _ops_axis_util__WEBPACK_IMPORTED_MODULE_0__["expandShapeToKeepDim"](dy.shape, origAxes));
    }
    return {
        x: () => {
            const dx = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(dy, Object(_ops_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_ops_equal__WEBPACK_IMPORTED_MODULE_2__["equal"])(xOrig, y), dy.dtype));
            return dx;
        }
    };
}
//# sourceMappingURL=min_max_grad_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/index.js ***!
  \**********************************************************/
/*! exports provided: AdadeltaOptimizer, AdagradOptimizer, AdamOptimizer, AdamaxOptimizer, MomentumOptimizer, Optimizer, RMSPropOptimizer, SGDOptimizer, Tensor, TensorBuffer, Variable, Rank, sumOutType, upcastType, abs, acos, acosh, add, addN, all, any, argMax, argMin, asin, asinh, atan, atan2, atanh, avgPool, avgPool3d, basicLSTMCell, batchToSpaceND, batchNorm, batchNorm2d, batchNorm3d, batchNorm4d, broadcastTo, buffer, cast, ceil, clipByValue, clone, complex, concat, concat1d, concat2d, concat3d, concat4d, conv1d, conv2d, conv2dTranspose, conv3d, conv3dTranspose, cos, cosh, cumsum, depthToSpace, depthwiseConv2d, diag, dilation2d, div, divNoNan, dot, elu, equal, erf, exp, expandDims, expm1, eye, fill, floor, floorDiv, gather, greater, greaterEqual, imag, isFinite, isInf, isNaN, leakyRelu, less, lessEqual, linspace, localResponseNormalization, log, log1p, logSigmoid, logSoftmax, logSumExp, logicalAnd, logicalNot, logicalOr, logicalXor, matMul, max, maxPool, maxPool3d, maxPoolWithArgmax, maximum, mean, min, minimum, mirrorPad, mod, moments, mul, multiRNNCell, multinomial, neg, notEqual, oneHot, ones, onesLike, outerProduct, pad, pad1d, pad2d, pad3d, pad4d, pool, pow, prelu, print, prod, rand, randomGamma, randomNormal, randomUniform, range, real, reciprocal, relu, relu6, reshape, reverse, reverse1d, reverse2d, reverse3d, reverse4d, round, rsqrt, scalar, selu, separableConv2d, setdiff1dAsync, sigmoid, sign, sin, sinh, slice, slice1d, slice2d, slice3d, slice4d, softmax, softplus, spaceToBatchND, fft, ifft, irfft, rfft, split, sqrt, square, squaredDifference, squeeze, stack, step, stridedSlice, sub, sum, tan, tanh, tensor, tensor1d, tensor2d, tensor3d, tensor4d, tensor5d, tensor6d, tile, topk, truncatedNormal, unique, unsortedSegmentSum, unstack, variable, where, whereAsync, zeros, zerosLike, booleanMaskAsync, equalStrict, greaterEqualStrict, greaterStrict, lessEqualStrict, lessStrict, notEqualStrict, addStrict, divStrict, maximumStrict, minimumStrict, modStrict, mulStrict, powStrict, squaredDifferenceStrict, subStrict, transpose, norm, movingAverage, scatterND, sparseToDense, gatherND, dropout, enclosingPowerOfTwo, cosineWindow, inTopKAsync, op, OP_SCOPE_SUFFIX, image, linalg, losses, spectral, fused, signal, Reduction, train, enableProdMode, enableDebugMode, disableDeprecationWarnings, deprecationWarn, disposeVariables, engine, memory, profile, tidy, dispose, keep, time, setBackend, ready, getBackend, removeBackend, findBackend, findBackendFactory, registerBackend, backend, setPlatform, getKernel, getGradient, getKernelsForBackend, registerKernel, registerGradient, unregisterKernel, unregisterGradient, copyRegisteredKernels, customGrad, grad, grads, valueAndGrad, valueAndGrads, variableGrads, Environment, env, ENV, version_core, nextFrame, browser, io, math, serialization, test_util, util, backend_util, tensor_util, slice_util, gather_util, scatter_util, device_util, kernel_impls, KernelBackend, DataStorage, Abs, Acos, Acosh, Add, AddN, All, Any, ArgMax, ArgMin, Asin, Asinh, Atan, Atanh, Atan2, AvgPool, AvgPoolBackprop, AvgPool3D, AvgPool3DBackprop, BatchMatMul, BatchToSpaceND, BroadcastTo, Cast, Ceil, ClipByValue, Complex, Concat, Conv2D, Conv2DBackpropFilter, Conv2DBackpropInput, Conv3D, Conv3DBackpropFilterV2, Conv3DBackpropInputV2, Cos, Cosh, Cumsum, CropAndResize, DepthToSpace, DepthwiseConv2dNative, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropInput, Diag, Dilation2D, Dilation2DBackpropInput, Dilation2DBackpropFilter, Div, Elu, EluGrad, Erf, Equal, Exp, Expm1, FFT, Fill, FlipLeftRight, Floor, FloorDiv, FusedBatchNorm, GatherV2, GatherNd, Greater, GreaterEqual, Identity, IFFT, Imag, IsFinite, IsInf, IsNan, Less, LessEqual, LinSpace, Log, Log1p, LogicalAnd, LogicalNot, LogicalOr, LogSoftmax, LRN, LRNBackprop, Max, Maximum, MaxPool, MaxPoolBackprop, MaxPool3D, MaxPool3DBackprop, MaxPoolWithArgmax, Mean, Min, Minimum, MirrorPad, Mod, Multiply, Negate, NotEqual, NonMaxSuppressionV3, NonMaxSuppressionV4, NonMaxSuppressionV5, OnesLike, OneHot, PadV2, Pool, Pow, Prelu, Prod, Range, Real, Reciprocal, Relu, Reshape, ResizeNearestNeighbor, ResizeNearestNeighborGrad, ResizeBilinear, ResizeBilinearGrad, Relu6, Reverse, Round, Rsqrt, ScatterNd, SelectV2, Selu, Slice, Sin, Sinh, Sign, Sigmoid, Softplus, Sqrt, Sum, SpaceToBatchND, SplitV, Softmax, SquaredDifference, Square, Sub, SparseToDense, StridedSlice, Tan, Tanh, Tile, TopK, Transpose, Unique, Unpack, UnsortedSegmentSum, ZerosLike, Step, FromPixels, RotateWithOffset, _FusedMatMul, FusedConv2D, FusedDepthwiseConv2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _base_side_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base_side_effects */ "./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./node_modules/@tensorflow/tfjs-core/dist/base.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdadeltaOptimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AdadeltaOptimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdagradOptimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AdagradOptimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdamOptimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AdamOptimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdamaxOptimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AdamaxOptimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MomentumOptimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["MomentumOptimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Optimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Optimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RMSPropOptimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["RMSPropOptimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SGDOptimizer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["SGDOptimizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tensor", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Tensor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TensorBuffer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["TensorBuffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Variable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rank", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Rank"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sumOutType", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sumOutType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "upcastType", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["upcastType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "abs", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["abs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acos", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["acos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acosh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["acosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "add", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["add"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addN", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["addN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "all", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["all"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "any", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["argMax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMin", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["argMin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asin", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["asin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asinh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["asinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["atan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan2", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["atan2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atanh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["atanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["avgPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["avgPool3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basicLSTMCell", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["basicLSTMCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchToSpaceND", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["batchToSpaceND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["batchNorm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["batchNorm2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["batchNorm3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm4d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["batchNorm4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "broadcastTo", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["broadcastTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["buffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cast", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["cast"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ceil"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clipByValue", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["clipByValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["clone"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "complex", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["complex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["concat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat1d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["concat1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["concat2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["concat3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat4d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["concat4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv1d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["conv1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["conv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2dTranspose", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["conv2dTranspose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["conv3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3dTranspose", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["conv3dTranspose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["cos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["cosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cumsum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["cumsum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthToSpace", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["depthToSpace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["depthwiseConv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "diag", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["diag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dilation2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["dilation2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "div", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["div"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divNoNan", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["divNoNan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["dot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["elu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equal", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["equal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "erf", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["erf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exp", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["exp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expandDims", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["expandDims"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expm1", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["expm1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eye", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["eye"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fill", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["fill"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["floor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floorDiv", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["floorDiv"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gather", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["gather"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greater", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["greater"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqual", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["greaterEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "imag", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["imag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFinite", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["isFinite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInf", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["isInf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["isNaN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "leakyRelu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["leakyRelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "less", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["less"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqual", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["lessEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linspace", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["linspace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "localResponseNormalization", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["localResponseNormalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["log"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log1p", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["log1p"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSigmoid", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["logSigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSoftmax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["logSoftmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSumExp", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["logSumExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalAnd", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["logicalAnd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalNot", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["logicalNot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalOr", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["logicalOr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalXor", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["logicalXor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matMul", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["matMul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "max", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["max"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["maxPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["maxPool3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPoolWithArgmax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["maxPoolWithArgmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["maximum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mean", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["mean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "min", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["min"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["minimum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mirrorPad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["mirrorPad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["mod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moments", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["moments"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["mul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multiRNNCell", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["multiRNNCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multinomial", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["multinomial"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "neg", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["neg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqual", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["notEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "oneHot", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["oneHot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ones", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ones"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onesLike", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["onesLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "outerProduct", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["outerProduct"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["pad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad1d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["pad1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["pad2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["pad3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad4d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["pad4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pool", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["pool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["pow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prelu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["prelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "print", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["print"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prod", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["prod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rand", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["rand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomGamma", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["randomGamma"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomNormal", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["randomNormal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomUniform", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["randomUniform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["range"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "real", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["real"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reciprocal", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["reciprocal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["relu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu6", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["relu6"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reshape", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["reshape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["reverse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse1d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["reverse1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["reverse2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["reverse3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse4d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["reverse4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "round", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["round"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rsqrt", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["rsqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scalar", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["scalar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "selu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["selu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "separableConv2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["separableConv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setdiff1dAsync", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["setdiff1dAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sigmoid", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sinh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["slice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice1d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["slice1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["slice2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["slice3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice4d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["slice4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softmax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["softmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softplus", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["softplus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spaceToBatchND", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["spaceToBatchND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fft", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["fft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ifft", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ifft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "irfft", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["irfft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rfft", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["rfft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "split", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["split"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sqrt", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "square", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["square"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifference", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["squaredDifference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squeeze", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["squeeze"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stack", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["stack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "step", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["step"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stridedSlice", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["stridedSlice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tan", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tanh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor1d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor2d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor3d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor4d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor5d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor5d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor6d", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor6d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tile", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "topk", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["topk"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "truncatedNormal", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["truncatedNormal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unique", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["unique"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unsortedSegmentSum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["unsortedSegmentSum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstack", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["unstack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variable", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["variable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "where", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["where"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "whereAsync", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["whereAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zeros", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["zeros"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zerosLike", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["zerosLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "booleanMaskAsync", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["booleanMaskAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equalStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["equalStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqualStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["greaterEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["greaterStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqualStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["lessEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["lessStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqualStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["notEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["addStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["divStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximumStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["maximumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimumStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["minimumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["modStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mulStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["mulStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "powStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["powStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifferenceStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["squaredDifferenceStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "subStrict", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["subStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["transpose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "norm", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["norm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "movingAverage", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["movingAverage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scatterND", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["scatterND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sparseToDense", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["sparseToDense"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gatherND", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["gatherND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dropout", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["dropout"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enclosingPowerOfTwo", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["enclosingPowerOfTwo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosineWindow", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["cosineWindow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inTopKAsync", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["inTopKAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "op", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["op"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OP_SCOPE_SUFFIX", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["OP_SCOPE_SUFFIX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "image", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["image"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linalg", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["linalg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "losses", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["losses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spectral", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["spectral"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fused", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["fused"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "signal", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["signal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reduction", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Reduction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "train", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["train"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enableProdMode", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["enableProdMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enableDebugMode", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["enableDebugMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disableDeprecationWarnings", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["disableDeprecationWarnings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecationWarn", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["deprecationWarn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disposeVariables", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["disposeVariables"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "engine", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["engine"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memory", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["memory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "profile", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["profile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tidy", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tidy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dispose", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["dispose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keep", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["keep"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "time", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["time"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setBackend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["setBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ready", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ready"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getBackend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["getBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeBackend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["removeBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findBackend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["findBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findBackendFactory", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["findBackendFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerBackend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["registerBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "backend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["backend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setPlatform", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["setPlatform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getKernel", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["getKernel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getGradient", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["getGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getKernelsForBackend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["getKernelsForBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerKernel", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["registerKernel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerGradient", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["registerGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unregisterKernel", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["unregisterKernel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unregisterGradient", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["unregisterGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copyRegisteredKernels", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["copyRegisteredKernels"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "customGrad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["customGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "grad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["grad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "grads", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["grads"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "valueAndGrad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["valueAndGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "valueAndGrads", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["valueAndGrads"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variableGrads", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["variableGrads"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Environment", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Environment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "env", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["env"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ENV", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ENV"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "version_core", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["version_core"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nextFrame", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["nextFrame"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "browser", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["browser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "io", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["io"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "math", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["math"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serialization", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["serialization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "test_util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["test_util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "backend_util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["backend_util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor_util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["tensor_util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice_util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["slice_util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gather_util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["gather_util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scatter_util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["scatter_util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "device_util", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["device_util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "kernel_impls", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["kernel_impls"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KernelBackend", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["KernelBackend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataStorage", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["DataStorage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Abs", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Abs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Acos", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Acos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Acosh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Acosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Add", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Add"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AddN", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AddN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "All", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["All"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Any", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArgMax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ArgMax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArgMin", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ArgMin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Asin", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Asin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Asinh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Asinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Atan", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Atan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Atanh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Atanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Atan2", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Atan2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPool", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AvgPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPoolBackprop", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AvgPoolBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPool3D", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AvgPool3D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AvgPool3DBackprop", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["AvgPool3DBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BatchMatMul", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["BatchMatMul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BatchToSpaceND", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["BatchToSpaceND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BroadcastTo", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["BroadcastTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cast", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Cast"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Ceil", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Ceil"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ClipByValue", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ClipByValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Complex", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Complex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Concat", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Concat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv2D", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Conv2D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv2DBackpropFilter", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Conv2DBackpropFilter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv2DBackpropInput", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Conv2DBackpropInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv3D", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Conv3D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv3DBackpropFilterV2", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Conv3DBackpropFilterV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Conv3DBackpropInputV2", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Conv3DBackpropInputV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cos", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Cos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cosh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Cosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cumsum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Cumsum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CropAndResize", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["CropAndResize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthToSpace", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["DepthToSpace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNative", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["DepthwiseConv2dNative"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNativeBackpropFilter", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["DepthwiseConv2dNativeBackpropFilter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNativeBackpropInput", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["DepthwiseConv2dNativeBackpropInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Diag", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Diag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dilation2D", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Dilation2D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dilation2DBackpropInput", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Dilation2DBackpropInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dilation2DBackpropFilter", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Dilation2DBackpropFilter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Div", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Div"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Elu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Elu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EluGrad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["EluGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Erf", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Erf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Equal", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Equal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Exp", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Exp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Expm1", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Expm1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FFT", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["FFT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Fill"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlipLeftRight", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["FlipLeftRight"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Floor", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Floor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FloorDiv", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["FloorDiv"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FusedBatchNorm", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["FusedBatchNorm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GatherV2", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["GatherV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GatherNd", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["GatherNd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Greater", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Greater"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GreaterEqual", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["GreaterEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Identity", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Identity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IFFT", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["IFFT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Imag", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Imag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsFinite", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["IsFinite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsInf", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["IsInf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsNan", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["IsNan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Less", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Less"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LessEqual", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LessEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LinSpace", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LinSpace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Log", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Log"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Log1p", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Log1p"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogicalAnd", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LogicalAnd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogicalNot", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LogicalNot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogicalOr", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LogicalOr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogSoftmax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LogSoftmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LRN", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LRN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LRNBackprop", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["LRNBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Max", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Max"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Maximum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Maximum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPool", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["MaxPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPoolBackprop", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["MaxPoolBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPool3D", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["MaxPool3D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPool3DBackprop", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["MaxPool3DBackprop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxPoolWithArgmax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["MaxPoolWithArgmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Mean", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Mean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Min", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Min"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Minimum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Minimum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MirrorPad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["MirrorPad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Mod", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Mod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Multiply", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Multiply"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Negate", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Negate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NotEqual", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["NotEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV3", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["NonMaxSuppressionV3"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV4", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["NonMaxSuppressionV4"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV5", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["NonMaxSuppressionV5"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OnesLike", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["OnesLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OneHot", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["OneHot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PadV2", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["PadV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pool", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Pool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pow", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Pow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Prelu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Prelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Prod", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Prod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Range", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Range"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Real", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Real"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reciprocal", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Reciprocal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Relu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Relu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reshape", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Reshape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeNearestNeighbor", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ResizeNearestNeighbor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeNearestNeighborGrad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ResizeNearestNeighborGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeBilinear", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ResizeBilinear"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeBilinearGrad", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ResizeBilinearGrad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Relu6", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Relu6"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reverse", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Reverse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Round", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Round"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rsqrt", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Rsqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ScatterNd", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ScatterNd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SelectV2", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["SelectV2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Selu", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Selu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Slice", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Slice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sin", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Sin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sinh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Sinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sign", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Sign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sigmoid", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Sigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Softplus", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Softplus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sqrt", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Sqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Sum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpaceToBatchND", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["SpaceToBatchND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitV", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["SplitV"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Softmax", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Softmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SquaredDifference", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["SquaredDifference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Square", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Square"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sub", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Sub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SparseToDense", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["SparseToDense"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StridedSlice", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["StridedSlice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tan", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Tan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tanh", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Tanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Tile", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Tile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TopK", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["TopK"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transpose", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Transpose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Unique", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Unique"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Unpack", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Unpack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnsortedSegmentSum", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["UnsortedSegmentSum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZerosLike", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["ZerosLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Step", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["Step"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FromPixels", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["FromPixels"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RotateWithOffset", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["RotateWithOffset"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_FusedMatMul", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["_FusedMatMul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FusedConv2D", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["FusedConv2D"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FusedDepthwiseConv2D", function() { return _base__WEBPACK_IMPORTED_MODULE_1__["FusedDepthwiseConv2D"]; });

/* harmony import */ var _register_all_gradients__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./register_all_gradients */ "./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js");
/* harmony import */ var _public_chained_ops_register_all_chained_ops__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./public/chained_ops/register_all_chained_ops */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Required side effectful code.

// All exports from this package should be in base.

// Register all the gradients.

// Import all op chainers and add type info to Tensor.

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js ***!
  \*********************************************************************/
/*! exports provided: BrowserDownloads, browserDownloadsRouter, browserDownloads, browserFiles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserDownloads", function() { return BrowserDownloads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browserDownloadsRouter", function() { return browserDownloadsRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browserDownloads", function() { return browserDownloads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browserFiles", function() { return browserFiles; });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * IOHandlers related to files, such as browser-triggered file downloads,
 * user-selected files in browser.
 */




const DEFAULT_FILE_NAME_PREFIX = 'model';
const DEFAULT_JSON_EXTENSION_NAME = '.json';
const DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';
function defer(f) {
    return new Promise(resolve => setTimeout(resolve)).then(f);
}
class BrowserDownloads {
    constructor(fileNamePrefix) {
        if (!Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER')) {
            // TODO(cais): Provide info on what IOHandlers are available under the
            //   current environment.
            throw new Error('browserDownloads() cannot proceed because the current environment ' +
                'is not a browser.');
        }
        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {
            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
        }
        if (fileNamePrefix == null || fileNamePrefix.length === 0) {
            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
        }
        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
        this.weightDataFileName =
            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
    }
    async save(modelArtifacts) {
        if (typeof (document) === 'undefined') {
            throw new Error('Browser downloads are not supported in ' +
                'this environment since `document` is not present');
        }
        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserDownloads.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        else {
            const weightsManifest = [{
                    paths: ['./' + this.weightDataFileName],
                    weights: modelArtifacts.weightSpecs
                }];
            const modelTopologyAndWeightManifest = {
                modelTopology: modelArtifacts.modelTopology,
                format: modelArtifacts.format,
                generatedBy: modelArtifacts.generatedBy,
                convertedBy: modelArtifacts.convertedBy,
                weightsManifest
            };
            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));
            // If anchor elements are not provided, create them without attaching them
            // to parents, so that the downloaded file names can be controlled.
            const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :
                this.jsonAnchor;
            jsonAnchor.download = this.modelTopologyFileName;
            jsonAnchor.href = modelTopologyAndWeightManifestURL;
            // Trigger downloads by evoking a click event on the download anchors.
            // When multiple downloads are started synchronously, Firefox will only
            // save the last one.
            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));
            if (modelArtifacts.weightData != null) {
                const weightDataAnchor = this.weightDataAnchor == null ?
                    document.createElement('a') :
                    this.weightDataAnchor;
                weightDataAnchor.download = this.weightDataFileName;
                weightDataAnchor.href = weightsURL;
                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));
            }
            return { modelArtifactsInfo: Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["getModelArtifactsInfoForJSON"])(modelArtifacts) };
        }
    }
}
BrowserDownloads.URL_SCHEME = 'downloads://';
class BrowserFiles {
    constructor(files) {
        if (files == null || files.length < 1) {
            throw new Error(`When calling browserFiles, at least 1 file is required, ` +
                `but received ${files}`);
        }
        this.files = files;
    }
    async load() {
        const jsonFile = this.files[0];
        const weightFiles = this.files.slice(1);
        return new Promise((resolve, reject) => {
            const jsonReader = new FileReader();
            jsonReader.onload = (event) => {
                // tslint:disable-next-line:no-any
                const modelJSON = JSON.parse(event.target.result);
                const modelTopology = modelJSON.modelTopology;
                if (modelTopology == null) {
                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));
                    return;
                }
                if (weightFiles.length === 0) {
                    resolve({ modelTopology });
                }
                const weightsManifest = modelJSON.weightsManifest;
                if (weightsManifest == null) {
                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));
                    return;
                }
                let pathToFile;
                try {
                    pathToFile =
                        this.checkManifestAndWeightFiles(weightsManifest, weightFiles);
                }
                catch (err) {
                    reject(err);
                    return;
                }
                const weightSpecs = [];
                const paths = [];
                const perFileBuffers = [];
                weightsManifest.forEach(weightsGroup => {
                    weightsGroup.paths.forEach(path => {
                        paths.push(path);
                        perFileBuffers.push(null);
                    });
                    weightSpecs.push(...weightsGroup.weights);
                });
                weightsManifest.forEach(weightsGroup => {
                    weightsGroup.paths.forEach(path => {
                        const weightFileReader = new FileReader();
                        weightFileReader.onload = (event) => {
                            // tslint:disable-next-line:no-any
                            const weightData = event.target.result;
                            const index = paths.indexOf(path);
                            perFileBuffers[index] = weightData;
                            if (perFileBuffers.indexOf(null) === -1) {
                                resolve({
                                    modelTopology,
                                    weightSpecs,
                                    weightData: Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["concatenateArrayBuffers"])(perFileBuffers),
                                    format: modelJSON.format,
                                    generatedBy: modelJSON.generatedBy,
                                    convertedBy: modelJSON.convertedBy,
                                    userDefinedMetadata: modelJSON.userDefinedMetadata
                                });
                            }
                        };
                        weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);
                        weightFileReader.readAsArrayBuffer(pathToFile[path]);
                    });
                });
            };
            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +
                `from file '${jsonFile.name}'. BrowserFiles supports loading ` +
                `Keras-style tf.Model artifacts only.`);
            jsonReader.readAsText(jsonFile);
        });
    }
    /**
     * Check the compatibility between weights manifest and weight files.
     */
    checkManifestAndWeightFiles(manifest, files) {
        const basenames = [];
        const fileNames = files.map(file => Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["basename"])(file.name));
        const pathToFile = {};
        for (const group of manifest) {
            group.paths.forEach(path => {
                const pathBasename = Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["basename"])(path);
                if (basenames.indexOf(pathBasename) !== -1) {
                    throw new Error(`Duplicate file basename found in weights manifest: ` +
                        `'${pathBasename}'`);
                }
                basenames.push(pathBasename);
                if (fileNames.indexOf(pathBasename) === -1) {
                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);
                }
                else {
                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];
                }
            });
        }
        if (basenames.length !== files.length) {
            throw new Error(`Mismatch in the number of files in weights manifest ` +
                `(${basenames.length}) and the number of weight files provided ` +
                `(${files.length}).`);
        }
        return pathToFile;
    }
}
const browserDownloadsRouter = (url) => {
    if (!Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER')) {
        return null;
    }
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {
            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
        }
        else {
            return null;
        }
    }
};
_router_registry__WEBPACK_IMPORTED_MODULE_3__["IORouterRegistry"].registerSaveRouter(browserDownloadsRouter);
/**
 * Creates an IOHandler that triggers file downloads from the browser.
 *
 * The returned `IOHandler` instance can be used as model exporting methods such
 * as `tf.Model.save` and supports only saving.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * const saveResult = await model.save('downloads://mymodel');
 * // This will trigger downloading of two files:
 * //   'mymodel.json' and 'mymodel.weights.bin'.
 * console.log(saveResult);
 * ```
 *
 * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
 *   `tf.Model`, `fileNamePrefix` should follow either of the following two
 *   formats:
 *   1. `null` or `undefined`, in which case the default file
 *      names will be used:
 *      - 'model.json' for the JSON file containing the model topology and
 *        weights manifest.
 *      - 'model.weights.bin' for the binary file containing the binary weight
 *        values.
 *   2. A single string or an Array of a single string, as the file name prefix.
 *      For example, if `'foo'` is provided, the downloaded JSON
 *      file and binary weights file will be named 'foo.json' and
 *      'foo.weights.bin', respectively.
 * @param config Additional configuration for triggering downloads.
 * @returns An instance of `BrowserDownloads` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
function browserDownloads(fileNamePrefix = 'model') {
    return new BrowserDownloads(fileNamePrefix);
}
/**
 * Creates an IOHandler that loads model artifacts from user-selected files.
 *
 * This method can be used for loading from files such as user-selected files
 * in the browser.
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * // Note: This code snippet won't run properly without the actual file input
 * //   elements in the HTML DOM.
 *
 * // Suppose there are two HTML file input (`<input type="file" ...>`)
 * // elements.
 * const uploadJSONInput = document.getElementById('upload-json');
 * const uploadWeightsInput = document.getElementById('upload-weights');
 * const model = await tf.loadLayersModel(tf.io.browserFiles(
 *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
 * ```
 *
 * @param files `File`s to load from. Currently, this function supports only
 *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
 *   which an `Array` of `File`s is expected (in that order):
 *   - A JSON file containing the model topology and weight manifest.
 *   - Optionally, One or more binary files containing the binary weights.
 *     These files must have names that match the paths in the `weightsManifest`
 *     contained by the aforementioned JSON file, or errors will be thrown
 *     during loading. These weights files have the same format as the ones
 *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
 *     Python PIP package. If no weights files are provided, only the model
 *     topology will be loaded from the JSON file above.
 * @returns An instance of `Files` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
function browserFiles(files) {
    return new BrowserFiles(files);
}
//# sourceMappingURL=browser_files.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/http.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/http.js ***!
  \************************************************************/
/*! exports provided: HTTPRequest, parseUrl, isHTTPScheme, httpRouter, http, browserHTTPRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTPRequest", function() { return HTTPRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return parseUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHTTPScheme", function() { return isHTTPScheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "httpRouter", function() { return httpRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "http", function() { return http; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browserHTTPRequest", function() { return browserHTTPRequest; });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/* harmony import */ var _weights_loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./weights_loader */ "./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * IOHandler implementations based on HTTP requests in the web browser.
 *
 * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 */





const OCTET_STREAM_MIME_TYPE = 'application/octet-stream';
const JSON_TYPE = 'application/json';
class HTTPRequest {
    constructor(path, loadOptions) {
        this.DEFAULT_METHOD = 'POST';
        if (loadOptions == null) {
            loadOptions = {};
        }
        this.weightPathPrefix = loadOptions.weightPathPrefix;
        this.onProgress = loadOptions.onProgress;
        this.weightUrlConverter = loadOptions.weightUrlConverter;
        if (loadOptions.fetchFunc != null) {
            Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +
                '`fetch` (see ' +
                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');
            this.fetch = loadOptions.fetchFunc;
        }
        else {
            this.fetch = Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().platform.fetch;
        }
        Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +
            'empty.');
        if (Array.isArray(path)) {
            Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(path.length === 2, () => 'URL paths for http must have a length of 2, ' +
                `(actual length is ${path.length}).`);
        }
        this.path = path;
        if (loadOptions.requestInit != null &&
            loadOptions.requestInit.body != null) {
            throw new Error('requestInit is expected to have no pre-existing body, but has one.');
        }
        this.requestInit = loadOptions.requestInit || {};
    }
    async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
        init.body = new FormData();
        const weightsManifest = [{
                paths: ['./model.weights.bin'],
                weights: modelArtifacts.weightSpecs,
            }];
        const modelTopologyAndWeightManifest = {
            modelTopology: modelArtifacts.modelTopology,
            format: modelArtifacts.format,
            generatedBy: modelArtifacts.generatedBy,
            convertedBy: modelArtifacts.convertedBy,
            userDefinedMetadata: modelArtifacts.userDefinedMetadata,
            weightsManifest
        };
        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');
        if (modelArtifacts.weightData != null) {
            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');
        }
        const response = await this.fetch(this.path, init);
        if (response.ok) {
            return {
                modelArtifactsInfo: Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["getModelArtifactsInfoForJSON"])(modelArtifacts),
                responses: [response],
            };
        }
        else {
            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +
                `${response.status}.`);
        }
    }
    /**
     * Load model artifacts via HTTP request(s).
     *
     * See the documentation to `tf.io.http` for details on the saved
     * artifacts.
     *
     * @returns The loaded model artifacts (if loading succeeds).
     */
    async load() {
        const modelConfigRequest = await this.fetch(this.path, this.requestInit);
        if (!modelConfigRequest.ok) {
            throw new Error(`Request to ${this.path} failed with status code ` +
                `${modelConfigRequest.status}. Please verify this URL points to ` +
                `the model JSON of the model to load.`);
        }
        let modelConfig;
        try {
            modelConfig = await modelConfigRequest.json();
        }
        catch (e) {
            let message = `Failed to parse model JSON of response from ${this.path}.`;
            // TODO(nsthorat): Remove this after some time when we're comfortable that
            // .pb files are mostly gone.
            if (this.path.endsWith('.pb')) {
                message += ' Your path contains a .pb file extension. ' +
                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +
                    'in favor of .json models. You can re-convert your Python ' +
                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +
                    'or you can convert your.pb models with the \'pb2json\'' +
                    'NPM script in the tensorflow/tfjs-converter repository.';
            }
            else {
                message += ' Please make sure the server is serving valid ' +
                    'JSON for this request.';
            }
            throw new Error(message);
        }
        const modelTopology = modelConfig.modelTopology;
        const weightsManifest = modelConfig.weightsManifest;
        const generatedBy = modelConfig.generatedBy;
        const convertedBy = modelConfig.convertedBy;
        const format = modelConfig.format;
        const userDefinedMetadata = modelConfig.userDefinedMetadata;
        // We do not allow both modelTopology and weightsManifest to be missing.
        if (modelTopology == null && weightsManifest == null) {
            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +
                `topology or manifest for weights.`);
        }
        let weightSpecs;
        let weightData;
        if (weightsManifest != null) {
            const results = await this.loadWeights(weightsManifest);
            [weightSpecs, weightData] = results;
        }
        const artifacts = {
            modelTopology,
            weightSpecs,
            weightData,
            userDefinedMetadata,
            generatedBy,
            convertedBy,
            format
        };
        const initializer = modelConfig.modelInitializer;
        if (initializer) {
            artifacts.modelInitializer = initializer;
        }
        return artifacts;
    }
    async loadWeights(weightsManifest) {
        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
        const [prefix, suffix] = parseUrl(weightPath);
        const pathPrefix = this.weightPathPrefix || prefix;
        const weightSpecs = [];
        for (const entry of weightsManifest) {
            weightSpecs.push(...entry.weights);
        }
        const fetchURLs = [];
        const urlPromises = [];
        for (const weightsGroup of weightsManifest) {
            for (const path of weightsGroup.paths) {
                if (this.weightUrlConverter != null) {
                    urlPromises.push(this.weightUrlConverter(path));
                }
                else {
                    fetchURLs.push(pathPrefix + path + suffix);
                }
            }
        }
        if (this.weightUrlConverter) {
            fetchURLs.push(...await Promise.all(urlPromises));
        }
        const buffers = await Object(_weights_loader__WEBPACK_IMPORTED_MODULE_4__["loadWeightsAsArrayBuffer"])(fetchURLs, {
            requestInit: this.requestInit,
            fetchFunc: this.fetch,
            onProgress: this.onProgress
        });
        return [weightSpecs, Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["concatenateArrayBuffers"])(buffers)];
    }
}
HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
/**
 * Extract the prefix and suffix of the url, where the prefix is the path before
 * the last file, and suffix is the search params after the last file.
 * ```
 * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
 * [prefix, suffix] = parseUrl(url)
 * // prefix = 'http://tfhub.dev/model/1/'
 * // suffix = '?tfjs-format=file'
 * ```
 * @param url the model url to be parsed.
 */
function parseUrl(url) {
    const lastSlash = url.lastIndexOf('/');
    const lastSearchParam = url.lastIndexOf('?');
    const prefix = url.substring(0, lastSlash);
    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';
    return [prefix + '/', suffix];
}
function isHTTPScheme(url) {
    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
}
const httpRouter = (url, loadOptions) => {
    if (typeof fetch === 'undefined' &&
        (loadOptions == null || loadOptions.fetchFunc == null)) {
        // `http` uses `fetch` or `node-fetch`, if one wants to use it in
        // an environment that is not the browser or node they have to setup a
        // global fetch polyfill.
        return null;
    }
    else {
        let isHTTP = true;
        if (Array.isArray(url)) {
            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));
        }
        else {
            isHTTP = isHTTPScheme(url);
        }
        if (isHTTP) {
            return http(url, loadOptions);
        }
    }
    return null;
};
_router_registry__WEBPACK_IMPORTED_MODULE_3__["IORouterRegistry"].registerSaveRouter(httpRouter);
_router_registry__WEBPACK_IMPORTED_MODULE_3__["IORouterRegistry"].registerLoadRouter(httpRouter);
/**
 * Creates an IOHandler subtype that sends model artifacts to HTTP server.
 *
 * An HTTP request of the `multipart/form-data` mime type will be sent to the
 * `path` URL. The form data includes artifacts that represent the topology
 * and/or weights of the model. In the case of Keras-style `tf.Model`, two
 * blobs (files) exist in form-data:
 *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
 *   - A binary weights file consisting of the concatenated weight values.
 * These files are in the same format as the one generated by
 * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
 *
 * The following code snippet exemplifies the client-side code that uses this
 * function:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save(tf.io.http(
 *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
 * console.log(saveResult);
 * ```
 *
 * If the default `POST` method is to be used, without any custom parameters
 * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
 *
 * ```js
 * const saveResult = await model.save('http://model-server:5000/upload');
 * ```
 *
 * The following GitHub Gist
 * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
 * implements a server based on [flask](https://github.com/pallets/flask) that
 * can receive the request. Upon receiving the model artifacts via the requst,
 * this particular server reconsistutes instances of [Keras
 * Models](https://keras.io/models/model/) in memory.
 *
 *
 * @param path A URL path to the model.
 *   Can be an absolute HTTP path (e.g.,
 *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
 *   './model-upload').
 * @param requestInit Request configurations to be used when sending
 *    HTTP request to server using `fetch`. It can contain fields such as
 *    `method`, `credentials`, `headers`, `mode`, etc. See
 *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
 *    for more information. `requestInit` must not have a body, because the
 * body will be set by TensorFlow.js. File blobs representing the model
 * topology (filename: 'model.json') and the weights of the model (filename:
 * 'model.weights.bin') will be appended to the body. If `requestInit` has a
 * `body`, an Error will be thrown.
 * @param loadOptions Optional configuration for the loading. It includes the
 *   following fields:
 *   - weightPathPrefix Optional, this specifies the path prefix for weight
 *     files, by default this is calculated from the path param.
 *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
 *     the `fetch` from node-fetch can be used here.
 *   - onProgress Optional, progress callback function, fired periodically
 *     before the load is completed.
 * @returns An instance of `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
function http(path, loadOptions) {
    return new HTTPRequest(path, loadOptions);
}
/**
 * Deprecated. Use `tf.io.http`.
 * @param path
 * @param loadOptions
 */
function browserHTTPRequest(path, loadOptions) {
    return http(path, loadOptions);
}
//# sourceMappingURL=http.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js ***!
  \******************************************************************/
/*! exports provided: deleteDatabase, BrowserIndexedDB, indexedDBRouter, browserIndexedDB, BrowserIndexedDBManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteDatabase", function() { return deleteDatabase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserIndexedDB", function() { return BrowserIndexedDB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexedDBRouter", function() { return indexedDBRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browserIndexedDB", function() { return browserIndexedDB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserIndexedDBManager", function() { return BrowserIndexedDBManager; });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const DATABASE_NAME = 'tensorflowjs';
const DATABASE_VERSION = 1;
// Model data and ModelArtifactsInfo (metadata) are stored in two separate
// stores for efficient access of the list of stored models and their metadata.
// 1. The object store for model data: topology, weights and weight manifests.
const MODEL_STORE_NAME = 'models_store';
// 2. The object store for ModelArtifactsInfo, including meta-information such
//    as the type of topology (JSON vs binary), byte size of the topology, byte
//    size of the weights, etc.
const INFO_STORE_NAME = 'model_info_store';
/**
 * Delete the entire database for tensorflow.js, including the models store.
 */
async function deleteDatabase() {
    const idbFactory = getIndexedDBFactory();
    return new Promise((resolve, reject) => {
        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);
        deleteRequest.onsuccess = () => resolve();
        deleteRequest.onerror = error => reject(error);
    });
}
function getIndexedDBFactory() {
    if (!Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER')) {
        // TODO(cais): Add more info about what IOHandler subtypes are available.
        //   Maybe point to a doc page on the web and/or automatically determine
        //   the available IOHandlers and print them in the error message.
        throw new Error('Failed to obtain IndexedDB factory because the current environment' +
            'is not a web browser.');
    }
    // tslint:disable-next-line:no-any
    const theWindow = typeof window === 'undefined' ? self : window;
    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||
        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||
        theWindow.shimIndexedDB;
    if (factory == null) {
        throw new Error('The current browser does not appear to support IndexedDB.');
    }
    return factory;
}
function setUpDatabase(openRequest) {
    const db = openRequest.result;
    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });
    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });
}
/**
 * IOHandler subclass: Browser IndexedDB.
 *
 * See the doc string of `browserIndexedDB` for more details.
 */
class BrowserIndexedDB {
    constructor(modelPath) {
        this.indexedDB = getIndexedDBFactory();
        if (modelPath == null || !modelPath) {
            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
        }
        this.modelPath = modelPath;
    }
    async save(modelArtifacts) {
        // TODO(cais): Support saving GraphDef models.
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        return this.databaseAction(this.modelPath, modelArtifacts);
    }
    async load() {
        return this.databaseAction(this.modelPath);
    }
    /**
     * Perform database action to put model artifacts into or read model artifacts
     * from IndexedDB object store.
     *
     * Whether the action is put or get depends on whether `modelArtifacts` is
     * specified. If it is specified, the action will be put; otherwise the action
     * will be get.
     *
     * @param modelPath A unique string path for the model.
     * @param modelArtifacts If specified, it will be the model artifacts to be
     *   stored in IndexedDB.
     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
     *   of `ModelArtifacts`, if the action is get.
     */
    databaseAction(modelPath, modelArtifacts) {
        return new Promise((resolve, reject) => {
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
            openRequest.onsuccess = () => {
                const db = openRequest.result;
                if (modelArtifacts == null) {
                    // Read model out from object store.
                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');
                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                    const getRequest = modelStore.get(this.modelPath);
                    getRequest.onsuccess = () => {
                        if (getRequest.result == null) {
                            db.close();
                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +
                                `in IndexedDB.`));
                        }
                        else {
                            resolve(getRequest.result.modelArtifacts);
                        }
                    };
                    getRequest.onerror = error => {
                        db.close();
                        return reject(getRequest.error);
                    };
                    modelTx.oncomplete = () => db.close();
                }
                else {
                    // Put model into object store.
                    const modelArtifactsInfo = Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["getModelArtifactsInfoForJSON"])(modelArtifacts);
                    // First, put ModelArtifactsInfo into info store.
                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);
                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });
                    let modelTx;
                    putInfoRequest.onsuccess = () => {
                        // Second, put model data into model store.
                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                        const putModelRequest = modelStore.put({
                            modelPath: this.modelPath,
                            modelArtifacts,
                            modelArtifactsInfo
                        });
                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });
                        putModelRequest.onerror = error => {
                            // If the put-model request fails, roll back the info entry as
                            // well.
                            infoStore = infoTx.objectStore(INFO_STORE_NAME);
                            const deleteInfoRequest = infoStore.delete(this.modelPath);
                            deleteInfoRequest.onsuccess = () => {
                                db.close();
                                return reject(putModelRequest.error);
                            };
                            deleteInfoRequest.onerror = error => {
                                db.close();
                                return reject(putModelRequest.error);
                            };
                        };
                    };
                    putInfoRequest.onerror = error => {
                        db.close();
                        return reject(putInfoRequest.error);
                    };
                    infoTx.oncomplete = () => {
                        if (modelTx == null) {
                            db.close();
                        }
                        else {
                            modelTx.oncomplete = () => db.close();
                        }
                    };
                }
            };
            openRequest.onerror = error => reject(openRequest.error);
        });
    }
}
BrowserIndexedDB.URL_SCHEME = 'indexeddb://';
const indexedDBRouter = (url) => {
    if (!Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER')) {
        return null;
    }
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {
            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
        }
        else {
            return null;
        }
    }
};
_router_registry__WEBPACK_IMPORTED_MODULE_3__["IORouterRegistry"].registerSaveRouter(indexedDBRouter);
_router_registry__WEBPACK_IMPORTED_MODULE_3__["IORouterRegistry"].registerLoadRouter(indexedDBRouter);
/**
 * Creates a browser IndexedDB IOHandler for saving and loading models.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save('indexeddb://MyModel'));
 * console.log(saveResult);
 * ```
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
 *   which can be used with, e.g., `tf.Model.save`.
 */
function browserIndexedDB(modelPath) {
    return new BrowserIndexedDB(modelPath);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?
        key.slice(BrowserIndexedDB.URL_SCHEME.length) :
        key;
}
class BrowserIndexedDBManager {
    constructor() {
        this.indexedDB = getIndexedDBFactory();
    }
    async listModels() {
        return new Promise((resolve, reject) => {
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
            openRequest.onsuccess = () => {
                const db = openRequest.result;
                const tx = db.transaction(INFO_STORE_NAME, 'readonly');
                const store = tx.objectStore(INFO_STORE_NAME);
                // tslint:disable:max-line-length
                // Need to cast `store` as `any` here because TypeScript's DOM
                // library does not have the `getAll()` method even though the
                // method is supported in the latest version of most mainstream
                // browsers:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
                // tslint:enable:max-line-length
                // tslint:disable-next-line:no-any
                const getAllInfoRequest = store.getAll();
                getAllInfoRequest.onsuccess = () => {
                    const out = {};
                    for (const item of getAllInfoRequest.result) {
                        out[item.modelPath] = item.modelArtifactsInfo;
                    }
                    resolve(out);
                };
                getAllInfoRequest.onerror = error => {
                    db.close();
                    return reject(getAllInfoRequest.error);
                };
                tx.oncomplete = () => db.close();
            };
            openRequest.onerror = error => reject(openRequest.error);
        });
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        return new Promise((resolve, reject) => {
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
            openRequest.onsuccess = () => {
                const db = openRequest.result;
                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                const infoStore = infoTx.objectStore(INFO_STORE_NAME);
                const getInfoRequest = infoStore.get(path);
                let modelTx;
                getInfoRequest.onsuccess = () => {
                    if (getInfoRequest.result == null) {
                        db.close();
                        return reject(new Error(`Cannot find model with path '${path}' ` +
                            `in IndexedDB.`));
                    }
                    else {
                        // First, delete the entry in the info store.
                        const deleteInfoRequest = infoStore.delete(path);
                        const deleteModelData = () => {
                            // Second, delete the entry in the model store.
                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                            const deleteModelRequest = modelStore.delete(path);
                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);
                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);
                        };
                        // Proceed with deleting model data regardless of whether deletion
                        // of info data succeeds or not.
                        deleteInfoRequest.onsuccess = deleteModelData;
                        deleteInfoRequest.onerror = error => {
                            deleteModelData();
                            db.close();
                            return reject(getInfoRequest.error);
                        };
                    }
                };
                getInfoRequest.onerror = error => {
                    db.close();
                    return reject(getInfoRequest.error);
                };
                infoTx.oncomplete = () => {
                    if (modelTx == null) {
                        db.close();
                    }
                    else {
                        modelTx.oncomplete = () => db.close();
                    }
                };
            };
            openRequest.onerror = error => reject(openRequest.error);
        });
    }
}
//# sourceMappingURL=indexed_db.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/io.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/io.js ***!
  \**********************************************************/
/*! exports provided: copyModel, listModels, moveModel, removeModel, browserFiles, browserHTTPRequest, concatenateArrayBuffers, decodeWeights, encodeWeights, fromMemory, getLoadHandlers, getModelArtifactsInfoForJSON, getSaveHandlers, http, isHTTPScheme, loadWeights, registerLoadRouter, registerSaveRouter, weightsLoaderFactory, withSaveHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _indexed_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./indexed_db */ "./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js");
/* harmony import */ var _local_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local_storage */ "./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js");
/* harmony import */ var _browser_files__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./browser_files */ "./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "browserFiles", function() { return _browser_files__WEBPACK_IMPORTED_MODULE_2__["browserFiles"]; });

/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./http */ "./node_modules/@tensorflow/tfjs-core/dist/io/http.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "browserHTTPRequest", function() { return _http__WEBPACK_IMPORTED_MODULE_3__["browserHTTPRequest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "http", function() { return _http__WEBPACK_IMPORTED_MODULE_3__["http"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isHTTPScheme", function() { return _http__WEBPACK_IMPORTED_MODULE_3__["isHTTPScheme"]; });

/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concatenateArrayBuffers", function() { return _io_utils__WEBPACK_IMPORTED_MODULE_4__["concatenateArrayBuffers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "decodeWeights", function() { return _io_utils__WEBPACK_IMPORTED_MODULE_4__["decodeWeights"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "encodeWeights", function() { return _io_utils__WEBPACK_IMPORTED_MODULE_4__["encodeWeights"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getModelArtifactsInfoForJSON", function() { return _io_utils__WEBPACK_IMPORTED_MODULE_4__["getModelArtifactsInfoForJSON"]; });

/* harmony import */ var _passthrough__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./passthrough */ "./node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromMemory", function() { return _passthrough__WEBPACK_IMPORTED_MODULE_5__["fromMemory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withSaveHandler", function() { return _passthrough__WEBPACK_IMPORTED_MODULE_5__["withSaveHandler"]; });

/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getLoadHandlers", function() { return _router_registry__WEBPACK_IMPORTED_MODULE_6__["getLoadHandlers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSaveHandlers", function() { return _router_registry__WEBPACK_IMPORTED_MODULE_6__["getSaveHandlers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerLoadRouter", function() { return _router_registry__WEBPACK_IMPORTED_MODULE_6__["registerLoadRouter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerSaveRouter", function() { return _router_registry__WEBPACK_IMPORTED_MODULE_6__["registerSaveRouter"]; });

/* harmony import */ var _weights_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./weights_loader */ "./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadWeights", function() { return _weights_loader__WEBPACK_IMPORTED_MODULE_7__["loadWeights"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "weightsLoaderFactory", function() { return _weights_loader__WEBPACK_IMPORTED_MODULE_7__["weightsLoaderFactory"]; });

/* harmony import */ var _model_management__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model_management */ "./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copyModel", function() { return _model_management__WEBPACK_IMPORTED_MODULE_8__["copyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "listModels", function() { return _model_management__WEBPACK_IMPORTED_MODULE_8__["listModels"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moveModel", function() { return _model_management__WEBPACK_IMPORTED_MODULE_8__["moveModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeModel", function() { return _model_management__WEBPACK_IMPORTED_MODULE_8__["removeModel"]; });

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Importing local_storage and indexed_db is necessary for the routers to be
// registered.










//# sourceMappingURL=io.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js ***!
  \****************************************************************/
/*! exports provided: encodeWeights, decodeWeights, concatenateTypedArrays, stringByteLength, arrayBufferToBase64String, base64StringToArrayBuffer, concatenateArrayBuffers, basename, getModelArtifactsInfoForJSON, getFloat16Decoder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeWeights", function() { return encodeWeights; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeWeights", function() { return decodeWeights; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatenateTypedArrays", function() { return concatenateTypedArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringByteLength", function() { return stringByteLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayBufferToBase64String", function() { return arrayBufferToBase64String; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "base64StringToArrayBuffer", function() { return base64StringToArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatenateArrayBuffers", function() { return concatenateArrayBuffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "basename", function() { return basename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModelArtifactsInfoForJSON", function() { return getModelArtifactsInfoForJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFloat16Decoder", function() { return getFloat16Decoder; });
/* harmony import */ var _ops_complex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _ops_tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/io/types.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/** Number of bytes reserved for the length of the string. (32bit integer). */
const NUM_BYTES_STRING_LENGTH = 4;
/**
 * Encode a map from names to weight values as an ArrayBuffer, along with an
 * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
 *
 * This function does not perform sharding.
 *
 * This function is the reverse of `decodeWeights`.
 *
 * @param tensors A map ("dict") from names to tensors.
 * @param group Group to which the weights belong (optional).
 * @returns A `Promise` of
 *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
 *     concatenated.
 *   - An `Array` of `WeightManifestEntry`s, carrying information including
 *     tensor names, `dtype`s and shapes.
 * @throws Error: on unsupported tensor `dtype`.
 */
async function encodeWeights(tensors, group) {
    // TODO(adarob, cais): Support quantization.
    const specs = [];
    const dataPromises = [];
    const names = Array.isArray(tensors) ?
        tensors.map(tensor => tensor.name) :
        Object.keys(tensors);
    for (let i = 0; i < names.length; ++i) {
        const name = names[i];
        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];
        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&
            t.dtype !== 'string' && t.dtype !== 'complex64') {
            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);
        }
        const spec = { name, shape: t.shape, dtype: t.dtype };
        if (t.dtype === 'string') {
            const utf8bytes = new Promise(async (resolve) => {
                const vals = await t.bytes();
                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +
                    NUM_BYTES_STRING_LENGTH * vals.length;
                const bytes = new Uint8Array(totalNumBytes);
                let offset = 0;
                for (let i = 0; i < vals.length; i++) {
                    const val = vals[i];
                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);
                    bytes.set(bytesOfLength, offset);
                    offset += NUM_BYTES_STRING_LENGTH;
                    bytes.set(val, offset);
                    offset += val.length;
                }
                resolve(bytes);
            });
            dataPromises.push(utf8bytes);
        }
        else {
            dataPromises.push(t.data());
        }
        if (group != null) {
            spec.group = group;
        }
        specs.push(spec);
    }
    const tensorValues = await Promise.all(dataPromises);
    return { data: concatenateTypedArrays(tensorValues), specs };
}
/**
 * Decode flat ArrayBuffer as weights.
 *
 * This function does not handle sharding.
 *
 * This function is the reverse of `encodeWeights`.
 *
 * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
 *   concatenated in the order specified in `specs`.
 * @param specs Specifications of the names, dtypes and shapes of the tensors
 *   whose value are encoded by `buffer`.
 * @return A map from tensor name to tensor value, with the names corresponding
 *   to names in `specs`.
 * @throws Error, if any of the tensors has unsupported dtype.
 */
function decodeWeights(buffer, specs) {
    // TODO(adarob, cais): Support quantization.
    const out = {};
    let float16Decode;
    let offset = 0;
    for (const spec of specs) {
        const name = spec.name;
        const dtype = spec.dtype;
        const shape = spec.shape;
        const size = Object(_util__WEBPACK_IMPORTED_MODULE_2__["sizeFromShape"])(shape);
        let values;
        if ('quantization' in spec) {
            const quantization = spec.quantization;
            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                if (!('min' in quantization && 'scale' in quantization)) {
                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +
                        `doesn't have corresponding metadata min and scale.`);
                }
            }
            else if (quantization.dtype === 'float16') {
                if (dtype !== 'float32') {
                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +
                        `which only supports weights of type float32 not ${dtype}.`);
                }
            }
            else {
                throw new Error(`Weight ${spec.name} has unknown ` +
                    `quantization dtype ${quantization.dtype}. ` +
                    `Supported quantization dtypes are: ` +
                    `'uint8', 'uint16', and 'float16'.`);
            }
            const quantizationSizeFactor = _types__WEBPACK_IMPORTED_MODULE_3__["DTYPE_VALUE_SIZE_MAP"][quantization.dtype];
            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
            const quantizedArray = (quantization.dtype === 'uint8') ?
                new Uint8Array(byteBuffer) :
                new Uint16Array(byteBuffer);
            if (dtype === 'float32') {
                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                    values = new Float32Array(quantizedArray.length);
                    for (let i = 0; i < quantizedArray.length; i++) {
                        const v = quantizedArray[i];
                        values[i] = v * quantization.scale + quantization.min;
                    }
                }
                else if (quantization.dtype === 'float16') {
                    if (float16Decode === undefined) {
                        float16Decode = getFloat16Decoder();
                    }
                    values = float16Decode(quantizedArray);
                }
                else {
                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +
                        `for weight type float32.`);
                }
            }
            else if (dtype === 'int32') {
                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {
                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +
                        `for weight type int32.`);
                }
                values = new Int32Array(quantizedArray.length);
                for (let i = 0; i < quantizedArray.length; i++) {
                    const v = quantizedArray[i];
                    values[i] = Math.round(v * quantization.scale + quantization.min);
                }
            }
            else {
                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            }
            offset += size * quantizationSizeFactor;
        }
        else if (dtype === 'string') {
            const size = Object(_util__WEBPACK_IMPORTED_MODULE_2__["sizeFromShape"])(spec.shape);
            values = [];
            for (let i = 0; i < size; i++) {
                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
                offset += NUM_BYTES_STRING_LENGTH;
                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
                values.push(bytes);
                offset += byteLength;
            }
        }
        else {
            const dtypeFactor = _types__WEBPACK_IMPORTED_MODULE_3__["DTYPE_VALUE_SIZE_MAP"][dtype];
            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);
            if (dtype === 'float32') {
                values = new Float32Array(byteBuffer);
            }
            else if (dtype === 'int32') {
                values = new Int32Array(byteBuffer);
            }
            else if (dtype === 'bool') {
                values = new Uint8Array(byteBuffer);
            }
            else if (dtype === 'complex64') {
                values = new Float32Array(byteBuffer);
                const real = new Float32Array(values.length / 2);
                const image = new Float32Array(values.length / 2);
                for (let i = 0; i < real.length; i++) {
                    real[i] = values[i * 2];
                    image[i] = values[i * 2 + 1];
                }
                const realTensor = Object(_ops_tensor__WEBPACK_IMPORTED_MODULE_1__["tensor"])(real, shape, 'float32');
                const imageTensor = Object(_ops_tensor__WEBPACK_IMPORTED_MODULE_1__["tensor"])(image, shape, 'float32');
                out[name] = Object(_ops_complex__WEBPACK_IMPORTED_MODULE_0__["complex"])(realTensor, imageTensor);
                realTensor.dispose();
                imageTensor.dispose();
            }
            else {
                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            }
            offset += size * dtypeFactor;
        }
        if (dtype !== 'complex64') {
            out[name] = Object(_ops_tensor__WEBPACK_IMPORTED_MODULE_1__["tensor"])(values, shape, dtype);
        }
    }
    return out;
}
/**
 * Concatenate TypedArrays into an ArrayBuffer.
 */
function concatenateTypedArrays(xs) {
    // TODO(adarob, cais): Support quantization.
    if (xs === null) {
        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);
    }
    let totalByteLength = 0;
    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
    // can have a different byte length from that of the `TypedArray` itself,
    // for example, when the `TypedArray` is created from an offset in an
    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
    // the `TypedArray` in byte length. If an element of `xs` does not show
    // this property, a new `TypedArray` that satisfy this property will be
    // constructed and pushed into `normalizedXs`.
    const normalizedXs = [];
    xs.forEach((x) => {
        totalByteLength += x.byteLength;
        // tslint:disable:no-any
        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :
            new x.constructor(x));
        if (!(x instanceof Float32Array || x instanceof Int32Array ||
            x instanceof Uint8Array)) {
            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);
        }
        // tslint:enable:no-any
    });
    const y = new Uint8Array(totalByteLength);
    let offset = 0;
    normalizedXs.forEach((x) => {
        y.set(new Uint8Array(x.buffer), offset);
        offset += x.byteLength;
    });
    return y.buffer;
}
// Use Buffer on Node.js instead of Blob/atob/btoa
const useNodeBuffer = typeof Buffer !== 'undefined' &&
    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||
        typeof btoa === 'undefined');
/**
 * Calculate the byte length of a JavaScript string.
 *
 * Note that a JavaScript string can contain wide characters, therefore the
 * length of the string is not necessarily equal to the byte length.
 *
 * @param str Input string.
 * @returns Byte length.
 */
function stringByteLength(str) {
    if (useNodeBuffer) {
        return Buffer.byteLength(str);
    }
    return new Blob([str]).size;
}
/**
 * Encode an ArrayBuffer as a base64 encoded string.
 *
 * @param buffer `ArrayBuffer` to be converted.
 * @returns A string that base64-encodes `buffer`.
 */
function arrayBufferToBase64String(buffer) {
    if (useNodeBuffer) {
        return Buffer.from(buffer).toString('base64');
    }
    const buf = new Uint8Array(buffer);
    let s = '';
    for (let i = 0, l = buf.length; i < l; i++) {
        s += String.fromCharCode(buf[i]);
    }
    return btoa(s);
}
/**
 * Decode a base64 string as an ArrayBuffer.
 *
 * @param str Base64 string.
 * @returns Decoded `ArrayBuffer`.
 */
function base64StringToArrayBuffer(str) {
    if (useNodeBuffer) {
        const buf = Buffer.from(str, 'base64');
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    }
    const s = atob(str);
    const buffer = new Uint8Array(s.length);
    for (let i = 0; i < s.length; ++i) {
        buffer.set([s.charCodeAt(i)], i);
    }
    return buffer.buffer;
}
/**
 * Concatenate a number of ArrayBuffers into one.
 *
 * @param buffers A number of array buffers to concatenate.
 * @returns Result of concatenating `buffers` in order.
 */
function concatenateArrayBuffers(buffers) {
    if (buffers.length === 1) {
        return buffers[0];
    }
    let totalByteLength = 0;
    buffers.forEach((buffer) => {
        totalByteLength += buffer.byteLength;
    });
    const temp = new Uint8Array(totalByteLength);
    let offset = 0;
    buffers.forEach((buffer) => {
        temp.set(new Uint8Array(buffer), offset);
        offset += buffer.byteLength;
    });
    return temp.buffer;
}
/**
 * Get the basename of a path.
 *
 * Behaves in a way analogous to Linux's basename command.
 *
 * @param path
 */
function basename(path) {
    const SEPARATOR = '/';
    path = path.trim();
    while (path.endsWith(SEPARATOR)) {
        path = path.slice(0, path.length - 1);
    }
    const items = path.split(SEPARATOR);
    return items[items.length - 1];
}
/**
 * Populate ModelArtifactsInfo fields for a model with JSON topology.
 * @param modelArtifacts
 * @returns A ModelArtifactsInfo object.
 */
function getModelArtifactsInfoForJSON(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
        throw new Error('Expected JSON model topology, received ArrayBuffer.');
    }
    return {
        dateSaved: new Date(),
        modelTopologyType: 'JSON',
        modelTopologyBytes: modelArtifacts.modelTopology == null ?
            0 :
            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
        weightSpecsBytes: modelArtifacts.weightSpecs == null ?
            0 :
            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
        weightDataBytes: modelArtifacts.weightData == null ?
            0 :
            modelArtifacts.weightData.byteLength,
    };
}
/**
 * Computes mantisa table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 2048 mantissa lookup values.
 */
function computeFloat16MantisaTable() {
    const convertMantissa = (i) => {
        let m = i << 13;
        let e = 0;
        while ((m & 0x00800000) === 0) {
            e -= 0x00800000;
            m <<= 1;
        }
        m &= ~0x00800000;
        e += 0x38800000;
        return m | e;
    };
    const mantisaTable = new Uint32Array(2048);
    mantisaTable[0] = 0;
    for (let i = 1; i < 1024; i++) {
        mantisaTable[i] = convertMantissa(i);
    }
    for (let i = 1024; i < 2048; i++) {
        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);
    }
    return mantisaTable;
}
/**
 * Computes exponent table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 64 exponent lookup values.
 */
function computeFloat16ExponentTable() {
    const exponentTable = new Uint32Array(64);
    exponentTable[0] = 0;
    exponentTable[31] = 0x47800000;
    exponentTable[32] = 0x80000000;
    exponentTable[63] = 0xc7800000;
    for (let i = 1; i < 31; i++) {
        exponentTable[i] = i << 23;
    }
    for (let i = 33; i < 63; i++) {
        exponentTable[i] = 0x80000000 + ((i - 32) << 23);
    }
    return exponentTable;
}
/**
 * Computes offset table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 6d offset values.
 */
function computeFloat16OffsetTable() {
    const offsetTable = new Uint32Array(64);
    for (let i = 0; i < 64; i++) {
        offsetTable[i] = 1024;
    }
    offsetTable[0] = offsetTable[32] = 0;
    return offsetTable;
}
/**
 * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
 * to a Float32Array.
 *
 * @returns Function (buffer: Uint16Array) => Float32Array which decodes
 *          the Uint16Array of Float16 bytes to a Float32Array.
 */
function getFloat16Decoder() {
    // Algorithm is based off of
    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
    // Cache lookup tables
    const mantisaTable = computeFloat16MantisaTable();
    const exponentTable = computeFloat16ExponentTable();
    const offsetTable = computeFloat16OffsetTable();
    return (quantizedArray) => {
        const buffer = new ArrayBuffer(4 * quantizedArray.length);
        const bufferUint32View = new Uint32Array(buffer);
        for (let index = 0; index < quantizedArray.length; index++) {
            const float16Bits = quantizedArray[index];
            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +
                exponentTable[float16Bits >> 10];
            bufferUint32View[index] = float32Bits;
        }
        return new Float32Array(buffer);
    };
}
//# sourceMappingURL=io_utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js ***!
  \*********************************************************************/
/*! exports provided: purgeLocalStorageArtifacts, BrowserLocalStorage, localStorageRouter, browserLocalStorage, BrowserLocalStorageManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "purgeLocalStorageArtifacts", function() { return purgeLocalStorageArtifacts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserLocalStorage", function() { return BrowserLocalStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "localStorageRouter", function() { return localStorageRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browserLocalStorage", function() { return browserLocalStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserLocalStorageManager", function() { return BrowserLocalStorageManager; });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const PATH_SEPARATOR = '/';
const PATH_PREFIX = 'tensorflowjs_models';
const INFO_SUFFIX = 'info';
const MODEL_TOPOLOGY_SUFFIX = 'model_topology';
const WEIGHT_SPECS_SUFFIX = 'weight_specs';
const WEIGHT_DATA_SUFFIX = 'weight_data';
const MODEL_METADATA_SUFFIX = 'model_metadata';
/**
 * Purge all tensorflow.js-saved model artifacts from local storage.
 *
 * @returns Paths of the models purged.
 */
function purgeLocalStorageArtifacts() {
    if (!Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER') || typeof window === 'undefined' ||
        typeof window.localStorage === 'undefined') {
        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +
            'unavailable in the current environment.');
    }
    const LS = window.localStorage;
    const purgedModelPaths = [];
    for (let i = 0; i < LS.length; ++i) {
        const key = LS.key(i);
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        if (key.startsWith(prefix) && key.length > prefix.length) {
            LS.removeItem(key);
            const modelName = getModelPathFromKey(key);
            if (purgedModelPaths.indexOf(modelName) === -1) {
                purgedModelPaths.push(modelName);
            }
        }
    }
    return purgedModelPaths;
}
function getModelKeys(path) {
    return {
        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),
        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),
        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)
    };
}
/**
 * Get model path from a local-storage key.
 *
 * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
 *
 * @param key
 */
function getModelPathFromKey(key) {
    const items = key.split(PATH_SEPARATOR);
    if (items.length < 3) {
        throw new Error(`Invalid key format: ${key}`);
    }
    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?
        key.slice(BrowserLocalStorage.URL_SCHEME.length) :
        key;
}
/**
 * IOHandler subclass: Browser Local Storage.
 *
 * See the doc string to `browserLocalStorage` for more details.
 */
class BrowserLocalStorage {
    constructor(modelPath) {
        if (!Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER') || typeof window === 'undefined' ||
            typeof window.localStorage === 'undefined') {
            // TODO(cais): Add more info about what IOHandler subtypes are
            // available.
            //   Maybe point to a doc page on the web and/or automatically determine
            //   the available IOHandlers and print them in the error message.
            throw new Error('The current environment does not support local storage.');
        }
        this.LS = window.localStorage;
        if (modelPath == null || !modelPath) {
            throw new Error('For local storage, modelPath must not be null, undefined or empty.');
        }
        this.modelPath = modelPath;
        this.keys = getModelKeys(this.modelPath);
    }
    /**
     * Save model artifacts to browser local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @param modelArtifacts The model artifacts to be stored.
     * @returns An instance of SaveResult.
     */
    async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        else {
            const topology = JSON.stringify(modelArtifacts.modelTopology);
            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
            const modelArtifactsInfo = Object(_io_utils__WEBPACK_IMPORTED_MODULE_3__["getModelArtifactsInfoForJSON"])(modelArtifacts);
            try {
                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
                this.LS.setItem(this.keys.topology, topology);
                this.LS.setItem(this.keys.weightSpecs, weightSpecs);
                this.LS.setItem(this.keys.weightData, Object(_io_utils__WEBPACK_IMPORTED_MODULE_3__["arrayBufferToBase64String"])(modelArtifacts.weightData));
                this.LS.setItem(this.keys.modelMetadata, JSON.stringify({
                    format: modelArtifacts.format,
                    generatedBy: modelArtifacts.generatedBy,
                    convertedBy: modelArtifacts.convertedBy,
                    userDefinedMetadata: modelArtifacts.userDefinedMetadata
                }));
                return { modelArtifactsInfo };
            }
            catch (err) {
                // If saving failed, clean up all items saved so far.
                this.LS.removeItem(this.keys.info);
                this.LS.removeItem(this.keys.topology);
                this.LS.removeItem(this.keys.weightSpecs);
                this.LS.removeItem(this.keys.weightData);
                this.LS.removeItem(this.keys.modelMetadata);
                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +
                    `size quota being exceeded is a possible cause of this failure: ` +
                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +
                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +
                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);
            }
        }
    }
    /**
     * Load a model from local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @returns The loaded model (if loading succeeds).
     */
    async load() {
        const info = JSON.parse(this.LS.getItem(this.keys.info));
        if (info == null) {
            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
        }
        if (info.modelTopologyType !== 'JSON') {
            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +
                'topology yet.');
        }
        const out = {};
        // Load topology.
        const topology = JSON.parse(this.LS.getItem(this.keys.topology));
        if (topology == null) {
            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +
                `is missing.`);
        }
        out.modelTopology = topology;
        // Load weight specs.
        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
        if (weightSpecs == null) {
            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +
                `are missing.`);
        }
        out.weightSpecs = weightSpecs;
        // Load meta-data fields.
        const metadataString = this.LS.getItem(this.keys.modelMetadata);
        if (metadataString != null) {
            const metadata = JSON.parse(metadataString);
            out.format = metadata['format'];
            out.generatedBy = metadata['generatedBy'];
            out.convertedBy = metadata['convertedBy'];
            out.userDefinedMetadata = metadata['userDefinedMetadata'];
        }
        // Load weight data.
        const weightDataBase64 = this.LS.getItem(this.keys.weightData);
        if (weightDataBase64 == null) {
            throw new Error(`In local storage, the binary weight values of model ` +
                `'${this.modelPath}' are missing.`);
        }
        out.weightData = Object(_io_utils__WEBPACK_IMPORTED_MODULE_3__["base64StringToArrayBuffer"])(weightDataBase64);
        return out;
    }
}
BrowserLocalStorage.URL_SCHEME = 'localstorage://';
const localStorageRouter = (url) => {
    if (!Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER')) {
        return null;
    }
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {
            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
        }
        else {
            return null;
        }
    }
};
_router_registry__WEBPACK_IMPORTED_MODULE_4__["IORouterRegistry"].registerSaveRouter(localStorageRouter);
_router_registry__WEBPACK_IMPORTED_MODULE_4__["IORouterRegistry"].registerLoadRouter(localStorageRouter);
/**
 * Factory function for local storage IOHandler.
 *
 * This `IOHandler` supports both `save` and `load`.
 *
 * For each model's saved artifacts, four items are saved to local storage.
 *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
 *     model, such as date saved, type of the topology, size in bytes, etc.
 *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
 *     style models, this is a stringized JSON.
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
 *     model, can be used to decode the saved binary weight values (see
 *     item below).
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
 *     weight values, stored as a base64-encoded string.
 *
 * Saving may throw an `Error` if the total size of the artifacts exceed the
 * browser-specific quota.
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `IOHandler`, which can be used with, e.g.,
 *   `tf.Model.save`.
 */
function browserLocalStorage(modelPath) {
    return new BrowserLocalStorage(modelPath);
}
class BrowserLocalStorageManager {
    constructor() {
        Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');
        Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(typeof window === 'undefined' ||
            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');
        this.LS = window.localStorage;
    }
    async listModels() {
        const out = {};
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        const suffix = PATH_SEPARATOR + INFO_SUFFIX;
        for (let i = 0; i < this.LS.length; ++i) {
            const key = this.LS.key(i);
            if (key.startsWith(prefix) && key.endsWith(suffix)) {
                const modelPath = getModelPathFromKey(key);
                out[modelPath] = JSON.parse(this.LS.getItem(key));
            }
        }
        return out;
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        const keys = getModelKeys(path);
        if (this.LS.getItem(keys.info) == null) {
            throw new Error(`Cannot find model at path '${path}'`);
        }
        const info = JSON.parse(this.LS.getItem(keys.info));
        this.LS.removeItem(keys.info);
        this.LS.removeItem(keys.topology);
        this.LS.removeItem(keys.weightSpecs);
        this.LS.removeItem(keys.weightData);
        return info;
    }
}
//# sourceMappingURL=local_storage.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js ***!
  \************************************************************************/
/*! exports provided: ModelStoreManagerRegistry, moveModel, copyModel, removeModel, listModels */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelStoreManagerRegistry", function() { return ModelStoreManagerRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moveModel", function() { return moveModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyModel", function() { return copyModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeModel", function() { return removeModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listModels", function() { return listModels; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Classes and functions for model management across multiple storage mediums.
 *
 * Supported client actions:
 * - Listing models on all registered storage mediums.
 * - Remove model by URL from any registered storage mediums, by using URL
 *   string.
 * - Moving or copying model from one path to another in the same medium or from
 *   one medium to another, by using URL strings.
 */


const URL_SCHEME_SUFFIX = '://';
class ModelStoreManagerRegistry {
    constructor() {
        this.managers = {};
    }
    static getInstance() {
        if (ModelStoreManagerRegistry.instance == null) {
            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
        }
        return ModelStoreManagerRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */
    static registerManager(scheme, manager) {
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(scheme != null, () => 'scheme must not be undefined or null.');
        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {
            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
        }
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(scheme.length > 0, () => 'scheme must not be an empty string.');
        const registry = ModelStoreManagerRegistry.getInstance();
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);
        registry.managers[scheme] = manager;
    }
    static getManager(scheme) {
        const manager = this.getInstance().managers[scheme];
        if (manager == null) {
            throw new Error(`Cannot find model manager for scheme '${scheme}'`);
        }
        return manager;
    }
    static getSchemes() {
        return Object.keys(this.getInstance().managers);
    }
}
/**
 * Helper method for parsing a URL string into a scheme and a path.
 *
 * @param url E.g., 'localstorage://my-model'
 * @returns A dictionary with two fields: scheme and path.
 *   Scheme: e.g., 'localstorage' in the example above.
 *   Path: e.g., 'my-model' in the example above.
 */
function parseURL(url) {
    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {
        throw new Error(`The url string provided does not contain a scheme. ` +
            `Supported schemes are: ` +
            `${ModelStoreManagerRegistry.getSchemes().join(',')}`);
    }
    return {
        scheme: url.split(URL_SCHEME_SUFFIX)[0],
        path: url.split(URL_SCHEME_SUFFIX)[1],
    };
}
async function cloneModelInternal(sourceURL, destURL, deleteSource = false) {
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);
    const loadHandlers = _router_registry__WEBPACK_IMPORTED_MODULE_1__["IORouterRegistry"].getLoadHandlers(sourceURL);
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +
        `load handlers for source URL ${sourceURL}.`);
    const loadHandler = loadHandlers[0];
    const saveHandlers = _router_registry__WEBPACK_IMPORTED_MODULE_1__["IORouterRegistry"].getSaveHandlers(destURL);
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +
        `URL ${destURL}.`);
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +
        `save handlers for destination URL ${destURL}.`);
    const saveHandler = saveHandlers[0];
    const sourceScheme = parseURL(sourceURL).scheme;
    const sourcePath = parseURL(sourceURL).path;
    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;
    const modelArtifacts = await loadHandler.load();
    // If moving within the same storage medium, remove the old model as soon as
    // the loading is done. Without doing this, it is possible that the combined
    // size of the two models will cause the cloning to fail.
    if (deleteSource && sameMedium) {
        await ModelStoreManagerRegistry.getManager(sourceScheme)
            .removeModel(sourcePath);
    }
    const saveResult = await saveHandler.save(modelArtifacts);
    // If moving between mediums, the deletion is done after the save succeeds.
    // This guards against the case in which saving to the destination medium
    // fails.
    if (deleteSource && !sameMedium) {
        await ModelStoreManagerRegistry.getManager(sourceScheme)
            .removeModel(sourcePath);
    }
    return saveResult.modelArtifactsInfo;
}
/**
 * List all models stored in registered storage mediums.
 *
 * For a web browser environment, the registered mediums are Local Storage and
 * IndexedDB.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @returns A `Promise` of a dictionary mapping URLs of existing models to
 * their model artifacts info. URLs include medium-specific schemes, e.g.,
 *   'indexeddb://my/model/1'. Model artifacts info include type of the
 * model's topology, byte sizes of the topology, weights, etc.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function listModels() {
    const schemes = ModelStoreManagerRegistry.getSchemes();
    const out = {};
    for (const scheme of schemes) {
        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();
        for (const path in schemeOut) {
            const url = scheme + URL_SCHEME_SUFFIX + path;
            out[url] = schemeOut[path];
        }
    }
    return out;
}
/**
 * Remove a model specified by URL from a reigstered storage medium.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @param url A URL to a stored model, with a scheme prefix, e.g.,
 *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
 * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
 *   is successful).
 * @throws Error if deletion fails, e.g., if no model exists at `path`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function removeModel(url) {
    const schemeAndPath = parseURL(url);
    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
    return manager.removeModel(schemeAndPath.path);
}
/**
 * Copy a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Copying within a storage medium, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Copying between two storage mediums, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Copy the model, from Local Storage to IndexedDB.
 * await tf.io.copyModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove both models.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of copying.
 * @param destURL Destination URL of copying.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function copyModel(sourceURL, destURL) {
    const deleteSource = false;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}
/**
 * Move a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Moving within a storage medium, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Moving between two storage mediums, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Move the model, from Local Storage to IndexedDB.
 * await tf.io.moveModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove the moved model.
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of moving.
 * @param destURL Destination URL of moving.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function moveModel(sourceURL, destURL) {
    const deleteSource = true;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}

//# sourceMappingURL=model_management.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js ***!
  \*******************************************************************/
/*! exports provided: fromMemory, withSaveHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMemory", function() { return fromMemory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withSaveHandler", function() { return withSaveHandler; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PassthroughLoader {
    constructor(modelArtifacts) {
        this.modelArtifacts = modelArtifacts;
    }
    async load() {
        return this.modelArtifacts;
    }
}
class PassthroughSaver {
    constructor(saveHandler) {
        this.saveHandler = saveHandler;
    }
    async save(modelArtifacts) {
        return this.saveHandler(modelArtifacts);
    }
}
/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandler` that simply loads the provided data.
 */
function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
    if (arguments.length === 1) {
        const isModelArtifacts = modelArtifacts.modelTopology != null ||
            modelArtifacts.weightSpecs != null;
        if (isModelArtifacts) {
            return new PassthroughLoader(modelArtifacts);
        }
        else {
            // Legacy support: with only modelTopology.
            // TODO(cais): Remove this deprecated API.
            console.warn('Please call tf.io.fromMemory() with only one argument. ' +
                'The argument should be of type ModelArtifacts. ' +
                'The multi-argument signature of tf.io.fromMemory() has been ' +
                'deprecated and will be removed in a future release.');
            return new PassthroughLoader({ modelTopology: modelArtifacts });
        }
    }
    else {
        // Legacy support.
        // TODO(cais): Remove this deprecated API.
        console.warn('Please call tf.io.fromMemory() with only one argument. ' +
            'The argument should be of type ModelArtifacts. ' +
            'The multi-argument signature of tf.io.fromMemory() has been ' +
            'deprecated and will be removed in a future release.');
        return new PassthroughLoader({
            modelTopology: modelArtifacts,
            weightSpecs,
            weightData,
            trainingConfig
        });
    }
}
/**
 * Creates an IOHandler that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     `SaveResult`.
 */
function withSaveHandler(saveHandler) {
    return new PassthroughSaver(saveHandler);
}
//# sourceMappingURL=passthrough.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/progress.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/progress.js ***!
  \****************************************************************/
/*! exports provided: monitorPromisesProgress */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "monitorPromisesProgress", function() { return monitorPromisesProgress; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Monitor Promise.all progress, fire onProgress callback function.
 *
 * @param promises Promise list going to be monitored
 * @param onProgress Callback function. Fired when a promise resolved.
 * @param startFraction Optional fraction start. Default to 0.
 * @param endFraction Optional fraction end. Default to 1.
 */
function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
    checkPromises(promises);
    startFraction = startFraction == null ? 0 : startFraction;
    endFraction = endFraction == null ? 1 : endFraction;
    checkFraction(startFraction, endFraction);
    let resolvedPromise = 0;
    const registerMonitor = (promise) => {
        promise.then(value => {
            const fraction = startFraction +
                ++resolvedPromise / promises.length * (endFraction - startFraction);
            // pass fraction as parameter to callback function.
            onProgress(fraction);
            return value;
        });
        return promise;
    };
    function checkPromises(promises) {
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');
    }
    function checkFraction(startFraction, endFraction) {
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +
            `got startFraction ${startFraction}`);
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +
            `got endFraction ${endFraction}`);
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +
            `got startFraction ${startFraction} and endFraction ` +
            `${endFraction}`);
    }
    return Promise.all(promises.map(registerMonitor));
}
//# sourceMappingURL=progress.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js ***!
  \***********************************************************************/
/*! exports provided: IORouterRegistry, registerSaveRouter, registerLoadRouter, getSaveHandlers, getLoadHandlers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IORouterRegistry", function() { return IORouterRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerSaveRouter", function() { return registerSaveRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerLoadRouter", function() { return registerLoadRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSaveHandlers", function() { return getSaveHandlers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLoadHandlers", function() { return getLoadHandlers; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IORouterRegistry {
    constructor() {
        this.saveRouters = [];
        this.loadRouters = [];
    }
    static getInstance() {
        if (IORouterRegistry.instance == null) {
            IORouterRegistry.instance = new IORouterRegistry();
        }
        return IORouterRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */
    static registerSaveRouter(saveRouter) {
        IORouterRegistry.getInstance().saveRouters.push(saveRouter);
    }
    /**
     * Register a load-handler router.
     *
     * @param loadRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `load` method defined or `null`.
     */
    static registerLoadRouter(loadRouter) {
        IORouterRegistry.getInstance().loadRouters.push(loadRouter);
    }
    /**
     * Look up IOHandler for saving, given a URL-like string.
     *
     * @param url
     * @returns If only one match is found, an instance of IOHandler with the
     * `save` method defined. If no match is found, `null`.
     * @throws Error, if more than one match is found.
     */
    static getSaveHandlers(url) {
        return IORouterRegistry.getHandlers(url, 'save');
    }
    /**
     * Look up IOHandler for loading, given a URL-like string.
     *
     * @param url
     * @param loadOptions Optional, custom load options.
     * @returns All valid handlers for `url`, given the currently registered
     *   handler routers.
     */
    static getLoadHandlers(url, loadOptions) {
        return IORouterRegistry.getHandlers(url, 'load', loadOptions);
    }
    static getHandlers(url, handlerType, loadOptions) {
        const validHandlers = [];
        const routers = handlerType === 'load' ?
            IORouterRegistry.getInstance().loadRouters :
            IORouterRegistry.getInstance().saveRouters;
        routers.forEach(router => {
            const handler = router(url, loadOptions);
            if (handler !== null) {
                validHandlers.push(handler);
            }
        });
        return validHandlers;
    }
}
const registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);
const registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);
const getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);
const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);
//# sourceMappingURL=router_registry.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/types.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/types.js ***!
  \*************************************************************/
/*! exports provided: DTYPE_VALUE_SIZE_MAP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTYPE_VALUE_SIZE_MAP", function() { return DTYPE_VALUE_SIZE_MAP; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/* Type definitions for exporting and importing of models. */
/**
 * A map from Tensor dtype to number of bytes per element of the Tensor.
 */
const DTYPE_VALUE_SIZE_MAP = {
    'float32': 4,
    'float16': 2,
    'int32': 4,
    'uint16': 2,
    'uint8': 1,
    'bool': 1,
    'complex64': 8
};
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js ***!
  \**********************************************************************/
/*! exports provided: loadWeightsAsArrayBuffer, loadWeights, weightsLoaderFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadWeightsAsArrayBuffer", function() { return loadWeightsAsArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadWeights", function() { return loadWeights; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "weightsLoaderFactory", function() { return weightsLoaderFactory; });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _progress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./progress */ "./node_modules/@tensorflow/tfjs-core/dist/io/progress.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/io/types.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Reads binary weights data from a number of URLs.
 *
 * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
 * @param requestOptions RequestInit (options) for the HTTP requests.
 * @param fetchFunc Optional overriding value for the `window.fetch` function.
 * @param onProgress Optional, progress callback function, fired periodically
 *   before the load is completed.
 * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
 *   length as `fetchURLs`.
 */
async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
    if (loadOptions == null) {
        loadOptions = {};
    }
    const fetchFunc = loadOptions.fetchFunc == null ? Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().platform.fetch :
        loadOptions.fetchFunc;
    // Create the requests for all of the weights in parallel.
    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));
    const fetchStartFraction = 0;
    const fetchEndFraction = 0.5;
    const responses = loadOptions.onProgress == null ?
        await Promise.all(requests) :
        await Object(_progress__WEBPACK_IMPORTED_MODULE_3__["monitorPromisesProgress"])(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);
    const bufferPromises = responses.map(response => response.arrayBuffer());
    const bufferStartFraction = 0.5;
    const bufferEndFraction = 1;
    const buffers = loadOptions.onProgress == null ?
        await Promise.all(bufferPromises) :
        await Object(_progress__WEBPACK_IMPORTED_MODULE_3__["monitorPromisesProgress"])(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);
    return buffers;
}
/**
 * Reads a weights manifest JSON configuration, fetches the weights and
 * returns them as `Tensor`s.
 *
 * @param manifest The weights manifest JSON.
 * @param filePathPrefix The path prefix for filenames given in the manifest.
 *     Defaults to the empty string.
 * @param weightNames The names of the weights to be fetched.
 */
async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {
    // TODO(nsthorat): Groups are currently fetched atomically. If you need a
    // single weight from a group, the whole group will be fetched. At a future
    // date, we should support fetching only the individual shards within a
    // group that are needed to reconstruct the requested weight.
    // TODO(cais): Use `decodeWeights` for implementation.
    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });
    const loadWeights = weightsLoaderFactory(fetchWeights);
    return loadWeights(manifest, filePathPrefix, weightNames);
}
/**
 * Creates a function, which reads a weights manifest JSON configuration,
 * fetches the weight files using the specified function and returns them as
 * `Tensor`s.
 *
 * ```js
 * // example for creating a nodejs weight loader, which reads the weight files
 * // from disk using fs.readFileSync
 *
 * import * as fs from 'fs'
 *
 * const fetchWeightsFromDisk = (filePaths: string[]) =>
 *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
 *
 * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
 *
 * const manifest = JSON.parse(
 *   fs.readFileSync('./my_model-weights_manifest').toString()
 * )
 * const weightMap = await loadWeights(manifest, './')
 * ```
 * @param fetchWeightsFunction The function used for fetching the weight files.
 * @returns Weight loading function.
 */
function weightsLoaderFactory(fetchWeightsFunction) {
    return async (manifest, filePathPrefix = '', weightNames) => {
        // Collect all the groups, weights, and their relative offsets to be
        // fetched.
        const groupIndicesToFetchMap = manifest.map(() => false);
        const groupWeightsToFetch = {};
        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];
        const allManifestWeightNames = [];
        manifest.forEach((manifestGroupConfig, groupIndex) => {
            let groupOffset = 0;
            manifestGroupConfig.weights.forEach(weightsEntry => {
                const rawDtype = ('quantization' in weightsEntry) ?
                    weightsEntry.quantization.dtype :
                    weightsEntry.dtype;
                const weightsBytes = _types__WEBPACK_IMPORTED_MODULE_4__["DTYPE_VALUE_SIZE_MAP"][rawDtype] *
                    _util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"](weightsEntry.shape);
                const enqueueWeightsForFetchingFn = () => {
                    groupIndicesToFetchMap[groupIndex] = true;
                    if (groupWeightsToFetch[groupIndex] == null) {
                        groupWeightsToFetch[groupIndex] = [];
                    }
                    groupWeightsToFetch[groupIndex].push({
                        manifestEntry: weightsEntry,
                        groupOffset,
                        sizeBytes: weightsBytes
                    });
                };
                if (weightNames != null) {
                    weightNames.forEach((weightName, weightIndex) => {
                        if (weightName === weightsEntry.name) {
                            enqueueWeightsForFetchingFn();
                            weightsFound[weightIndex] = true;
                        }
                    });
                }
                else {
                    enqueueWeightsForFetchingFn();
                }
                allManifestWeightNames.push(weightsEntry.name);
                groupOffset += weightsBytes;
            });
        });
        if (!weightsFound.every(found => found)) {
            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);
            throw new Error(`Could not find weights in manifest with names: ` +
                `${weightsNotFound.join(', ')}. \n` +
                `Manifest JSON has weights with names: ` +
                `${allManifestWeightNames.join(', ')}.`);
        }
        // Convert the one-hot boolean groupId => shouldFetch map to a list of group
        // IDs.
        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {
            if (shouldFetch) {
                accumulator.push(i);
            }
            return accumulator;
        }, []);
        const fetchUrls = [];
        groupIndicesToFetch.forEach(i => {
            manifest[i].paths.forEach(filepath => {
                const fetchUrl = filePathPrefix +
                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
                fetchUrls.push(fetchUrl);
            });
        });
        const buffers = await fetchWeightsFunction(fetchUrls);
        const weightsTensorMap = {};
        let bufferIndexOffset = 0;
        groupIndicesToFetch.forEach(i => {
            const numBuffers = manifest[i].paths.length;
            let groupBytes = 0;
            for (let i = 0; i < numBuffers; i++) {
                groupBytes += buffers[bufferIndexOffset + i].byteLength;
            }
            // Create a buffer for the whole group.
            const groupBuffer = new ArrayBuffer(groupBytes);
            const groupByteBuffer = new Uint8Array(groupBuffer);
            let groupBufferOffset = 0;
            for (let i = 0; i < numBuffers; i++) {
                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);
                groupByteBuffer.set(buffer, groupBufferOffset);
                groupBufferOffset += buffer.byteLength;
            }
            const weightsEntries = groupWeightsToFetch[i];
            weightsEntries.forEach(weightsEntry => {
                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                const nameToTensorMap = Object(_io_utils__WEBPACK_IMPORTED_MODULE_2__["decodeWeights"])(byteBuffer, [weightsEntry.manifestEntry]);
                for (const name in nameToTensorMap) {
                    weightsTensorMap[name] = nameToTensorMap[name];
                }
            });
            bufferIndexOffset += numBuffers;
        });
        return weightsTensorMap;
    };
}
//# sourceMappingURL=weights_loader.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js ***!
  \*****************************************************************/
/*! exports provided: Abs, Acos, Acosh, Add, AddN, All, Any, ArgMax, ArgMin, Asin, Asinh, Atan, Atanh, Atan2, AvgPool, AvgPoolBackprop, AvgPool3D, AvgPool3DBackprop, BatchMatMul, BatchToSpaceND, BroadcastTo, Cast, Ceil, ClipByValue, Complex, Concat, Conv2D, Conv2DBackpropFilter, Conv2DBackpropInput, Conv3D, Conv3DBackpropFilterV2, Conv3DBackpropInputV2, Cos, Cosh, Cumsum, CropAndResize, DepthToSpace, DepthwiseConv2dNative, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropInput, Diag, Dilation2D, Dilation2DBackpropInput, Dilation2DBackpropFilter, Div, Elu, EluGrad, Erf, Equal, Exp, Expm1, FFT, Fill, FlipLeftRight, Floor, FloorDiv, FusedBatchNorm, GatherV2, GatherNd, Greater, GreaterEqual, Identity, IFFT, Imag, IsFinite, IsInf, IsNan, Less, LessEqual, LinSpace, Log, Log1p, LogicalAnd, LogicalNot, LogicalOr, LogSoftmax, LRN, LRNBackprop, Max, Maximum, MaxPool, MaxPoolBackprop, MaxPool3D, MaxPool3DBackprop, MaxPoolWithArgmax, Mean, Min, Minimum, MirrorPad, Mod, Multiply, Negate, NotEqual, NonMaxSuppressionV3, NonMaxSuppressionV4, NonMaxSuppressionV5, OnesLike, OneHot, PadV2, Pool, Pow, Prelu, Prod, Range, Real, Reciprocal, Relu, Reshape, ResizeNearestNeighbor, ResizeNearestNeighborGrad, ResizeBilinear, ResizeBilinearGrad, Relu6, Reverse, Round, Rsqrt, ScatterNd, SelectV2, Selu, Slice, Sin, Sinh, Sign, Sigmoid, Softplus, Sqrt, Sum, SpaceToBatchND, SplitV, Softmax, SquaredDifference, Square, Sub, SparseToDense, StridedSlice, Tan, Tanh, Tile, TopK, Transpose, Unique, Unpack, UnsortedSegmentSum, ZerosLike, Step, FromPixels, RotateWithOffset, _FusedMatMul, FusedConv2D, FusedDepthwiseConv2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Abs", function() { return Abs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Acos", function() { return Acos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Acosh", function() { return Acosh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Add", function() { return Add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddN", function() { return AddN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "All", function() { return All; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Any", function() { return Any; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArgMax", function() { return ArgMax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArgMin", function() { return ArgMin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Asin", function() { return Asin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Asinh", function() { return Asinh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Atan", function() { return Atan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Atanh", function() { return Atanh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Atan2", function() { return Atan2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AvgPool", function() { return AvgPool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AvgPoolBackprop", function() { return AvgPoolBackprop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AvgPool3D", function() { return AvgPool3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AvgPool3DBackprop", function() { return AvgPool3DBackprop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchMatMul", function() { return BatchMatMul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchToSpaceND", function() { return BatchToSpaceND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BroadcastTo", function() { return BroadcastTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cast", function() { return Cast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ceil", function() { return Ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClipByValue", function() { return ClipByValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Complex", function() { return Complex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Concat", function() { return Concat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Conv2D", function() { return Conv2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Conv2DBackpropFilter", function() { return Conv2DBackpropFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Conv2DBackpropInput", function() { return Conv2DBackpropInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Conv3D", function() { return Conv3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Conv3DBackpropFilterV2", function() { return Conv3DBackpropFilterV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Conv3DBackpropInputV2", function() { return Conv3DBackpropInputV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cos", function() { return Cos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cosh", function() { return Cosh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cumsum", function() { return Cumsum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CropAndResize", function() { return CropAndResize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthToSpace", function() { return DepthToSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNative", function() { return DepthwiseConv2dNative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNativeBackpropFilter", function() { return DepthwiseConv2dNativeBackpropFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthwiseConv2dNativeBackpropInput", function() { return DepthwiseConv2dNativeBackpropInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Diag", function() { return Diag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dilation2D", function() { return Dilation2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dilation2DBackpropInput", function() { return Dilation2DBackpropInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dilation2DBackpropFilter", function() { return Dilation2DBackpropFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Div", function() { return Div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Elu", function() { return Elu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EluGrad", function() { return EluGrad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Erf", function() { return Erf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Equal", function() { return Equal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Exp", function() { return Exp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Expm1", function() { return Expm1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FFT", function() { return FFT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fill", function() { return Fill; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlipLeftRight", function() { return FlipLeftRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Floor", function() { return Floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloorDiv", function() { return FloorDiv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FusedBatchNorm", function() { return FusedBatchNorm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GatherV2", function() { return GatherV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GatherNd", function() { return GatherNd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Greater", function() { return Greater; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterEqual", function() { return GreaterEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Identity", function() { return Identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IFFT", function() { return IFFT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Imag", function() { return Imag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsFinite", function() { return IsFinite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsInf", function() { return IsInf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsNan", function() { return IsNan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Less", function() { return Less; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessEqual", function() { return LessEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinSpace", function() { return LinSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Log", function() { return Log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Log1p", function() { return Log1p; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicalAnd", function() { return LogicalAnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicalNot", function() { return LogicalNot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicalOr", function() { return LogicalOr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogSoftmax", function() { return LogSoftmax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LRN", function() { return LRN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LRNBackprop", function() { return LRNBackprop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Max", function() { return Max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Maximum", function() { return Maximum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxPool", function() { return MaxPool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxPoolBackprop", function() { return MaxPoolBackprop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxPool3D", function() { return MaxPool3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxPool3DBackprop", function() { return MaxPool3DBackprop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxPoolWithArgmax", function() { return MaxPoolWithArgmax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mean", function() { return Mean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Min", function() { return Min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Minimum", function() { return Minimum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MirrorPad", function() { return MirrorPad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mod", function() { return Mod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Multiply", function() { return Multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Negate", function() { return Negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotEqual", function() { return NotEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV3", function() { return NonMaxSuppressionV3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV4", function() { return NonMaxSuppressionV4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NonMaxSuppressionV5", function() { return NonMaxSuppressionV5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnesLike", function() { return OnesLike; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneHot", function() { return OneHot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PadV2", function() { return PadV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pool", function() { return Pool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pow", function() { return Pow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Prelu", function() { return Prelu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Prod", function() { return Prod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Range", function() { return Range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Real", function() { return Real; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reciprocal", function() { return Reciprocal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Relu", function() { return Relu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reshape", function() { return Reshape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeNearestNeighbor", function() { return ResizeNearestNeighbor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeNearestNeighborGrad", function() { return ResizeNearestNeighborGrad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeBilinear", function() { return ResizeBilinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeBilinearGrad", function() { return ResizeBilinearGrad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Relu6", function() { return Relu6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reverse", function() { return Reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Round", function() { return Round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rsqrt", function() { return Rsqrt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScatterNd", function() { return ScatterNd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectV2", function() { return SelectV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Selu", function() { return Selu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slice", function() { return Slice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sin", function() { return Sin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sinh", function() { return Sinh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sign", function() { return Sign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sigmoid", function() { return Sigmoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Softplus", function() { return Softplus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sqrt", function() { return Sqrt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sum", function() { return Sum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpaceToBatchND", function() { return SpaceToBatchND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplitV", function() { return SplitV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Softmax", function() { return Softmax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SquaredDifference", function() { return SquaredDifference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Square", function() { return Square; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sub", function() { return Sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SparseToDense", function() { return SparseToDense; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StridedSlice", function() { return StridedSlice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tan", function() { return Tan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tanh", function() { return Tanh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tile", function() { return Tile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopK", function() { return TopK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transpose", function() { return Transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unique", function() { return Unique; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unpack", function() { return Unpack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsortedSegmentSum", function() { return UnsortedSegmentSum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZerosLike", function() { return ZerosLike; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Step", function() { return Step; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FromPixels", function() { return FromPixels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RotateWithOffset", function() { return RotateWithOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_FusedMatMul", function() { return _FusedMatMul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FusedConv2D", function() { return FusedConv2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FusedDepthwiseConv2D", function() { return FusedDepthwiseConv2D; });
const Abs = 'Abs';
const Acos = 'Acos';
const Acosh = 'Acosh';
const Add = 'Add';
const AddN = 'AddN';
const All = 'All';
const Any = 'Any';
const ArgMax = 'ArgMax';
const ArgMin = 'ArgMin';
const Asin = 'Asin';
const Asinh = 'Asinh';
const Atan = 'Atan';
const Atanh = 'Atanh';
const Atan2 = 'Atan2';
const AvgPool = 'AvgPool';
const AvgPoolBackprop = 'AvgPoolBackprop';
const AvgPool3D = 'AvgPool3D';
const AvgPool3DBackprop = 'AvgPool3DBackprop';
const BatchMatMul = 'BatchMatMul';
const BatchToSpaceND = 'BatchToSpaceND';
const BroadcastTo = 'BroadcastTo';
const Cast = 'Cast';
const Ceil = 'Ceil';
const ClipByValue = 'ClipByValue';
const Complex = 'Complex';
const Concat = 'Concat';
const Conv2D = 'Conv2D';
const Conv2DBackpropFilter = 'Conv2DBackpropFilter';
const Conv2DBackpropInput = 'Conv2DBackpropInput';
const Conv3D = 'Conv3D';
const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';
const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';
const Cos = 'Cos';
const Cosh = 'Cosh';
const Cumsum = 'Cumsum';
const CropAndResize = 'CropAndResize';
const DepthToSpace = 'DepthToSpace';
const DepthwiseConv2dNative = 'DepthwiseConv2dNative';
const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';
const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';
const Diag = 'Diag';
const Dilation2D = 'Dilation2D';
const Dilation2DBackpropInput = 'Dilation2DBackpropInput';
const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';
const Div = 'Div';
const Elu = 'Elu';
const EluGrad = 'EluGrad';
const Erf = 'Erf';
const Equal = 'Equal';
const Exp = 'Exp';
const Expm1 = 'Expm1';
const FFT = 'FFT';
const Fill = 'Fill';
const FlipLeftRight = 'FlipLeftRight';
const Floor = 'Floor';
const FloorDiv = 'FloorDiv';
const FusedBatchNorm = 'FusedBatchNorm';
const GatherV2 = 'GatherV2';
const GatherNd = 'GatherNd';
const Greater = 'Greater';
const GreaterEqual = 'GreaterEqual';
const Identity = 'Identity';
const IFFT = 'IFFT';
const Imag = 'Imag';
const IsFinite = 'IsFinite';
const IsInf = 'IsInf';
const IsNan = 'IsNan';
const Less = 'Less';
const LessEqual = 'LessEqual';
const LinSpace = 'LinSpace';
const Log = 'Log';
const Log1p = 'Log1p';
const LogicalAnd = 'LogicalAnd';
const LogicalNot = 'LogicalNot';
const LogicalOr = 'LogicalOr';
const LogSoftmax = 'LogSoftmax';
const LRN = 'LRN';
const LRNBackprop = 'LRNBackprop';
const Max = 'Max';
const Maximum = 'Maximum';
const MaxPool = 'MaxPool';
const MaxPoolBackprop = 'MaxPoolBackprop';
const MaxPool3D = 'MaxPool3D';
const MaxPool3DBackprop = 'MaxPool3DBackprop';
const MaxPoolWithArgmax = 'MaxPoolWithArgmax';
const Mean = 'Mean';
const Min = 'Min';
const Minimum = 'Minimum';
const MirrorPad = 'MirrorPad';
const Mod = 'Mod';
const Multiply = 'Multiply';
const Negate = 'Negate';
const NotEqual = 'NotEqual';
const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';
const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';
const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';
const OnesLike = 'OnesLike';
const OneHot = 'OneHot';
const PadV2 = 'PadV2';
const Pool = 'Pool';
const Pow = 'Pow';
const Prelu = 'Prelu';
const Prod = 'Prod';
const Range = 'Range';
const Real = 'Real';
const Reciprocal = 'Reciprocal';
const Relu = 'Relu';
const Reshape = 'Reshape';
const ResizeNearestNeighbor = 'ResizeNearestNeighbor';
const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';
const ResizeBilinear = 'ResizeBilinear';
const ResizeBilinearGrad = 'ResizeBilinearGrad';
const Relu6 = 'Relu6';
const Reverse = 'Reverse';
const Round = 'Round';
const Rsqrt = 'Rsqrt';
const ScatterNd = 'ScatterNd';
const SelectV2 = 'SelectV2';
const Selu = 'Selu';
const Slice = 'Slice';
const Sin = 'Sin';
const Sinh = 'Sinh';
const Sign = 'Sign';
const Sigmoid = 'Sigmoid';
const Softplus = 'Softplus';
const Sqrt = 'Sqrt';
const Sum = 'Sum';
const SpaceToBatchND = 'SpaceToBatchND';
const SplitV = 'SplitV';
const Softmax = 'Softmax';
const SquaredDifference = 'SquaredDifference';
const Square = 'Square';
const Sub = 'Sub';
const SparseToDense = 'SparseToDense';
const StridedSlice = 'StridedSlice';
const Tan = 'Tan';
const Tanh = 'Tanh';
const Tile = 'Tile';
const TopK = 'TopK';
const Transpose = 'Transpose';
const Unique = 'Unique';
const Unpack = 'Unpack';
const UnsortedSegmentSum = 'UnsortedSegmentSum';
const ZerosLike = 'ZerosLike';
/**
 * TensorFlow.js-only kernels
 */
const Step = 'Step';
const FromPixels = 'FromPixels';
const RotateWithOffset = 'RotateWithOffset';
const _FusedMatMul = '_FusedMatMul';
const FusedConv2D = 'FusedConv2D';
const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';
//# sourceMappingURL=kernel_names.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js ***!
  \********************************************************************/
/*! exports provided: getKernel, getGradient, getKernelsForBackend, registerKernel, registerGradient, unregisterKernel, unregisterGradient, copyRegisteredKernels */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKernel", function() { return getKernel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGradient", function() { return getGradient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKernelsForBackend", function() { return getKernelsForBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerKernel", function() { return registerKernel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerGradient", function() { return registerGradient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unregisterKernel", function() { return unregisterKernel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unregisterGradient", function() { return unregisterGradient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyRegisteredKernels", function() { return copyRegisteredKernels; });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _global_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global_util */ "./node_modules/@tensorflow/tfjs-core/dist/global_util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const kernelRegistry = Object(_global_util__WEBPACK_IMPORTED_MODULE_1__["getGlobal"])('kernelRegistry', () => new Map());
const gradRegistry = Object(_global_util__WEBPACK_IMPORTED_MODULE_1__["getGlobal"])('gradRegistry', () => new Map());
/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */
function getKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    return kernelRegistry.get(key);
}
/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */
function getGradient(kernelName) {
    return gradRegistry.get(kernelName);
}
function getKernelsForBackend(backendName) {
    const it = kernelRegistry.entries();
    const result = [];
    while (true) {
        const { done, value } = it.next();
        if (done) {
            break;
        }
        const [key, config] = value;
        const [backend,] = key.split('_');
        if (backend === backendName) {
            result.push(config);
        }
    }
    return result;
}
/**
 * Registers the function (forward pass) for the kernel in a global registry.
 *
 * @param config A config object with the following properties:
 * - `kernelName` The official name of the kernel.
 * - `backendName` The official name of the backend.
 * - `kernelFunc` The function to run during the forward pass of the kernel.
 * - `setupFunc` Optional. Gets called once, after the backend initializes.
 * - `disposeFunc` Optional. Gets called once, right before the backend is
 * disposed.
 */
function registerKernel(config) {
    const { kernelName, backendName } = config;
    const key = makeKey(kernelName, backendName);
    if (kernelRegistry.has(key)) {
        console.warn(`The kernel '${kernelName}' for backend ` +
            `'${backendName}' is already registered`);
    }
    kernelRegistry.set(key, config);
}
/**
 * Registers a gradient function for a given kernel in the global registry,
 * to be used during the back-propagation of that kernel.
 *
 * @param config An object with the following properties:
 * - `kernelName` The name of the kernel that the gradient function is for.
 * - `gradFunc` The function to run during back-propagation.
 */
function registerGradient(config) {
    const { kernelName } = config;
    if (gradRegistry.has(kernelName)) {
        // TODO (yassogba) after 3.0 assess whether we need to keep this gated
        // to debug mode.
        if (Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().getBool('DEBUG')) {
            console.warn(`Overriding the gradient for '${kernelName}'`);
        }
    }
    gradRegistry.set(kernelName, config);
}
/**
 * Removes the kernel function from the registry.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 *
 */
function unregisterKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    if (!kernelRegistry.has(key)) {
        throw new Error(`The kernel '${kernelName}' for backend ` +
            `'${backendName}' is not registered`);
    }
    kernelRegistry.delete(key);
}
/** Removes the registered gradient from the global registry. */
function unregisterGradient(kernelName) {
    if (!gradRegistry.has(kernelName)) {
        throw new Error(`The gradient '${kernelName}' for backend is not registered`);
    }
    gradRegistry.delete(kernelName);
}
/**
 * Finds kernels that have already been registered to a backend and re-registers
 * them for a new backend. Useful for registering custom backends.
 * @param registeredBackendName Already registered backend.
 * @param newBackendName New backend.
 */
function copyRegisteredKernels(registeredBackendName, newBackendName) {
    const kernels = getKernelsForBackend(registeredBackendName);
    kernels.forEach(kernelConfig => {
        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });
        registerKernel(newKernelConfig);
    });
}
function makeKey(kernelName, backendName) {
    return `${backendName}_${kernelName}`;
}
//# sourceMappingURL=kernel_registry.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/log.js":
/*!********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/log.js ***!
  \********************************************************/
/*! exports provided: warn, log */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "warn", function() { return warn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function warn(...msg) {
    if (!Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().getBool('IS_TEST')) {
        console.warn(...msg);
    }
}
function log(...msg) {
    if (!Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().getBool('IS_TEST')) {
        console.log(...msg);
    }
}
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/math.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/math.js ***!
  \*********************************************************/
/*! exports provided: confusionMatrix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_confusion_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ops/confusion_matrix */ "./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "confusionMatrix", function() { return _ops_confusion_matrix__WEBPACK_IMPORTED_MODULE_0__["confusionMatrix"]; });

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Exports under the tf.math.* namespace.
 */


//# sourceMappingURL=math.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js ***!
  \************************************************************/
/*! exports provided: abs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "abs", function() { return abs; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function abs_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'abs');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        save([$x]);
        if ($x.dtype === 'complex64') {
            return backend.complexAbs($x);
        }
        return backend.abs($x);
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Abs"]);
}
const abs = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ abs_ });
//# sourceMappingURL=abs.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js ***!
  \*************************************************************/
/*! exports provided: acos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "acos", function() { return acos; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.acos().print();  // or tf.acos(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acos_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'acos');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.acos($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Acos"]);
}
const acos = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ acos_ });
//# sourceMappingURL=acos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js ***!
  \**************************************************************/
/*! exports provided: acosh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "acosh", function() { return acosh; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
 * `acosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([10, 1, 3, 5.7]);
 *
 * x.acosh().print();  // or tf.acosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acosh_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'acosh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.acosh($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Acosh"]);
}
const acosh = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ acosh_ });
//# sourceMappingURL=acosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/add.js ***!
  \************************************************************/
/*! exports provided: add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 *
 * ```js
 * // Broadcast add a with b.
 * const a = tf.scalar(5);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 * @param a The first `tf.Tensor` to add.
 * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function add_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'add');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'add');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    const forward = (backend, save) => {
        const res = backend.add($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Add"]);
}
const add = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ add_ });
//# sourceMappingURL=add.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js ***!
  \**************************************************************/
/*! exports provided: addN */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addN", function() { return addN; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 *
 * tf.addN([a, b, c]).print();
 * ```
 * @param tensors A list of tensors with the same shape and dtype.
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function addN_(tensors) {
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +
        `${tensors.length}`);
    const $tensors = tensors.map((t, i) => Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(t, `tensors${i}`, 'addN'));
    const firstTensor = $tensors[0];
    $tensors.forEach(t => {
        if (t.dtype !== firstTensor.dtype) {
            throw new Error('All tensors passed to tf.addN() must have the same dtype');
        }
    });
    $tensors.forEach(t => {
        if (!_util__WEBPACK_IMPORTED_MODULE_3__["arraysEqual"](t.shape, firstTensor.shape)) {
            throw new Error('All tensors passed to tf.addN() must have the same shape');
        }
    });
    const forward = (backend, save) => {
        const res = backend.addN($tensors);
        save($tensors);
        return res;
    };
    const inputs = $tensors;
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["AddN"]);
}
const addN = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ addN_ });
//# sourceMappingURL=add_n.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/all.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/all.js ***!
  \************************************************************/
/*! exports provided: all */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "all", function() { return all; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the logical and of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.all().print();  // or tf.all(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.all(axis).print();  // or tf.all(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function all_(x, axis = null, keepDims = false) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'all', 'bool');
    const forward = (backend) => {
        const origAxes = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape);
        let axes = origAxes;
        const permutedAxes = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"])(axes, $x.rank);
        if (permutedAxes != null) {
            $x = Object(_transpose__WEBPACK_IMPORTED_MODULE_7__["transpose"])($x, permutedAxes);
            axes = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"])(axes.length, $x.rank);
        }
        const res = backend.all($x, axes);
        if (keepDims) {
            const newShape = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["expandShapeToKeepDim"])(res.shape, origAxes);
            return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, newShape);
        }
        return res;
    };
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["All"], attrs);
}
const all = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ all_ });
//# sourceMappingURL=all.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/any.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/any.js ***!
  \************************************************************/
/*! exports provided: any */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "any", function() { return any; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the logical or of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.any().print();  // or tf.any(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.any(axis).print();  // or tf.any(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function any_(x, axis = null, keepDims = false) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'any', 'bool');
    const forward = (backend) => {
        const origAxes = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape);
        let axes = origAxes;
        const permutedAxes = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"])(axes, $x.rank);
        if (permutedAxes != null) {
            $x = Object(_transpose__WEBPACK_IMPORTED_MODULE_7__["transpose"])($x, permutedAxes);
            axes = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"])(axes.length, $x.rank);
        }
        const res = backend.any($x, axes);
        if (keepDims) {
            const newShape = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["expandShapeToKeepDim"])(res.shape, origAxes);
            return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, newShape);
        }
        return res;
    };
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Any"], attrs);
}
// tslint:disable-next-line:variable-name
const any = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ any_ });
//# sourceMappingURL=any.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js ***!
  \****************************************************************/
/*! exports provided: argMax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argMax", function() { return argMax; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMax_(x, axis = 0) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'argMax');
    const forward = (backend, save) => {
        save([$x]);
        let axes = _util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"](axis, $x.shape);
        const permutedAxes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"](axes, $x.rank);
        if (permutedAxes != null) {
            $x = Object(_transpose__WEBPACK_IMPORTED_MODULE_6__["transpose"])($x, permutedAxes);
            axes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"](axes.length, $x.rank);
        }
        return backend.argMax($x, axes[0]);
    };
    const inputs = { x: $x };
    const attrs = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ArgMax"], attrs);
}
const argMax = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ argMax_ });
//# sourceMappingURL=arg_max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js ***!
  \****************************************************************/
/*! exports provided: argMin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argMin", function() { return argMin; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the indices of the minimum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMin().print();  // or tf.argMin(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMin(axis).print();  // or tf.argMin(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMin_(x, axis = 0) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'argMin');
    const forward = (backend, save) => {
        save([$x]);
        if (axis == null) {
            axis = 0;
        }
        let axes = _util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"](axis, $x.shape);
        const permutedAxes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"](axes, $x.rank);
        if (permutedAxes != null) {
            $x = Object(_transpose__WEBPACK_IMPORTED_MODULE_6__["transpose"])($x, permutedAxes);
            axes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"](axes.length, $x.rank);
        }
        return backend.argMin($x, axes[0]);
    };
    const inputs = { x: $x };
    const attrs = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ArgMin"], attrs);
}
const argMin = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ argMin_ });
//# sourceMappingURL=arg_min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js ***!
  \***********************************************************************/
/*! exports provided: getReshaped, getPermuted, getReshapedPermuted, getSliceBeginCoords, getSliceSize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getReshaped", function() { return getReshaped; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPermuted", function() { return getPermuted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getReshapedPermuted", function() { return getReshapedPermuted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSliceBeginCoords", function() { return getSliceBeginCoords; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSliceSize", function() { return getSliceSize; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Gets the new shape of the input Tensor after it's been reshaped
 * to:
 * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
 * inputShape[1], ..., inputShape[N-1]]
 *
 * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {
    let reshaped = [];
    if (batchToSpace) {
        reshaped = reshaped.concat(blockShape.slice(0));
        reshaped.push(inputShape[0] / prod);
        reshaped = reshaped.concat(inputShape.slice(1));
    }
    else {
        reshaped = reshaped.concat(inputShape[0]);
        const spatialLength = blockShape.length;
        for (let i = 0; i < spatialLength; ++i) {
            reshaped =
                reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);
        }
        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
    }
    return reshaped;
}
/**
 * Gets the permutation that will transpose the dimensions of the
 * reshaped tensor to shape:
 *
 * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
 * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {
    const permuted = [];
    if (batchToSpace) {
        permuted.push(blockShapeRank);
        for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {
            if (i <= 2 * blockShapeRank) {
                permuted.push(i);
                permuted.push(i - (blockShapeRank + 1));
            }
            else {
                permuted.push(i);
            }
        }
    }
    else {
        const permutedBeforeBatch = [];
        const permutedAfterBatch = [];
        for (let i = 1; i < reshapedRank; ++i) {
            if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {
                permutedAfterBatch.push(i);
            }
            else {
                permutedBeforeBatch.push(i);
            }
        }
        permuted.push(...permutedBeforeBatch);
        permuted.push(0);
        permuted.push(...permutedAfterBatch);
    }
    return permuted;
}
/**
 * Gets the shape of the reshaped and permuted input Tensor before any cropping
 * is applied.  The new shape will be:
 *
 * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
 * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {
    const reshapedPermuted = [];
    if (batchToSpace) {
        reshapedPermuted.push(inputShape[0] / prod);
    }
    else {
        reshapedPermuted.push(inputShape[0] * prod);
    }
    for (let i = 1; i < inputShape.length; ++i) {
        if (i <= blockShape.length) {
            if (batchToSpace) {
                reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
            }
            else {
                reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
            }
        }
        else {
            reshapedPermuted.push(inputShape[i]);
        }
    }
    return reshapedPermuted;
}
/**
 * Converts the crops argument into the beginning coordinates of a slice
 * operation.
 */
function getSliceBeginCoords(crops, blockShape) {
    const sliceBeginCoords = [0];
    for (let i = 0; i < blockShape; ++i) {
        sliceBeginCoords.push(crops[i][0]);
    }
    return sliceBeginCoords;
}
/**
 * Converts the crops argument into the size of a slice operation.  When
 * combined with getSliceBeginCoords this function allows the reshaped and
 * permuted Tensor to be cropped to its final output shape of:
 *
 * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
 * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
 * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getSliceSize(uncroppedShape, crops, blockShape) {
    const sliceSize = uncroppedShape.slice(0, 1);
    for (let i = 0; i < blockShape; ++i) {
        sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
    }
    return sliceSize;
}
//# sourceMappingURL=array_ops_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js ***!
  \*************************************************************/
/*! exports provided: asin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asin", function() { return asin; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asin().print();  // or tf.asin(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asin_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'asin');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.asin($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Asin"]);
}
const asin = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ asin_ });
//# sourceMappingURL=asin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js ***!
  \**************************************************************/
/*! exports provided: asinh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asinh", function() { return asinh; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
 * `asinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asinh().print();  // or tf.asinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asinh_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'asinh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.asinh($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Asinh"]);
}
const asinh = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ asinh_ });
//# sourceMappingURL=asinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js ***!
  \*************************************************************/
/*! exports provided: atan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atan", function() { return atan; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.atan().print();  // or tf.atan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'atan');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.atan($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Atan"]);
}
const atan = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ atan_ });
//# sourceMappingURL=atan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js ***!
  \**************************************************************/
/*! exports provided: atan2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atan2", function() { return atan2; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
 * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
 *
 * tf.atan2(a, b).print()
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan2_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'atan2');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'atan2');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    const forward = (backend, save) => {
        const res = backend.atan2($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Atan2"]);
}
const atan2 = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ atan2_ });
//# sourceMappingURL=atan2.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js ***!
  \**************************************************************/
/*! exports provided: atanh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atanh", function() { return atanh; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
 * `atanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.atanh().print();  // or tf.atanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atanh_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'atanh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.atanh($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Atanh"]);
}
const atanh = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ atanh_ });
//# sourceMappingURL=atanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js ***!
  \*****************************************************************/
/*! exports provided: avgPool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "avgPool", function() { return avgPool; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */
function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'avgPool', 'float32');
    const dilations = 1;
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_5__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](pad), () => `Error in avgPool: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = (backend, save) => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_5__["computePool2DInfo"](x4D.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
        save([x4D]);
        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
            _util__WEBPACK_IMPORTED_MODULE_3__["arraysEqual"](convInfo.inShape, convInfo.outShape)) {
            return x4D.clone();
        }
        return backend.avgPool(x4D, convInfo);
    };
    const inputs = { x: x4D };
    const attrs = { filterSize, strides, pad, dimRoundingMode };
    let res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["AvgPool"], attrs);
    res = Object(_cast__WEBPACK_IMPORTED_MODULE_4__["cast"])(res, $x.dtype);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const avgPool = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ avgPool_ });
//# sourceMappingURL=avg_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js ***!
  \********************************************************************/
/*! exports provided: avgPool3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "avgPool3d", function() { return avgPool3d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Computes the 3D average pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.avgPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates:
 *     `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {
    if (dilations == null) {
        dilations = [1, 1, 1];
    }
    else {
        Object(_globals__WEBPACK_IMPORTED_MODULE_1__["deprecationWarn"])('dilations is deprecated, this field will be gone in ' +
            'v3.0.0.');
    }
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(x, 'x', 'avgPool3d', 'float32');
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_8__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_4__["assert"](x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_4__["assert"](dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` +
        `but got dataFormat of ${dataFormat}`);
    _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_6__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in avgPool3d: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_util__WEBPACK_IMPORTED_MODULE_4__["isInt"](pad), () => `Error in avgPool3d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = (backend, save) => {
        if (dilations == null) {
            dilations = [1, 1, 1];
        }
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_6__["computePool3DInfo"](x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
        save([x5D]);
        return backend.avgPool3d(x5D, convInfo);
    };
    const inputs = { x: x5D };
    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };
    let res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["AvgPool3D"], attrs);
    res = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])(res, x5D.dtype);
    if (reshapedTo5D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_8__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const avgPool3d = Object(_operation__WEBPACK_IMPORTED_MODULE_7__["op"])({ avgPool3d_ });
//# sourceMappingURL=avg_pool_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_backprop.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_backprop.js ***!
  \*****************************************************************************/
/*! exports provided: avgPool3dBackprop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "avgPool3dBackprop", function() { return avgPool3dBackprop; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the backprop of a 3d avg pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation
 *     rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function avgPool3dBackprop_(dy, input, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {
    const $dy = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(dy, 'dy', 'avgPool3dBackprop');
    const $input = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(input, 'input', 'avgPool3dBackprop');
    let dy5D = $dy;
    let input5D = $input;
    let reshapedTo5D = false;
    if ($input.rank === 4) {
        reshapedTo5D = true;
        dy5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
        input5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($input, [
            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]
        ]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](dy5D.rank === 5, () => `Error in avgPool3dBackprop: dy must be rank 5 but got rank ` +
        `${dy5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](input5D.rank === 5, () => `Error in avgPool3dBackprop: input must be rank 5 but got rank ` +
        `${input5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_4__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in avgPool3dBackprop: Either strides or dilations ' +
        `must be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](pad), () => `Error in maxPool3dBackprop: pad must be an integer when ` +
            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = backend => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computePool3DInfo"](input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        return backend.avgPool3dBackprop(dy5D, input5D, convInfo);
    };
    const inputs = { dy: dy5D, input: input5D };
    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["AvgPool3DBackprop"], attrs);
    if (reshapedTo5D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const avgPool3dBackprop = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ avgPool3dBackprop_ });
//# sourceMappingURL=avg_pool_3d_backprop.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_backprop.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_backprop.js ***!
  \**************************************************************************/
/*! exports provided: avgPoolBackprop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "avgPoolBackprop", function() { return avgPoolBackprop; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the backprop of an 2D avg pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The input image, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */
function avgPoolBackprop_(dy, input, filterSize, strides, pad) {
    const $dy = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(dy, 'dy', 'avgPoolBackprop');
    const $input = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(input, 'input', 'avgPoolBackprop');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);
    let input4D = $input;
    let dy4D = $dy;
    let reshapedTo4D = false;
    if ($input.rank === 3) {
        reshapedTo4D = true;
        input4D =
            Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);
        dy4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](dy4D.rank === 4, () => `Error in avgPoolBackprop: dy must be rank 4 but got rank ` +
        `${dy4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](input4D.rank === 4, () => `Error in avgPoolBackprop: input must be rank 4 but got rank ` +
        `${input4D.rank}.`);
    const forward = backend => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computePool2DInfo"](input4D.shape, filterSize, strides, 1 /* dilations */, pad);
        return backend.avgPoolBackprop(dy4D, input4D, convInfo);
    };
    const inputs = { dy: dy4D, input: input4D };
    const attrs = { filterSize, strides, pad };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["AvgPoolBackprop"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const avgPoolBackprop = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ avgPoolBackprop_ });
//# sourceMappingURL=avg_pool_backprop.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js ***!
  \******************************************************************/
/*! exports provided: axesAreInnerMostDims, combineLocations, computeOutAndReduceShapes, expandShapeToKeepDim, assertAxesAreInnerMostDims, getAxesPermutation, getUndoAxesPermutation, getInnerMostAxes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "axesAreInnerMostDims", function() { return axesAreInnerMostDims; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineLocations", function() { return combineLocations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeOutAndReduceShapes", function() { return computeOutAndReduceShapes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expandShapeToKeepDim", function() { return expandShapeToKeepDim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertAxesAreInnerMostDims", function() { return assertAxesAreInnerMostDims; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAxesPermutation", function() { return getAxesPermutation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUndoAxesPermutation", function() { return getUndoAxesPermutation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getInnerMostAxes", function() { return getInnerMostAxes; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns true if the axis specifies the inner most dimensions of the
 * array.
 */
function axesAreInnerMostDims(axes, rank) {
    for (let i = 0; i < axes.length; ++i) {
        if (axes[axes.length - i - 1] !== rank - 1 - i) {
            return false;
        }
    }
    return true;
}
function combineLocations(outputLoc, reduceLoc, axes) {
    const rank = outputLoc.length + reduceLoc.length;
    const loc = [];
    let outIdx = 0;
    let reduceIdx = 0;
    for (let dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            loc.push(outputLoc[outIdx++]);
        }
        else {
            loc.push(reduceLoc[reduceIdx++]);
        }
    }
    return loc;
}
function computeOutAndReduceShapes(aShape, axes) {
    const outShape = [];
    const rank = aShape.length;
    for (let dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            outShape.push(aShape[dim]);
        }
    }
    const reduceShape = axes.map(dim => aShape[dim]);
    return [outShape, reduceShape];
}
function expandShapeToKeepDim(shape, axes) {
    const reduceSubShape = axes.map(x => 1);
    return combineLocations(shape, reduceSubShape, axes);
}
function assertAxesAreInnerMostDims(msg, axes, rank) {
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +
        `Got axes ${axes} and rank-${rank} input.`);
}
/**
 * Returns the axes permutation to be used with `tf.transpose`, if such
 * permutation is necessary. Otherwise it returns null. This method is used by
 * operations that operate only on inner-most axes.
 */
function getAxesPermutation(axes, rank) {
    if (axesAreInnerMostDims(axes, rank)) {
        return null;
    }
    const result = [];
    for (let i = 0; i < rank; ++i) {
        if (axes.indexOf(i) === -1) {
            result.push(i);
        }
    }
    axes.forEach(axis => result.push(axis));
    return result;
}
/** Returns the axes permutation that undoes the original permutation. */
function getUndoAxesPermutation(axes) {
    return axes.map((axis, i) => [i, axis])
        .sort((a, b) => a[1] - b[1])
        .map(x => x[0]);
}
function getInnerMostAxes(numAxes, rank) {
    const res = [];
    for (let i = rank - numAxes; i < rank; ++i) {
        res.push(i);
    }
    return res;
}
//# sourceMappingURL=axis_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js ***!
  \************************************************************************/
/*! exports provided: basicLSTMCell */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "basicLSTMCell", function() { return basicLSTMCell; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tanh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Computes the next state and output of a BasicLSTMCell.
 *
 * Returns `[newC, newH]`.
 *
 * Derived from tf.contrib.rnn.BasicLSTMCell.
 *
 * @param forgetBias Forget bias for the cell.
 * @param lstmKernel The weights for the cell.
 * @param lstmBias The bias for the cell.
 * @param data The input to the cell.
 * @param c Previous cell state.
 * @param h Previous cell output.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
    const $forgetBias = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(forgetBias, 'forgetBias', 'basicLSTMCell');
    const $lstmKernel = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(lstmKernel, 'lstmKernel', 'basicLSTMCell');
    const $lstmBias = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(lstmBias, 'lstmBias', 'basicLSTMCell');
    const $data = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(data, 'data', 'basicLSTMCell');
    const $c = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(c, 'c', 'basicLSTMCell');
    const $h = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(h, 'h', 'basicLSTMCell');
    const combined = Object(_concat__WEBPACK_IMPORTED_MODULE_2__["concat"])([$data, $h], 1);
    const weighted = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_3__["matMul"])(combined, $lstmKernel);
    const res = Object(_add__WEBPACK_IMPORTED_MODULE_1__["add"])(weighted, $lstmBias);
    // i = input_gate, j = new_input, f = forget_gate, o = output_gate
    const batchSize = res.shape[0];
    const sliceCols = res.shape[1] / 4;
    const sliceSize = [batchSize, sliceCols];
    const i = Object(_slice__WEBPACK_IMPORTED_MODULE_7__["slice"])(res, [0, 0], sliceSize);
    const j = Object(_slice__WEBPACK_IMPORTED_MODULE_7__["slice"])(res, [0, sliceCols], sliceSize);
    const f = Object(_slice__WEBPACK_IMPORTED_MODULE_7__["slice"])(res, [0, sliceCols * 2], sliceSize);
    const o = Object(_slice__WEBPACK_IMPORTED_MODULE_7__["slice"])(res, [0, sliceCols * 3], sliceSize);
    const newC = Object(_add__WEBPACK_IMPORTED_MODULE_1__["add"])(Object(_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_sigmoid__WEBPACK_IMPORTED_MODULE_6__["sigmoid"])(i), Object(_tanh__WEBPACK_IMPORTED_MODULE_8__["tanh"])(j)), Object(_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])($c, Object(_sigmoid__WEBPACK_IMPORTED_MODULE_6__["sigmoid"])(Object(_add__WEBPACK_IMPORTED_MODULE_1__["add"])($forgetBias, f))));
    const newH = Object(_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_tanh__WEBPACK_IMPORTED_MODULE_8__["tanh"])(newC), Object(_sigmoid__WEBPACK_IMPORTED_MODULE_6__["sigmoid"])(o));
    return [newC, newH];
}
const basicLSTMCell = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ basicLSTMCell_ });
//# sourceMappingURL=basic_lstm_cell.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js ***!
  \**************************************************************************/
/*! exports provided: batchToSpaceND */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchToSpaceND", function() { return batchToSpaceND; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
 * shape `blockShape + [batch]`, interleaves these blocks back into the grid
 * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
 * the same rank as the input. The spatial dimensions of this intermediate
 * result are then optionally cropped according to `crops` to produce the
 * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
 * description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
 * const blockShape = [2, 2];
 * const crops = [[0, 0], [0, 0]];
 *
 * x.batchToSpaceND(blockShape, crops).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
 * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
 * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
 * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
 * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
 * x.shape[N-1]]`
 *
 * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
 * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
 * according to `crops` to produce the output of shape: `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
 * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
 * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function batchToSpaceND_(x, blockShape, crops) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'batchToSpaceND');
    const prod = blockShape.reduce((a, b) => a * b);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` +
        `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);
    const forward = backend => {
        return backend.batchToSpaceND($x, blockShape, crops);
    };
    const inputs = { x: $x };
    const attrs = { blockShape, crops };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["BatchToSpaceND"], attrs);
}
const batchToSpaceND = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ batchToSpaceND_ });
//# sourceMappingURL=batch_to_space_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js ***!
  \******************************************************************/
/*! exports provided: batchNorm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchNorm", function() { return batchNorm; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _batchnorm_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./batchnorm_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Batch normalization.
 *
 * As described in
 * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
 *
 * Mean, variance, scale, and offset can be of two shapes:
 *   - The same shape as the input.
 *   - In the common case, the depth dimension is the last dimension of x, so
 *     the values would be an `tf.Tensor1D` of shape [depth].
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that parameters passed are of given rank
 *   - `tf.batchNorm2d`
 *   - `tf.batchNorm3d`
 *   - `tf.batchNorm4d`
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
    if (varianceEpsilon == null) {
        varianceEpsilon = 0.001;
    }
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'batchNorm');
    const $mean = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(mean, 'mean', 'batchNorm');
    const $variance = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($mean.rank === $variance.rank, () => 'Batch normalization gradient requires mean and variance to have ' +
        'equal ranks.');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($offset == null || $mean.rank === $offset.rank, () => 'Batch normalization gradient requires mean and offset to have ' +
        'equal ranks.');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($scale == null || $mean.rank === $scale.rank, () => 'Batch normalization gradient requires mean and scale to have ' +
        'equal ranks.');
    const x4D = Object(_batchnorm_util__WEBPACK_IMPORTED_MODULE_4__["xAs4D"])($x);
    const forward = (backend, save) => {
        save([x4D, $mean, $variance, $scale]);
        return backend.batchNorm(x4D, as1DOr4D($mean), as1DOr4D($variance), as1DOr4D($offset), as1DOr4D($scale), varianceEpsilon);
    };
    const inputs = {
        x: x4D,
        scale: $scale,
        offset: $offset,
        mean: $mean,
        variance: $variance
    };
    const attrs = { varianceEpsilon };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["FusedBatchNorm"], attrs);
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, $x.shape);
}
function as1DOr4D(x) {
    if (x == null) {
        return null;
    }
    if (x.rank === 0) {
        // tslint:disable-next-line:no-unnecessary-type-assertion
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(x, [x.size]);
    }
    else if (x.rank === 1) {
        return x;
    }
    else if (x.rank === 2) {
        // tslint:disable-next-line:no-unnecessary-type-assertion
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(x, [1, 1, x.shape[0], x.shape[1]]);
    }
    else if (x.rank === 3) {
        // tslint:disable-next-line:no-unnecessary-type-assertion
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
    }
    return x;
}
const batchNorm = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ batchNorm_ });
//# sourceMappingURL=batchnorm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js ***!
  \********************************************************************/
/*! exports provided: batchNorm2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchNorm2d", function() { return batchNorm2d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");




/**
 * Batch normalization, strictly for 2D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'batchNorm');
    const $mean = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(mean, 'mean', 'batchNorm');
    const $variance = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +
        `got rank ${$mean.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +
        `but got rank ${$variance.rank}.`);
    if ($scale != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +
            `but got rank ${$scale.rank}.`);
    }
    if ($offset != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +
            `but got rank ${$offset.rank}.`);
    }
    return Object(_batchnorm__WEBPACK_IMPORTED_MODULE_2__["batchNorm"])($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm2d = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ batchNorm2d_ });
//# sourceMappingURL=batchnorm2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js ***!
  \********************************************************************/
/*! exports provided: batchNorm3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchNorm3d", function() { return batchNorm3d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");




/**
 * Batch normalization, strictly for 3D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'batchNorm');
    const $mean = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(mean, 'mean', 'batchNorm');
    const $variance = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($mean.rank === 3 || $mean.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +
        `got rank ${$mean.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($variance.rank === 3 || $variance.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +
        `but got rank ${$variance.rank}.`);
    if ($scale != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($scale.rank === 3 || $scale.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +
            `but got rank ${$scale.rank}.`);
    }
    if ($offset != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($offset.rank === 3 || $offset.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +
            `but got rank ${$offset.rank}.`);
    }
    return Object(_batchnorm__WEBPACK_IMPORTED_MODULE_2__["batchNorm"])($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm3d = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ batchNorm3d_ });
//# sourceMappingURL=batchnorm3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js ***!
  \********************************************************************/
/*! exports provided: batchNorm4d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchNorm4d", function() { return batchNorm4d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");




/**
 * Batch normalization, strictly for 4D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'batchNorm');
    const $mean = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(mean, 'mean', 'batchNorm');
    const $variance = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +
        `got rank ${$mean.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +
        `but got rank ${$variance.rank}.`);
    if ($scale != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +
            `but got rank ${$scale.rank}.`);
    }
    if ($offset != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +
            `but got rank ${$offset.rank}.`);
    }
    return Object(_batchnorm__WEBPACK_IMPORTED_MODULE_2__["batchNorm"])($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm4d = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ batchNorm4d_ });
//# sourceMappingURL=batchnorm4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js ***!
  \***********************************************************************/
/*! exports provided: xAs4D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xAs4D", function() { return xAs4D; });
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");

function xAs4D(x) {
    let x4D;
    if (x.rank === 0 || x.rank === 1) {
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(x, [1, 1, 1, x.size]);
    }
    else if (x.rank === 2) {
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(x, [1, 1, x.shape[0], x.shape[1]]);
    }
    else if (x.rank === 3) {
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
    }
    else {
        x4D = x;
    }
    return x4D;
}
//# sourceMappingURL=batchnorm_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js ***!
  \*******************************************************************/
/*! exports provided: addStrict, divStrict, maximumStrict, minimumStrict, modStrict, mulStrict, powStrict, squaredDifferenceStrict, subStrict */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addStrict", function() { return addStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divStrict", function() { return divStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maximumStrict", function() { return maximumStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "minimumStrict", function() { return minimumStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modStrict", function() { return modStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mulStrict", function() { return mulStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "powStrict", function() { return powStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDifferenceStrict", function() { return squaredDifferenceStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subStrict", function() { return subStrict; });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













/**
 * @deprecated
 * Adds two `tf.Tensor`s element-wise, A + B.
 *
 * Inputs must be the same shape. For broadcasting support, use add() instead.
 *
 * @param a The first Tensor to add element-wise.
 * @param b The second Tensor to add element-wise.
 */
function addStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'addStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'addStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in addStrict: ');
    return Object(_add__WEBPACK_IMPORTED_MODULE_3__["add"])($a, $b);
}
/**
 * @deprecated
 * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.sub` instead.
 *
 * @param a The first Tensor to subtract element-wise.
 * @param b The second Tensor to subtract element-wise.
 */
function subStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'subStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'subStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in subStrict: ');
    return Object(_sub__WEBPACK_IMPORTED_MODULE_12__["sub"])($a, $b);
}
/**
 * @deprecated
 * Computes the power of one `tf.Tensor` to another. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.pow` instead.
 *
 * @param base The base tensor to pow element-wise.
 * @param exp The exponent tensor to pow element-wise.
 */
function powStrict_(base, exp) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"](base.shape, exp.shape, 'Error in powStrict: ');
    return Object(_pow__WEBPACK_IMPORTED_MODULE_10__["pow"])(base, exp);
}
/**
 * @deprecated
 * Multiplies two `tf.Tensor`s element-wise, A * B.
 *
 * Inputs must be the same shape. For broadcasting support, use `tf.mul`.
 *
 * @param a The first tensor to multiply.
 * @param b The first tensor to multiply. Must have the same
 *    dtype as `a`.
 */
function mulStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'mul');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'mul');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in multiplyStrict: ');
    return Object(_mul__WEBPACK_IMPORTED_MODULE_8__["mul"])($a, $b);
}
/**
 * @deprecated
 * Divides two `tf.Tensor`s element-wise, A / B. Inputs must
 * be the same shape.
 *
 * @param a The first tensor as the numerator for element-wise division.
 * @param b The second tensor as the denominator for element-wise division.
 */
function divStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'div');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'div');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in divideStrict: ');
    return Object(_div__WEBPACK_IMPORTED_MODULE_4__["div"])($a, $b);
}
/**
 * @deprecated
 * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use mod().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */
function modStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'modStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'modStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in modStrict: ');
    return Object(_mod__WEBPACK_IMPORTED_MODULE_7__["mod"])($a, $b);
}
/**
 * @deprecated
 * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use minimum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */
function minimumStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'minimumStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'minimumStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in minimumStrict: ');
    return Object(_minimum__WEBPACK_IMPORTED_MODULE_6__["minimum"])($a, $b);
}
/**
 * @deprecated
 * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use maximum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */
function maximumStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'maximumStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'maximumStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in maximumStrict: ');
    return Object(_maximum__WEBPACK_IMPORTED_MODULE_5__["maximum"])($a, $b);
}
/**
 * @deprecated
 * Returns (a - b) * (a - b) element-wise.
 *
 * Inputs must be the same shape. For broadcasting support, use
 * `tf.squaredDifference` instead.
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */
function squaredDifferenceStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'squaredDifferenceStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'squaredDifferenceStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"]($a.shape, $b.shape, 'Error in squaredDifferenceStrict: ');
    return Object(_squared_difference__WEBPACK_IMPORTED_MODULE_11__["squaredDifference"])($a, $b);
}
const addStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ addStrict_ });
const divStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ divStrict_ });
const maximumStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ maximumStrict_ });
const minimumStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ minimumStrict_ });
const modStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ modStrict_ });
const mulStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ mulStrict_ });
const powStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ powStrict_ });
const squaredDifferenceStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ squaredDifferenceStrict_ });
const subStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ subStrict_ });
//# sourceMappingURL=binary_ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js ***!
  \*********************************************************************/
/*! exports provided: booleanMaskAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "booleanMaskAsync", function() { return booleanMaskAsync; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _gather__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _where_async__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./where_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Apply boolean mask to tensor.
 *
 * ```js
 * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
 * const mask = tf.tensor1d([1, 0, 1], 'bool');
 * const result = await tf.booleanMaskAsync(tensor, mask);
 * result.print();
 * ```
 *
 * @param tensor N-D tensor.
 * @param mask K-D boolean tensor, K <= N and K must be known statically.
 * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
 *     By default, axis is 0 which will mask from the first dimension.
 *     Otherwise K + axis <= N.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
async function booleanMaskAsync_(tensor, mask, axis) {
    const $tensor = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(tensor, 'tensor', 'boolMask');
    const $mask = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(mask, 'mask', 'boolMask', 'bool');
    const axisFrom = axis == null ? 0 : axis;
    const maskDim = $mask.rank;
    const tensorShape = $tensor.shape;
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](maskDim > 0, () => 'mask cannot be scalar');
    _util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"](tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);
    let leadingSize = 1;
    for (let i = axisFrom; i < axisFrom + maskDim; i++) {
        leadingSize *= tensorShape[i];
    }
    const targetTensorShape = tensorShape.slice(0, axisFrom)
        .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));
    const reshapedTensor = Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])($tensor, targetTensorShape);
    const reshapedMask = Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])($mask, [-1]);
    const positivePositions = await Object(_where_async__WEBPACK_IMPORTED_MODULE_5__["whereAsync"])(reshapedMask);
    const indices = Object(_squeeze__WEBPACK_IMPORTED_MODULE_4__["squeeze"])(positivePositions, [1]);
    const res = Object(_gather__WEBPACK_IMPORTED_MODULE_2__["gather"])(reshapedTensor, indices, axisFrom);
    // Ensure no memory leak.
    if (tensor !== $tensor) {
        $tensor.dispose();
    }
    if (mask !== $mask) {
        $mask.dispose();
    }
    indices.dispose();
    reshapedTensor.dispose();
    reshapedMask.dispose();
    positivePositions.dispose();
    return res;
}
const booleanMaskAsync = booleanMaskAsync_;
//# sourceMappingURL=boolean_mask.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js ***!
  \*********************************************************************/
/*! exports provided: broadcastTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "broadcastTo", function() { return broadcastTo; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Broadcast an array to a compatible shape NumPy-style.
 *
 * The tensor's shape is compared to the broadcast shape from end to beginning.
 * Ones are prepended to the tensor's shape until is has the same length as
 * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
 * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
 * the input tensor is tiled N times along that axis (using tf.tile).
 *
 * @param input The tensor that is to be broadcasted.
 * @param shape The input is to be broadcast to this shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function broadcastTo_(x, shape) {
    let input = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'broadcastTo', 'x');
    const xShape = input.shape;
    if (shape.some(d => !(d > 0) || d % 1 !== 0)) {
        throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);
    }
    if (shape.length < input.rank) {
        throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);
    }
    if (shape.length > input.rank) {
        const newShape = input.shape.slice();
        while (newShape.length < shape.length) {
            newShape.unshift(1);
        }
        input = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(input, newShape);
    }
    const inputShape = input.shape;
    const reps = Array.from(shape);
    for (let i = shape.length - 1; i >= 0; i--) {
        if (inputShape[i] === shape[i]) {
            reps[i] = 1;
        }
        else if (input.shape[i] !== 1) {
            throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);
        }
    }
    const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);
    if (axes.length === 0) {
        return Object(_clone__WEBPACK_IMPORTED_MODULE_3__["clone"])(input);
    }
    const forward = (backend) => backend.tile(input, reps);
    const inputs = { x: input };
    const attrs = { shape, inputShape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["BroadcastTo"], attrs);
}
const broadcastTo = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ broadcastTo_ });
//# sourceMappingURL=broadcast_to.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js ***!
  \***********************************************************************/
/*! exports provided: getBroadcastDims, getReductionAxes, assertAndGetBroadcastShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBroadcastDims", function() { return getBroadcastDims; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getReductionAxes", function() { return getReductionAxes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertAndGetBroadcastShape", function() { return assertAndGetBroadcastShape; });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Returns the dimensions in the input shape that are broadcasted to
 * produce the provided output shape.
 *
 * The returned dimensions are 0-indexed and sorted. An example:
 * inShape = [4, 1, 3]
 * outShape = [5, 4, 3, 3]
 * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
 */
function getBroadcastDims(inShape, outShape) {
    const inRank = inShape.length;
    const dims = [];
    for (let i = 0; i < inRank; i++) {
        const dim = inRank - 1 - i;
        const a = inShape[dim] || 1;
        const b = outShape[outShape.length - 1 - i] || 1;
        if (b > 1 && a === 1) {
            dims.unshift(dim);
        }
    }
    return dims;
}
/**
 * Returns the axes in the output space that should be reduced to produce
 * the input space.
 */
function getReductionAxes(inShape, outShape) {
    const result = [];
    for (let i = 0; i < outShape.length; i++) {
        const inDim = inShape[inShape.length - i - 1];
        const outAxis = outShape.length - i - 1;
        const outDim = outShape[outAxis];
        if (inDim == null || (inDim === 1 && outDim > 1)) {
            result.unshift(outAxis);
        }
    }
    return result;
}
function assertAndGetBroadcastShape(shapeA, shapeB) {
    const result = [];
    const l = Math.max(shapeA.length, shapeB.length);
    for (let i = 0; i < l; i++) {
        let a = shapeA[shapeA.length - i - 1];
        if (a == null) {
            a = 1;
        }
        let b = shapeB[shapeB.length - i - 1];
        if (b == null) {
            b = 1;
        }
        if (a === 1) {
            result.unshift(b);
        }
        else if (b === 1) {
            result.unshift(a);
        }
        else if (a !== b) {
            const errMsg = `Operands could not be broadcast together with shapes ` +
                `${shapeA} and ${shapeB}.`;
            throw Error(errMsg);
        }
        else {
            result.unshift(a);
        }
    }
    return result;
}
//# sourceMappingURL=broadcast_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js ***!
  \****************************************************************/
/*! exports provided: toPixels, fromPixels */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toPixels", function() { return toPixels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPixels", function() { return fromPixels; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _tensor3d__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tensor3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








let fromPixels2DContext;
/**
 * Creates a `tf.Tensor` from an image.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * tf.browser.fromPixels(image).print();
 * ```
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */
function fromPixels_(pixels, numChannels = 3) {
    // Sanity checks.
    if (numChannels > 4) {
        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
    }
    if (pixels == null) {
        throw new Error('pixels passed to tf.browser.fromPixels() can not be null');
    }
    let isPixelData = false;
    let isImageData = false;
    let isVideo = false;
    let isImage = false;
    let isCanvasLike = false;
    if (pixels.data instanceof Uint8Array) {
        isPixelData = true;
    }
    else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {
        isImageData = true;
    }
    else if (typeof (HTMLVideoElement) !== 'undefined' &&
        pixels instanceof HTMLVideoElement) {
        isVideo = true;
    }
    else if (typeof (HTMLImageElement) !== 'undefined' &&
        pixels instanceof HTMLImageElement) {
        isImage = true;
        // tslint:disable-next-line: no-any
    }
    else if (pixels.getContext != null) {
        isCanvasLike = true;
    }
    else {
        throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +
            `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +
            `in browser, or OffscreenCanvas, ImageData in webworker` +
            ` or {data: Uint32Array, width: number, height: number}, ` +
            `but was ${pixels.constructor.name}`);
    }
    if (isVideo) {
        const HAVE_CURRENT_DATA_READY_STATE = 2;
        if (isVideo &&
            pixels.readyState <
                HAVE_CURRENT_DATA_READY_STATE) {
            throw new Error('The video element has not loaded data yet. Please wait for ' +
                '`loadeddata` event on the <video> element.');
        }
    }
    // If the current backend has 'FromPixels' registered, it has a more
    // efficient way of handling pixel uploads, so we call that.
    const kernel = Object(_kernel_registry__WEBPACK_IMPORTED_MODULE_2__["getKernel"])(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["FromPixels"], _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backendName);
    if (kernel != null) {
        const inputs = { pixels };
        const attrs = { numChannels };
        return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["FromPixels"], inputs, attrs);
    }
    const [width, height] = isVideo ?
        [
            pixels.videoWidth,
            pixels.videoHeight
        ] :
        [pixels.width, pixels.height];
    let vals;
    if (isCanvasLike) {
        vals =
            // tslint:disable-next-line:no-any
            pixels.getContext('2d').getImageData(0, 0, width, height).data;
    }
    else if (isImageData || isPixelData) {
        vals = pixels.data;
    }
    else if (isImage || isVideo) {
        if (fromPixels2DContext == null) {
            fromPixels2DContext = document.createElement('canvas').getContext('2d');
        }
        fromPixels2DContext.canvas.width = width;
        fromPixels2DContext.canvas.height = height;
        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;
    }
    let values;
    if (numChannels === 4) {
        values = new Int32Array(vals);
    }
    else {
        const numPixels = width * height;
        values = new Int32Array(numPixels * numChannels);
        for (let i = 0; i < numPixels; i++) {
            for (let channel = 0; channel < numChannels; ++channel) {
                values[i * numChannels + channel] = vals[i * 4 + channel];
            }
        }
    }
    const outShape = [height, width, numChannels];
    return Object(_tensor3d__WEBPACK_IMPORTED_MODULE_7__["tensor3d"])(values, outShape, 'int32');
}
/**
 * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
 * canvas.
 *
 * When the dtype of the input is 'float32', we assume values in the range
 * [0-1]. Otherwise, when input is 'int32', we assume values in the range
 * [0-255].
 *
 * Returns a promise that resolves when the canvas has been drawn to.
 *
 * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If
 *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
 * grayscale. When depth of 3, we draw with the first three components of
 * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
 * 4, all four components of the depth dimension correspond to r, g, b, a.
 * @param canvas The canvas to draw to.
 *
 * @doc {heading: 'Browser', namespace: 'browser'}
 */
async function toPixels(img, canvas) {
    let $img = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(img, 'img', 'toPixels');
    if (!(img instanceof _tensor__WEBPACK_IMPORTED_MODULE_3__["Tensor"])) {
        // Assume int32 if user passed a native array.
        const originalImgTensor = $img;
        $img = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])(originalImgTensor, 'int32');
        originalImgTensor.dispose();
    }
    if ($img.rank !== 2 && $img.rank !== 3) {
        throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);
    }
    const [height, width] = $img.shape.slice(0, 2);
    const depth = $img.rank === 2 ? 1 : $img.shape[2];
    if (depth > 4 || depth === 2) {
        throw new Error(`toPixels only supports depth of size ` +
            `1, 3 or 4 but got ${depth}`);
    }
    if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {
        throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` +
            ` Please use float32 or int32 tensors.`);
    }
    const data = await $img.data();
    const multiplier = $img.dtype === 'float32' ? 255 : 1;
    const bytes = new Uint8ClampedArray(width * height * 4);
    for (let i = 0; i < height * width; ++i) {
        const rgba = [0, 0, 0, 255];
        for (let d = 0; d < depth; d++) {
            const value = data[i * depth + d];
            if ($img.dtype === 'float32') {
                if (value < 0 || value > 1) {
                    throw new Error(`Tensor values for a float32 Tensor must be in the ` +
                        `range [0 - 1] but encountered ${value}.`);
                }
            }
            else if ($img.dtype === 'int32') {
                if (value < 0 || value > 255) {
                    throw new Error(`Tensor values for a int32 Tensor must be in the ` +
                        `range [0 - 255] but encountered ${value}.`);
                }
            }
            if (depth === 1) {
                rgba[0] = value * multiplier;
                rgba[1] = value * multiplier;
                rgba[2] = value * multiplier;
            }
            else {
                rgba[d] = value * multiplier;
            }
        }
        const j = i * 4;
        bytes[j + 0] = Math.round(rgba[0]);
        bytes[j + 1] = Math.round(rgba[1]);
        bytes[j + 2] = Math.round(rgba[2]);
        bytes[j + 3] = Math.round(rgba[3]);
    }
    if (canvas != null) {
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        const imageData = new ImageData(bytes, width, height);
        ctx.putImageData(imageData, 0, 0);
    }
    if ($img !== img) {
        $img.dispose();
    }
    return bytes;
}
const fromPixels = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ fromPixels_ });
//# sourceMappingURL=browser.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js ***!
  \***************************************************************/
/*! exports provided: buffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return buffer; });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
 *
 * The values are stored in CPU as `TypedArray`. Fill the buffer using
 * `buffer.set()`, or by modifying directly `buffer.values`.
 *
 * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
 * those values.
 *
 * ```js
 * // Create a buffer and set values at particular indices.
 * const buffer = tf.buffer([2, 2]);
 * buffer.set(3, 0, 0);
 * buffer.set(5, 1, 0);
 *
 * // Convert the buffer back to a tensor.
 * buffer.toTensor().print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The dtype of the buffer. Defaults to 'float32'.
 * @param values The values of the buffer as `TypedArray`. Defaults to
 * zeros.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function buffer(shape, dtype = 'float32', values) {
    dtype = dtype || 'float32';
    _util__WEBPACK_IMPORTED_MODULE_1__["assertNonNegativeIntegerDimensions"](shape);
    return new _tensor__WEBPACK_IMPORTED_MODULE_0__["TensorBuffer"](shape, dtype, values);
}
//# sourceMappingURL=buffer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js ***!
  \*************************************************************/
/*! exports provided: cast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cast", function() { return cast; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function cast_(x, dtype) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'cast');
    // Sanity checks.
    if (!_util__WEBPACK_IMPORTED_MODULE_3__["isValidDtype"](dtype)) {
        throw new Error(`Failed to cast to unknown dtype ${dtype}`);
    }
    if (dtype === 'string' && $x.dtype !== 'string' ||
        dtype !== 'string' && $x.dtype === 'string') {
        throw new Error('Only strings can be casted to strings');
    }
    const inputs = { x: $x };
    const attrs = { dtype };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.cast($x, dtype), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Cast"], attrs);
}
const cast = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ cast_ });
//# sourceMappingURL=cast.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js ***!
  \*************************************************************/
/*! exports provided: ceil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.ceil().print();  // or tf.ceil(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function ceil_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'ceil');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.ceil($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Ceil"]);
}
const ceil = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ ceil_ });
//# sourceMappingURL=ceil.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js ***!
  \**********************************************************************/
/*! exports provided: clipByValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clipByValue", function() { return clipByValue; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
 * ```
 * @param x The input tensor.
 * @param clipValueMin Lower-bound of range to be clipped to.
 * @param clipValueMax Upper-bound of range to be clipped to.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function clipByValue_(x, clipValueMin, clipValueMax) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'clipByValue');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]((clipValueMin <= clipValueMax), () => `Error in clip: min (${clipValueMin}) must be ` +
        `less than or equal to max (${clipValueMax}).`);
    const inputs = { x: $x };
    const attrs = { clipValueMin, clipValueMax };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.clip($x, clipValueMin, clipValueMax);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ClipByValue"], attrs);
}
const clipByValue = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ clipByValue_ });
//# sourceMappingURL=clip_by_value.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js ***!
  \**************************************************************/
/*! exports provided: clone */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a new tensor with the same values and shape as the specified
 * tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 *
 * x.clone().print();
 * ```
 *
 * @param x The tensor to clone.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function clone_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'clone', null);
    const forward = () => _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensorFromDataId($x.dataId, $x.shape, $x.dtype);
    const inputs = { x: $x };
    // Note this op is called tf.identity in python. Hence the kernel name used
    // here.
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Identity"]);
}
const clone = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ clone_ });
//# sourceMappingURL=clone.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js ***!
  \****************************************************************/
/*! exports provided: equalStrict, greaterEqualStrict, greaterStrict, lessEqualStrict, lessStrict, notEqualStrict */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equalStrict", function() { return equalStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greaterEqualStrict", function() { return greaterEqualStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greaterStrict", function() { return greaterStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lessEqualStrict", function() { return lessEqualStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lessStrict", function() { return lessStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notEqualStrict", function() { return notEqualStrict; });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _less__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * @deprecated
 * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */
function notEqualStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'notEqualStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'notEqualStrict');
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"])($a.shape, $b.shape, 'Error in notEqualStrict: ');
    return Object(_not_equal__WEBPACK_IMPORTED_MODULE_8__["notEqual"])($a, $b);
}
/**
 * @deprecated
 * Strict version of `tf.less` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */
function lessStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'lessStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'lessStrict');
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"])($a.shape, $b.shape, 'Error in lessStrict: ');
    return Object(_less__WEBPACK_IMPORTED_MODULE_6__["less"])($a, $b);
}
function equalStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'equalStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'equalStrict');
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"])($a.shape, $b.shape, 'Error in equalStrict: ');
    return Object(_equal__WEBPACK_IMPORTED_MODULE_3__["equal"])($a, $b);
}
function lessEqualStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'lessEqualStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'lessEqualStrict');
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"])($a.shape, $b.shape, 'Error in lessEqualStrict: ');
    return Object(_less_equal__WEBPACK_IMPORTED_MODULE_7__["lessEqual"])($a, $b);
}
function greaterStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'greaterStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'greaterStrict');
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"])($a.shape, $b.shape, 'Error in greaterStrict: ');
    return Object(_greater__WEBPACK_IMPORTED_MODULE_4__["greater"])($a, $b);
}
function greaterEqualStrict_(a, b) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'greaterEqualStrict');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'greaterEqualStrict');
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"])($a.shape, $b.shape, 'Error in greaterEqualStrict: ');
    return Object(_greater_equal__WEBPACK_IMPORTED_MODULE_5__["greaterEqual"])($a, $b);
}
const equalStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ equalStrict_ });
const greaterEqualStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ greaterEqualStrict_ });
const greaterStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ greaterStrict_ });
const lessEqualStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ lessEqualStrict_ });
const lessStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ lessStrict_ });
const notEqualStrict = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ notEqualStrict_ });
//# sourceMappingURL=compare.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js ***!
  \****************************************************************/
/*! exports provided: complex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "complex", function() { return complex; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Converts two real numbers to a complex number.
 *
 * Given a tensor `real` representing the real part of a complex number, and a
 * tensor `imag` representing the imaginary part of a complex number, this
 * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
 * where r represents the real part and i represents the imag part.
 *
 * The input tensors real and imag must have the same shape.
 *
 * ```js
 * const real = tf.tensor1d([2.25, 3.25]);
 * const imag = tf.tensor1d([4.75, 5.75]);
 * const complex = tf.complex(real, imag);
 *
 * complex.print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function complex_(real, imag) {
    const $real = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(real, 'real', 'complex');
    const $imag = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(imag, 'imag', 'complex');
    _util__WEBPACK_IMPORTED_MODULE_3__["assertShapesMatch"]($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +
        `must match in call to tf.complex().`);
    const forward = (backend) => {
        return backend.complex($real, $imag);
    };
    const inputs = { real: $real, imag: $imag };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Complex"]);
}
const complex = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ complex_ });
//# sourceMappingURL=complex.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js ***!
  \***************************************************************/
/*! exports provided: concat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return concat; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _concat_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./concat_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Concatenates a list of `tf.Tensor`s along a given axis.
 *
 * The tensors ranks and types must match, and their sizes must match in all
 * dimensions except `axis`.
 *
 * Also available are stricter rank-specific methods that assert that
 * `tensors` are of the given rank:
 *   - `tf.concat1d`
 *   - `tf.concat2d`
 *   - `tf.concat3d`
 *   - `tf.concat4d`
 *
 * Except `tf.concat1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * a.concat(b).print();  // or a.concat(b)
 * ```
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.concat([a, b, c]).print();
 * ```
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [10, 20]]);
 * const b = tf.tensor2d([[3, 4], [30, 40]]);
 * const axis = 1;
 * tf.concat([a, b], axis).print();
 * ```
 * @param tensors A list of tensors to concatenate.
 * @param axis The axis to concate along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function concat_(tensors, axis = 0) {
    Object(_util__WEBPACK_IMPORTED_MODULE_3__["assert"])(tensors.length >= 1, () => 'Pass at least one tensor to concat');
    let $tensors = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensorArray"])(tensors, 'tensors', 'concat');
    if ($tensors[0].dtype === 'complex64') {
        $tensors.forEach(tensor => {
            if (tensor.dtype !== 'complex64') {
                throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${tensor.dtype}. `);
            }
        });
    }
    const forward = (backend, save) => {
        const $axis = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $tensors[0].shape)[0];
        const outShape = Object(_concat_util__WEBPACK_IMPORTED_MODULE_4__["computeOutShape"])($tensors.map(t => t.shape), $axis);
        if (Object(_util__WEBPACK_IMPORTED_MODULE_3__["sizeFromShape"])(outShape) === 0) {
            return Object(_tensor__WEBPACK_IMPORTED_MODULE_6__["tensor"])([], outShape);
        }
        // Keep only non-empty tensors (ignore tensors with 0 in their shape).
        $tensors = $tensors.filter(t => t.size > 0);
        if ($tensors.length === 1) {
            return $tensors[0];
        }
        const shapes = $tensors.map(t => t.shape);
        Object(_concat_util__WEBPACK_IMPORTED_MODULE_4__["assertParamsConsistent"])(shapes, $axis);
        const res = backend.concat($tensors, $axis);
        save($tensors);
        return res;
    };
    const inputs = $tensors;
    const attr = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Concat"], attr);
}
const concat = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ concat_ });
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js ***!
  \******************************************************************/
/*! exports provided: concat1d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat1d", function() { return concat1d; });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(3) = |r1, g1, b1|
 * B: shape(2) = |r2, g2|
 * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @return The concatenated array.
 */
function concat1d_(tensors) {
    return Object(_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(tensors, 0 /* axis */);
}
const concat1d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ concat1d_ });
//# sourceMappingURL=concat_1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js ***!
  \******************************************************************/
/*! exports provided: concat2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat2d", function() { return concat2d; });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *
 * B: shape(2, 3) = | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * C = tf.concat2d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *                  | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * if axis = 1:
 * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
 *                   | r2, g2, b2, r4, g4, b4 |
 *
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concatenate along.
 * @return The concatenated array.
 */
function concat2d_(tensors, axis) {
    return Object(_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(tensors, axis);
}
const concat2d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ concat2d_ });
//# sourceMappingURL=concat_2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js ***!
  \******************************************************************/
/*! exports provided: concat3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat3d", function() { return concat3d; });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of `tf.Tensor3D`s along an axis.
 * See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *
 * B: shape(2, 1, 3) = | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * C = tf.concat3d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *                     | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * if axis = 1:
 * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
 *                     | r2, g2, b2, r4, g4, b4 |
 *
 * if axis = 2:
 * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
 *                      | r2, g2, b2, r4, g4, b4 |
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat3d_(tensors, axis) {
    return Object(_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(tensors, axis);
}
const concat3d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ concat3d_ });
//# sourceMappingURL=concat_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js ***!
  \******************************************************************/
/*! exports provided: concat4d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat4d", function() { return concat4d; });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of `tf.Tensor4D`s along an axis.
 * See `concat` for details.
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat4d_(tensors, axis) {
    return Object(_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(tensors, axis);
}
const concat4d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ concat4d_ });
//# sourceMappingURL=concat_4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js ***!
  \********************************************************************/
/*! exports provided: assertParamsConsistent, computeOutShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertParamsConsistent", function() { return assertParamsConsistent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeOutShape", function() { return computeOutShape; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function assertParamsConsistent(shapes, axis) {
    const rank = shapes[0].length;
    shapes.forEach((shape, i) => {
        _util__WEBPACK_IMPORTED_MODULE_0__["assert"](shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +
            `as the rank of the rest (${rank})`);
    });
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);
    const firstShape = shapes[0];
    shapes.forEach((shape, i) => {
        for (let r = 0; r < rank; r++) {
            _util__WEBPACK_IMPORTED_MODULE_0__["assert"]((r === axis) || (shape[r] === firstShape[r]), () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +
                `does not match the shape of the rest (${firstShape}) ` +
                `along the non-concatenated axis ${i}.`);
        }
    });
}
function computeOutShape(shapes, axis) {
    const outputShape = shapes[0].slice();
    for (let i = 1; i < shapes.length; i++) {
        outputShape[axis] += shapes[i][axis];
    }
    return outputShape;
}
//# sourceMappingURL=concat_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js ***!
  \*************************************************************************/
/*! exports provided: confusionMatrix_, confusionMatrix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confusionMatrix_", function() { return confusionMatrix_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confusionMatrix", function() { return confusionMatrix; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _one_hot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the confusion matrix from true labels and predicted labels.
 *
 * ```js
 * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
 * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
 * const numClasses = 3;
 * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
 * out.print();
 * // Expected output matrix:
 * // [[2, 0, 0],
 * //  [0, 1, 1],
 * //  [0, 0, 1]]
 * ```
 *
 * @param labels The target labels, assumed to be 0-based integers
 *   for the classes. The shape is `[numExamples]`, where
 *   `numExamples` is the number of examples included.
 * @param predictions The predicted classes, assumed to be
 *   0-based integers for the classes. Must have the same shape as `labels`.
 * @param numClasses Number of all classes, as an integer.
 *   Its value must be larger than the largest element in `labels` and
 *   `predictions`.
 * @returns The confusion matrix as a int32-type 2D tensor. The value at
 *   row `r` and column `c` is the number of times examples of actual class
 *   `r` were predicted as class `c`.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function confusionMatrix_(labels, predictions, numClasses) {
    const $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'confusionMatrix');
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'confusionMatrix');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` +
        `but got ${numClasses}`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` +
        `but got ${$predictions.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` +
        `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +
        `Labels and predictions should have the same number of elements.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` +
        `${numClasses}`);
    // TODO(cais): In the future, if oneHot supports tensors inputs for
    //   `numClasses`, `confusionMatrix` can make `numClasses` optional.
    const oneHotLabels = Object(_one_hot__WEBPACK_IMPORTED_MODULE_4__["oneHot"])(Object(_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])($labels, 'int32'), numClasses);
    const oneHotPredictions = Object(_one_hot__WEBPACK_IMPORTED_MODULE_4__["oneHot"])(Object(_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])($predictions, 'int32'), numClasses);
    const oneHotLabelsT = Object(_transpose__WEBPACK_IMPORTED_MODULE_6__["transpose"])(oneHotLabels);
    const product = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_3__["matMul"])(oneHotLabelsT, oneHotPredictions);
    return Object(_cast__WEBPACK_IMPORTED_MODULE_2__["cast"])(product, 'int32');
}
const confusionMatrix = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ confusionMatrix_ });
//# sourceMappingURL=confusion_matrix.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js ***!
  \***************************************************************/
/*! exports provided: conv1d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv1d", function() { return conv1d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");






/**
 * Computes a 1D convolution over the input x.
 *
 * @param x The input tensor, of rank 3 or rank 2, of shape
 *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
 * @param filter The filter, rank 3, of shape
 *     `[filterWidth, inDepth, outDepth]`.
 * @param stride The number of entries by which the filter is moved right at
 *     each step.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
 *     the data is stored in the order of [batch, in_width, in_channels]. Only
 *     "NWC" is currently supported.
 * @param dilation The dilation rate in which we sample input values in
 *     atrous convolution. Defaults to `1`. If it is greater than 1, then
 *     stride must be `1`.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv1d_(x, filter, stride, pad, dataFormat = 'NWC', dilation = 1, dimRoundingMode) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'conv1d');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(filter, 'filter', 'conv1d');
    let x3D = $x;
    let reshapedTo3D = false;
    if ($x.rank === 2) {
        reshapedTo3D = true;
        x3D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($x, [1, $x.shape[0], $x.shape[1]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` +
        `${$filter.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"](_util__WEBPACK_IMPORTED_MODULE_1__["isInt"](pad), () => `Error in conv1d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +
        `input depth for filter ${$filter.shape[1]}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_3__["eitherStridesOrDilationsAreOne"](stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' +
        `Got stride ${stride} and dilation '${dilation}'`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);
    const filter4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);
    const input4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);
    const strides = [1, stride];
    const dilations = [1, dilation];
    const conv2dDataFormat = 'NHWC';
    const res = Object(_conv2d__WEBPACK_IMPORTED_MODULE_2__["conv2d"])(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
    if (reshapedTo3D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[2], res.shape[3]]);
    }
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[0], res.shape[2], res.shape[3]]);
}
const conv1d = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ conv1d_ });
//# sourceMappingURL=conv1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js ***!
  \***************************************************************/
/*! exports provided: conv2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv2d", function() { return conv2d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes a 2D convolution over the input x.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'conv2d');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(filter, 'filter', 'conv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ` +
        `${$filter.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](pad), () => `Error in conv2d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match ` +
        `input depth for filter ${$filter.shape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_4__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    const forward = (backend, save) => {
        const $dataFormat = _conv_util__WEBPACK_IMPORTED_MODULE_4__["convertConv2DDataFormat"](dataFormat);
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computeConv2DInfo"](x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        const res = backend.conv2d(x4D, $filter, convInfo);
        save([x4D, $filter]);
        return res;
    };
    const inputs = { x: x4D, filter: $filter };
    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Conv2D"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const conv2d = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ conv2d_ });
//# sourceMappingURL=conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js ***!
  \*******************************************************************************/
/*! exports provided: conv2DBackpropFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv2DBackpropFilter", function() { return conv2DBackpropFilter; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the derivative of the filter of a 2D convolution.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
 * @param dy The dy image, of rank 4 or rank 3, of shape
 *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
 * @param filterShape The shape of the filter, length 4,
 *     [filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
    let x4D = x;
    if (x.rank === 3) {
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
    }
    let dy4D = dy;
    if (dy4D.rank === 3) {
        dy4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +
        `${x4D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +
        `${dy4D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +
        `${filterShape}.`);
    const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +
        `match input depth in filter (${filterShape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +
        `match output depth for filter (${filterShape[3]}).`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_2__["assert"](_util__WEBPACK_IMPORTED_MODULE_2__["isInt"](pad), () => `Error in conv2dDerFilter: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = backend => {
        const dilations = 1;
        const $dataFormat = _conv_util__WEBPACK_IMPORTED_MODULE_3__["convertConv2DDataFormat"](dataFormat);
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_3__["computeConv2DInfo"](x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        return backend.conv2dDerFilter(x4D, dy4D, convInfo);
    };
    const inputs = { x: x4D, dy: dy4D };
    const attrs = { strides, pad, dataFormat, dimRoundingMode, filterShape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Conv2DBackpropFilter"], attrs);
}
const conv2DBackpropFilter = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ conv2DBackpropFilter_ });
//# sourceMappingURL=conv2d_backprop_filter.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js ***!
  \******************************************************************************/
/*! exports provided: conv2DBackpropInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv2DBackpropInput", function() { return conv2DBackpropInput; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the derivative of the input of a 2D convolution.
 *
 * @param xShape The shape of the input: [batch, height, width, inDepth].
 * If length of 3, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 4 or rank 3 of shape
 *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */
function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](xShape.length === dy.rank, () => `Length of inShape ` +
        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape4D = xShape;
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
        xShape4D = [1, xShape[0], xShape[1], xShape[2]];
    }
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` +
        `${xShape4D.length}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` +
        `rank ${dy4D.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` +
        `rank ${filter.rank}`);
    const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];
    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +
        `match input depth for filter ${filter.shape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +
        `match output depth for filter ${filter.shape[3]}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_2__["assert"](_util__WEBPACK_IMPORTED_MODULE_2__["isInt"](pad), () => `Error in conv2dDerInput: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = (backend, save) => {
        const dilations = 1;
        const $dataFormat = _conv_util__WEBPACK_IMPORTED_MODULE_3__["convertConv2DDataFormat"](dataFormat);
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_3__["computeConv2DInfo"](xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        const res = backend.conv2dDerInput(dy4D, filter, convInfo);
        save([dy4D, filter]);
        return res;
    };
    const inputs = { dy: dy4D, filter };
    const attrs = { strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Conv2DBackpropInput"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const conv2DBackpropInput = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ conv2DBackpropInput_ });
//# sourceMappingURL=conv2d_backprop_input.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js ***!
  \*************************************************************************/
/*! exports provided: conv2dTranspose */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv2dTranspose", function() { return conv2dTranspose; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conv2d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");



/**
 * Computes the transposed 2D convolution of an image, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 4 or rank 3, of shape
 *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 4 or rank 3:
 *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
 * @param strides The strides of the original convolution:
 *     `[strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 * @param dimRoundingMode The rounding mode used when computing output
 *    dimensions if pad is a number. If none is provided, it will not round
 *    and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'conv2dTranspose');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(filter, 'filter', 'conv2dTranspose');
    return Object(_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_1__["conv2DBackpropInput"])(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);
}
const conv2dTranspose = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ conv2dTranspose_ });
//# sourceMappingURL=conv2d_transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js ***!
  \***************************************************************/
/*! exports provided: conv3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv3d", function() { return conv3d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes a 3D convolution over the input x.
 *
 * @param x The input tensor, of rank 5 or rank 4, of shape
 *     `[batch, depth, height, width, channels]`. If rank 4,
 * batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
 *      inChannels must match between input and filter.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
 *     dilationWidth]` in which we sample input values across the height
 *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
 *     If `dilations` is a single number, then
 *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
 *     than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'conv3d');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(filter, 'filter', 'conv3d');
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` +
        `${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +
        `input depth for filter ${$filter.shape[3]}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](Object(_conv_util__WEBPACK_IMPORTED_MODULE_4__["eitherStridesOrDilationsAreOne"])(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);
    const forward = (backend, save) => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computeConv3DInfo"](x5D.shape, $filter.shape, strides, dilations, pad);
        const res = backend.conv3d(x5D, $filter, convInfo);
        save([x5D, $filter]);
        return res;
    };
    const inputs = { x: x5D, filter: $filter };
    const attrs = { strides, pad, dataFormat, dilations };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Conv3D"], attrs);
    if (reshapedTo5D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const conv3d = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ conv3d_ });
//# sourceMappingURL=conv3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js ***!
  \*******************************************************************************/
/*! exports provided: conv3DBackpropFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv3DBackpropFilter", function() { return conv3DBackpropFilter; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the derivative of the filter of a 3D convolution.
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is
 *     assumed.
 * @param dy The dy image, of rank 5 or rank 4, of shape
 *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is
 *     assumed.
 * @param filterShape The shape of the filter, length 5,
 *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideDepth, strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */
function conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {
    let x5D = x;
    if (x.rank === 4) {
        x5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);
    }
    let dy5D = dy;
    if (dy5D.rank === 4) {
        dy5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +
        `${x5D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +
        `${dy5D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +
        `${filterShape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +
        `match input depth in filter (${filterShape[3]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +
        `match output depth for filter (${filterShape[4]}).`);
    const forward = backend => {
        const dilations = 1;
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_3__["computeConv3DInfo"](x5D.shape, filterShape, strides, dilations, pad);
        return backend.conv3dDerFilter(x5D, dy5D, convInfo);
    };
    const inputs = { x: x5D, dy: dy5D };
    const attrs = { strides, pad, filterShape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Conv3DBackpropFilterV2"], attrs);
}
const conv3DBackpropFilter = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ conv3DBackpropFilter_ });
//# sourceMappingURL=conv3d_backprop_filter.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js ***!
  \******************************************************************************/
/*! exports provided: conv3DBackpropInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv3DBackpropInput", function() { return conv3DBackpropInput; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the derivative of the input of a 3D convolution.
 *
 * @param xShape The shape of the input: [batch, depth, height, width,
 * in_channels]. If length of 4, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 5 or rank 4 of shape
 *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
 * If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 */
function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](xShape.length === dy.rank, () => `Length of inShape ` +
        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape5D = xShape;
    let dy5D = dy;
    let reshapedTo5D = false;
    if (dy.rank === 4) {
        reshapedTo5D = true;
        dy5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
        xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];
    }
    const inDepth = xShape5D[4];
    const outDepth = dy5D.shape[4];
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` +
        `${xShape5D.length}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` +
        `rank ${dy5D.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` +
        `rank ${filter.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +
        `match input depth for filter ${filter.shape[3]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +
        `match output depth for filter ${filter.shape[4]}.`);
    const forward = backend => {
        const dilations = 1;
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_3__["computeConv3DInfo"](xShape5D, filter.shape, strides, dilations, pad);
        return backend.conv3dDerInput(dy5D, filter, convInfo);
    };
    const inputs = { dy: dy5D, filter };
    const attrs = { pad, strides, inputShape: xShape5D };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Conv3DBackpropInputV2"], attrs);
    if (reshapedTo5D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const conv3DBackpropInput = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ conv3DBackpropInput_ });
//# sourceMappingURL=conv3d_backprop_input.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js ***!
  \*************************************************************************/
/*! exports provided: conv3dTranspose */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv3dTranspose", function() { return conv3dTranspose; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conv3d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");



/**
 * Computes the transposed 3D convolution of a volume, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 5 or rank 4, of shape
 *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 5 or rank 4:
 *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
 *    assumed.
 * @param strides The strides of the original convolution:
 *     `[strideDepth, strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3dTranspose_(x, filter, outputShape, strides, pad) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'conv3dTranspose');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(filter, 'filter', 'conv3dTranspose');
    return Object(_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_1__["conv3DBackpropInput"])(outputShape, $x, $filter, strides, pad);
}
const conv3dTranspose = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ conv3dTranspose_ });
//# sourceMappingURL=conv3d_transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js ***!
  \******************************************************************/
/*! exports provided: computeDilation2DInfo, computePool2DInfo, computePool3DInfo, computeConv2DInfo, computeConv3DInfo, computeDefaultPad, tupleValuesAreOne, eitherStridesOrDilationsAreOne, convertConv2DDataFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeDilation2DInfo", function() { return computeDilation2DInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computePool2DInfo", function() { return computePool2DInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computePool3DInfo", function() { return computePool3DInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeConv2DInfo", function() { return computeConv2DInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeConv3DInfo", function() { return computeConv3DInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeDefaultPad", function() { return computeDefaultPad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tupleValuesAreOne", function() { return tupleValuesAreOne; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eitherStridesOrDilationsAreOne", function() { return eitherStridesOrDilationsAreOne; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertConv2DDataFormat", function() { return convertConv2DDataFormat; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 *
 * @param inputShape Input tensor shape is of the following dimensions:
 *     `[batch, height, width, inChannels]`.
 * @param filterShape The filter shape is of the following dimensions:
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat The data format of the input and output data.
 *     Defaults to 'NHWC'.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
 *     Defaults to `[1, 1]`. If `dilations` is a single number, then
 *     `dilationHeight == dilationWidth`.
 */
function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {
    // `computerConv2DInfo` require filterShape to be in the dimension of:
    // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
    // outDepth, it should have the same depth as the input.
    // Input shape: [batch, height, width, inChannels]
    const inputChannels = inputShape[3];
    const $filterShape = [...filterShape, inputChannels];
    const $dataFormat = convertConv2DDataFormat(dataFormat);
    return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);
}
function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {
    const [filterHeight, filterWidth] = parseTupleParam(filterSize);
    let filterShape;
    if (dataFormat === 'channelsLast') {
        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
    }
    else if (dataFormat === 'channelsFirst') {
        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
/**
 * Computes the information for a forward pass of a pooling3D operation.
 */
function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {
    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);
    let filterShape;
    let $dataFormat;
    if (dataFormat === 'NDHWC') {
        $dataFormat = 'channelsLast';
        filterShape =
            [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];
    }
    else if (dataFormat === 'NCDHW') {
        $dataFormat = 'channelsFirst';
        filterShape =
            [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
}
/**
 * Computes the information for a forward pass of a convolution/pooling
 * operation.
 */
function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {
    let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];
    if (dataFormat === 'channelsLast') {
        [batchSize, inHeight, inWidth, inChannels] = inShape;
    }
    else if (dataFormat === 'channelsFirst') {
        [batchSize, inChannels, inHeight, inWidth] = inShape;
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    const [filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideHeight, strideWidth] = parseTupleParam(strides);
    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === 'channelsFirst') {
        outShape = [batchSize, outChannels, outHeight, outWidth];
    }
    else if (dataFormat === 'channelsLast') {
        outShape = [batchSize, outHeight, outWidth, outChannels];
    }
    return {
        batchSize,
        dataFormat,
        inHeight,
        inWidth,
        inChannels,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideHeight,
        strideWidth,
        filterHeight,
        filterWidth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
/**
 * Computes the information for a forward pass of a 3D convolution/pooling
 * operation.
 */
function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {
    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];
    if (dataFormat === 'channelsLast') {
        [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;
    }
    else if (dataFormat === 'channelsFirst') {
        [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);
    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);
    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === 'channelsFirst') {
        outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];
    }
    else if (dataFormat === 'channelsLast') {
        outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];
    }
    return {
        batchSize,
        dataFormat,
        inDepth,
        inHeight,
        inWidth,
        inChannels,
        outDepth,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideDepth,
        strideHeight,
        strideWidth,
        filterDepth,
        filterHeight,
        filterWidth,
        effectiveFilterDepth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationDepth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
    if (zeroPad == null) {
        zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    }
    const inputRows = inShape[0];
    const inputCols = inShape[1];
    const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](_util__WEBPACK_IMPORTED_MODULE_0__["isInt"](outputRows), () => `The output # of rows (${outputRows}) must be an integer. ` +
        `Change the stride and/or zero pad parameters`);
    const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](_util__WEBPACK_IMPORTED_MODULE_0__["isInt"](outputCols), () => `The output # of columns (${outputCols}) must be an integer. ` +
        `Change the stride and/or zero pad parameters`);
    return [outputRows, outputCols];
}
function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
    if (zeroPad == null) {
        zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    }
    const inputDepth = inShape[0];
    const inputRows = inShape[1];
    const inputCols = inShape[2];
    const outputDepths = conditionalRound((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](_util__WEBPACK_IMPORTED_MODULE_0__["isInt"](outputDepths), () => `The output # of depths (${outputDepths}) must be an integer. ` +
        `Change the stride and/or zero pad parameters`);
    const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](_util__WEBPACK_IMPORTED_MODULE_0__["isInt"](outputRows), () => `The output # of rows (${outputRows}) must be an integer. ` +
        `Change the stride and/or zero pad parameters`);
    const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](_util__WEBPACK_IMPORTED_MODULE_0__["isInt"](outputCols), () => `The output # of columns (${outputCols}) must be an integer. ` +
        `Change the stride and/or zero pad parameters`);
    return [outputDepths, outputRows, outputCols, outChannels];
}
function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {
    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}
function parseTupleParam(param) {
    if (typeof param === 'number') {
        return [param, param, param];
    }
    if (param.length === 2) {
        return [param[0], param[1], 1];
    }
    return param;
}
function parse3TupleParam(param) {
    return typeof param === 'number' ? [param, param, param] : param;
}
/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
 * Atrous convolution is equivalent to standard convolution with upsampled
 * filters with effective_filter_height =
 * filter_height + (filter_height - 1) * (dilation - 1)
 * and effective_filter_width =
 * filter_width + (filter_width - 1) * (dilation - 1),
 * produced by inserting dilation - 1 zeros along consecutive elements across
 * the filters' spatial dimensions.
 * When there is a dilation, this converts a filter dimension to the
 * effective filter dimension, so it can be used in a standard convolution.
 */
function getEffectiveFilterSize(filterSize, dilation) {
    if (dilation <= 1) {
        return filterSize;
    }
    return filterSize + (filterSize - 1) * (dilation - 1);
}
function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {
    let padInfo;
    let outHeight;
    let outWidth;
    if (typeof pad === 'number') {
        const padType = (pad === 0) ? 'VALID' : 'NUMBER';
        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };
        const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);
        outHeight = outShape[0];
        outWidth = outShape[1];
    }
    else if (pad === 'same') {
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = { top, bottom, left, right, type: 'SAME' };
    }
    else if (pad === 'valid') {
        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    }
    else if (typeof pad === 'object') {
        const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];
        const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];
        const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];
        const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];
        const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?
            'VALID' :
            'EXPLICIT';
        padInfo = { top, bottom, left, right, type: padType };
        outHeight = conditionalRound((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);
        outWidth = conditionalRound((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);
    }
    else {
        throw Error(`Unknown padding parameter: ${pad}`);
    }
    return { padInfo, outHeight, outWidth };
}
function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
    let padInfo;
    let outDepth;
    let outHeight;
    let outWidth;
    if (typeof pad === 'number') {
        const padType = (pad === 0) ? 'VALID' : 'NUMBER';
        padInfo = {
            top: pad,
            bottom: pad,
            left: pad,
            right: pad,
            front: pad,
            back: pad,
            type: padType
        };
        const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);
        outDepth = outShape[0];
        outHeight = outShape[1];
        outWidth = outShape[2];
    }
    else if (pad === 'same') {
        outDepth = Math.ceil(inDepth / strideDepth);
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
        const front = Math.floor(padAlongDepth / 2);
        const back = padAlongDepth - front;
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = { top, bottom, left, right, front, back, type: 'SAME' };
    }
    else if (pad === 'valid') {
        padInfo = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            front: 0,
            back: 0,
            type: 'VALID'
        };
        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    }
    else {
        throw Error(`Unknown padding parameter: ${pad}`);
    }
    return { padInfo, outDepth, outHeight, outWidth };
}
/**
 * Rounds a value depending on the rounding mode
 * @param value
 * @param roundingMode
 */
function conditionalRound(value, roundingMode) {
    if (!roundingMode) {
        return value;
    }
    switch (roundingMode) {
        case 'round':
            // used for Caffe Conv
            return Math.round(value);
        case 'ceil':
            // used for Caffe Pool
            return Math.ceil(value);
        case 'floor':
            return Math.floor(value);
        default:
            throw new Error(`Unknown roundingMode ${roundingMode}`);
    }
}
function tupleValuesAreOne(param) {
    const [dimA, dimB, dimC] = parseTupleParam(param);
    return dimA === 1 && dimB === 1 && dimC === 1;
}
function eitherStridesOrDilationsAreOne(strides, dilations) {
    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}
/**
 * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
 *    'channelsLast'|'channelsFirst'
 * @param dataFormat in 'NHWC'|'NCHW' mode
 * @return dataFormat in 'channelsLast'|'channelsFirst' mode
 * @throws unknown dataFormat
 */
function convertConv2DDataFormat(dataFormat) {
    if (dataFormat === 'NHWC') {
        return 'channelsLast';
    }
    else if (dataFormat === 'NCHW') {
        return 'channelsFirst';
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
}
//# sourceMappingURL=conv_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js ***!
  \************************************************************/
/*! exports provided: cos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return cos; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.cos().print();  // or tf.cos(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cos_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'cos');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.cos($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Cos"]);
}
const cos = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ cos_ });
//# sourceMappingURL=cos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js ***!
  \*************************************************************/
/*! exports provided: cosh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cosh", function() { return cosh; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.cosh().print();  // or tf.cosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cosh_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'cosh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.cosh($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Cosh"]);
}
const cosh = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ cosh_ });
//# sourceMappingURL=cosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js ***!
  \***************************************************************/
/*! exports provided: cumsum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cumsum", function() { return cumsum; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the cumulative sum of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumsum().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumsum().print();
 * ```
 *
 * @param x The input tensor to be summed.
 * @param axis The axis along which to sum. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative sum. Optional.
 *     Defaults to false. If set to true then the sum of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to sum in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */
function cumsum_(x, axis = 0, exclusive = false, reverse = false) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'cumsum');
    const forward = (backend, save) => {
        const permutation = Object(_axis_util__WEBPACK_IMPORTED_MODULE_3__["getAxesPermutation"])([axis], $x.rank);
        let permutedX = $x;
        if (permutation != null) {
            permutedX = Object(_transpose__WEBPACK_IMPORTED_MODULE_5__["transpose"])($x, permutation);
        }
        const permutedAxis = Object(_axis_util__WEBPACK_IMPORTED_MODULE_3__["getInnerMostAxes"])(1, $x.rank)[0];
        let value = backend.cumsum(permutedX, permutedAxis, exclusive, reverse);
        save([$x]);
        if (permutation != null) {
            const reversePermutation = Object(_axis_util__WEBPACK_IMPORTED_MODULE_3__["getUndoAxesPermutation"])(permutation);
            value = Object(_transpose__WEBPACK_IMPORTED_MODULE_5__["transpose"])(value, reversePermutation);
        }
        return value;
    };
    const inputs = { x: $x };
    const attrs = { axis, exclusive, reverse };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Cumsum"], attrs);
}
const cumsum = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ cumsum_ });
//# sourceMappingURL=cumsum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js ***!
  \***********************************************************************/
/*! exports provided: depthToSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "depthToSpace", function() { return depthToSpace; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Rearranges data from depth into blocks of spatial data. More specifically,
 * this op outputs a copy of the input tensor where values from the `depth`
 * dimension are moved in spatial blocks to the `height` and `width` dimensions.
 * The attr `blockSize` indicates the input block size and how the data is
 * moved.
 *
 *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
 * into non-overlapping blocks of size `blockSize x blockSize`
 *
 *  - The width the output tensor is `inputWidth * blockSize`, whereas the
 * height is `inputHeight * blockSize`
 *
 *  - The Y, X coordinates within each block of the output image are determined
 * by the high order component of the input channel index
 *
 *  - The depth of the input tensor must be divisible by `blockSize *
 * blockSize`
 *
 * The `dataFormat` attr specifies the layout of the input and output tensors
 * with the following options: "NHWC": [ `batch, height, width, channels` ]
 * "NCHW": [ `batch, channels, height, width` ]
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
 * const blockSize = 2;
 * const dataFormat = "NHWC";
 *
 * tf.depthToSpace(x, blockSize, dataFormat).print();
 * ```
 *
 * @param x The input tensor of rank 4
 * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function depthToSpace_(x, blockSize, dataFormat = 'NHWC') {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'depthToSpace');
    const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];
    const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];
    const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputHeight} and ${blockSize}  for depthToSpace with input shape
    ${$x.shape}`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputWidth} and ${blockSize} for depthToSpace with input shape
        ${$x.shape}`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]((inputDepth % (blockSize * blockSize) === 0), () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);
    const forward = backend => backend.depthToSpace($x, blockSize, dataFormat);
    const inputs = { x: $x };
    const attrs = { blockSize, dataFormat };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["DepthToSpace"], attrs);
}
const depthToSpace = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ depthToSpace_ });
//# sourceMappingURL=depth_to_space.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js ***!
  \*************************************************************************/
/*! exports provided: depthwiseConv2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2d", function() { return depthwiseConv2d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Depthwise 2D convolution.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'depthwiseConv2d');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(filter, 'filter', 'depthwiseConv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` +
        `rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +
        `${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` +
        `(${x4D.shape[3]}) must match the inChannels dimension in ` +
        `filter ${$filter.shape[2]}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = (backend, save) => {
        if (dilations == null) {
            dilations = [1, 1];
        }
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_4__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +
            `1. Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computeConv2DInfo"](x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        const res = backend.depthwiseConv2D(x4D, $filter, convInfo);
        save([x4D, $filter]);
        return res;
    };
    const inputs = { x: x4D, filter: $filter };
    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["DepthwiseConv2dNative"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const depthwiseConv2d = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ depthwiseConv2d_ });
//# sourceMappingURL=depthwise_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js ***!
  \************************************************************************************************/
/*! exports provided: depthwiseConv2dNativeBackpropFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2dNativeBackpropFilter", function() { return depthwiseConv2dNativeBackpropFilter; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad, dilations = [1, 1], dimRoundingMode) {
    let x4D = x;
    if (x.rank === 3) {
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
    }
    let dy4D = dy;
    if (dy4D.rank === 3) {
        dy4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    }
    const forward = backend => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_2__["computeConv2DInfo"](x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        return backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo);
    };
    const inputs = { x: x4D, dy: dy4D };
    const attrs = { strides, pad, dimRoundingMode, dilations, filterShape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["DepthwiseConv2dNativeBackpropFilter"], attrs);
}
const depthwiseConv2dNativeBackpropFilter = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ depthwiseConv2dNativeBackpropFilter_ });
//# sourceMappingURL=depthwise_conv2d_native_backprop_filter.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js ***!
  \***********************************************************************************************/
/*! exports provided: depthwiseConv2dNativeBackpropInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2dNativeBackpropInput", function() { return depthwiseConv2dNativeBackpropInput; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad, dilations = [1, 1], dimRoundingMode) {
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    }
    const forward = backend => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_2__["computeConv2DInfo"](xShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        return backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);
    };
    const inputs = { dy: dy4D, filter };
    const attrs = { strides, pad, dimRoundingMode, dilations, inputShape: xShape };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["DepthwiseConv2dNativeBackpropInput"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const depthwiseConv2dNativeBackpropInput = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ depthwiseConv2dNativeBackpropInput_ });
//# sourceMappingURL=depthwise_conv2d_native_backprop_input.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js ***!
  \*************************************************************/
/*! exports provided: diag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diag", function() { return diag; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns a diagonal tensor with a given diagonal values.
 *
 * Given a diagonal, this operation returns a tensor with the diagonal and
 * everything else padded with zeros.
 *
 * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
 * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * tf.diag(x).print()
 * ```
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
 *
 * tf.diag(x).print()
 * ```
 * @param x The input tensor.
 */
function diag_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'diag');
    const forward = backend => {
        const flat = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($x, [$x.size]);
        const result = backend.diag(flat);
        const outShape = [...x.shape, ...x.shape];
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(result, outShape);
    };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Diag"]);
}
const diag = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ diag_ });
//# sourceMappingURL=diag.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js ***!
  \*******************************************************************/
/*! exports provided: dilation2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dilation2d", function() { return dilation2d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the grayscale dilation over the input `x`.
 *
 * @param x The input tensor, rank 3 or rank 4 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter tensor, rank 3, of shape
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat Specify the data format of the input and output data.
 *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
 *      default format "NHWC", the data is stored in the order of: [batch,
 *      height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
 *     is a single number, then `dilationHeight == dilationWidth`. If it is
 *     greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function dilation2d_(x, filter, strides, pad, dilations = [1, 1], dataFormat = 'NHWC') {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'dilation2d');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(filter, 'filter', 'dilation2d');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ` +
        `${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](dataFormat === 'NHWC', () => `Error in dilation2d: Only NHWC is currently supported, ` +
        `but got dataFormat of ${dataFormat}`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        reshapedTo4D = true;
    }
    const inputs = { x: x4D, filter: $filter };
    const attrs = { strides, pad, dilations };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["Dilation2D"], inputs, attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const dilation2d = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ dilation2d_ });
//# sourceMappingURL=dilation2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/div.js ***!
  \************************************************************/
/*! exports provided: div */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _floorDiv__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function div_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'div');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'div');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    if ($a.dtype === 'int32' && $b.dtype === 'int32') {
        return Object(_floorDiv__WEBPACK_IMPORTED_MODULE_4__["floorDiv"])($a, $b);
    }
    const forward = (backend, save) => {
        const res = backend.realDivide($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    const attrs = {};
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Div"], attrs);
}
const div = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ div_ });
//# sourceMappingURL=div.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js ***!
  \*******************************************************************/
/*! exports provided: divNoNan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divNoNan", function() { return divNoNan; });
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
 * if denominator is 0.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 * const c = tf.tensor1d([0, 0, 0, 0]);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 * const c = tf.scalar(0);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function divNoNan_(a, b) {
    // TODO: Make this into its own kernel.
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(a, 'a', 'div');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(b, 'b', 'div');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_0__["makeTypesMatch"])($a, $b);
    const divResult = Object(_div__WEBPACK_IMPORTED_MODULE_2__["div"])($a, $b);
    const zeros = Object(_zeros_like__WEBPACK_IMPORTED_MODULE_6__["zerosLike"])(divResult);
    const bEqualsZero = Object(_equal__WEBPACK_IMPORTED_MODULE_3__["equal"])($b, zeros);
    return Object(_where__WEBPACK_IMPORTED_MODULE_5__["where"])(bEqualsZero, zeros, divResult);
}
const divNoNan = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ divNoNan_ });
//# sourceMappingURL=div_no_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js ***!
  \************************************************************/
/*! exports provided: dot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor2d([[1, 2], [3, 4]]);
 * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 *
 * a.dot(b).print();  // or tf.dot(a, b)
 * b.dot(a).print();
 * b.dot(c).print();
 * ```
 * @param t1 The first tensor in the dot operation.
 * @param t2 The second tensor in the dot operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function dot_(t1, t2) {
    const $t1 = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(t1, 't1', 'dot');
    const $t2 = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(t2, 't2', 'dot');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +
        `${$t1.rank} and ${$t2.rank}.`);
    const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);
    const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` +
        `${t1Inner} and ${t2Inner}.`);
    if ($t1.rank === 1 && $t2.rank === 1) {
        const t12D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($t1, [1, -1]);
        const t22D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($t2, [-1, 1]);
        const t1t2 = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_2__["matMul"])(t12D, t22D);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(t1t2, []);
    }
    else if ($t1.rank === 1 && $t2.rank === 2) {
        const t12D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($t1, [1, -1]);
        const t22D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($t2, [$t2.shape[0], $t2.shape[1]]);
        const t1t2 = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_2__["matMul"])(t12D, t22D);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(t1t2, [t1t2.size]);
    }
    else if ($t1.rank === 2 && $t2.rank === 1) {
        const t22D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($t2, [-1, 1]);
        const t1t2 = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_2__["matMul"])($t1, t22D);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(t1t2, [t1t2.size]);
    }
    else {
        const t22D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($t2, [$t2.shape[0], $t2.shape[1]]);
        const t1t2 = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_2__["matMul"])($t1, t22D);
        return t1t2;
    }
}
const dot = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ dot_ });
//# sourceMappingURL=dot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js ***!
  \****************************************************************/
/*! exports provided: dropout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropout", function() { return dropout; });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _dropout_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dropout_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js");
/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./floor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _random_uniform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./random_uniform */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * Computes dropout.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 2, 1]);
 * const rate = 0.75;
 * const output = tf.dropout(x, rate);
 * output.print();
 * ```
 *
 * @param x A floating point Tensor or TensorLike.
 * @param rate A float in the range [0, 1). The probability that each element
 *   of x is discarded.
 * @param noiseShape An array of numbers of type int32, representing the
 * shape for randomly generated keep/drop flags. If the noiseShape has null
 * value, it will be automatically replaced with the x's relative dimension
 * size. Optional.
 * @param seed Used to create random seeds. Optional.
 * @returns A Tensor of the same shape of x.
 *
 * @doc {heading: 'Operations', subheading: 'Dropout'}
 */
function dropout_(x, rate, noiseShape, seed) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(x, 'x', 'dropout');
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"]($x.dtype === 'float32', () => `x has to be a floating point tensor since it's going to be ` +
        `scaled, but got a ${$x.dtype} tensor instead.`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);
    if (rate === 0) {
        return x instanceof _tensor__WEBPACK_IMPORTED_MODULE_0__["Tensor"] ? $x.clone() : $x;
    }
    const $noiseShape = Object(_dropout_util__WEBPACK_IMPORTED_MODULE_5__["getNoiseShape"])($x, noiseShape);
    const keepProb = 1 - rate;
    const multiplier = Object(_div__WEBPACK_IMPORTED_MODULE_4__["div"])(Object(_floor__WEBPACK_IMPORTED_MODULE_6__["floor"])(Object(_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_random_uniform__WEBPACK_IMPORTED_MODULE_9__["randomUniform"])($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);
    return Object(_mul__WEBPACK_IMPORTED_MODULE_7__["mul"])($x, multiplier);
}
const dropout = Object(_operation__WEBPACK_IMPORTED_MODULE_8__["op"])({ dropout_ });
//# sourceMappingURL=dropout.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js ***!
  \*********************************************************************/
/*! exports provided: getNoiseShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNoiseShape", function() { return getNoiseShape; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Normalize noise shape based on provided tensor and noise shape.
 *
 * @param x Tensor.
 * @param noiseShape The shape for the randomly generated keep/drop flags, as
 *   an array of numbers. Optional.
 * @returns Normalized noise shape.
 */
function getNoiseShape(x, noiseShape) {
    if (noiseShape == null) {
        return x.shape.slice();
    }
    if (_util__WEBPACK_IMPORTED_MODULE_0__["arraysEqual"](x.shape, noiseShape)) {
        return noiseShape;
    }
    if (x.shape.length === noiseShape.length) {
        const newDimension = [];
        for (let i = 0; i < x.shape.length; i++) {
            if (noiseShape[i] == null && x.shape[i] != null) {
                newDimension.push(x.shape[i]);
            }
            else {
                newDimension.push(noiseShape[i]);
            }
        }
        return newDimension;
    }
    return noiseShape;
}
//# sourceMappingURL=dropout_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js ***!
  \************************************************************/
/*! exports provided: elu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elu", function() { return elu; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 1, -3, 2]);
 *
 * x.elu().print();  // or tf.elu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function elu_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'elu');
    const forward = (backend, save) => {
        const y = backend.elu($x);
        save([y]);
        return y;
    };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Elu"]);
}
const elu = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ elu_ });
//# sourceMappingURL=elu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js ***!
  \**************************************************************/
/*! exports provided: equal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equal", function() { return equal; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a == b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.equal(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function equal_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'equal');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'equal');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = backend => backend.equal($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Equal"]);
}
const equal = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ equal_ });
//# sourceMappingURL=equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js ***!
  \************************************************************/
/*! exports provided: erf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "erf", function() { return erf; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes gause error function of the input `tf.Tensor` element-wise:
 * `erf(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.erf().print(); // or tf.erf(x);
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function erf_(x) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'erf');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.dtype === 'int32' || $x.dtype === 'float32', () => 'Input dtype must be `int32` or `float32`.');
    if ($x.dtype === 'int32') {
        $x = Object(_cast__WEBPACK_IMPORTED_MODULE_4__["cast"])($x, 'float32');
    }
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.erf($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Erf"]);
}
const erf = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ erf_ });
//# sourceMappingURL=erf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js ***!
  \*****************************************************************/
/*! exports provided: ERF_P, ERF_A1, ERF_A2, ERF_A3, ERF_A4, ERF_A5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERF_P", function() { return ERF_P; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERF_A1", function() { return ERF_A1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERF_A2", function() { return ERF_A2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERF_A3", function() { return ERF_A3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERF_A4", function() { return ERF_A4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERF_A5", function() { return ERF_A5; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ERF_P = 0.3275911;
const ERF_A1 = 0.254829592;
const ERF_A2 = -0.284496736;
const ERF_A3 = 1.421413741;
const ERF_A4 = -1.453152027;
const ERF_A5 = 1.061405429;
//# sourceMappingURL=erf_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js ***!
  \************************************************************/
/*! exports provided: exp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exp", function() { return exp; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.exp().print();  // or tf.exp(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function exp_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'exp');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.exp($x);
        save([res]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Exp"]);
}
const exp = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ exp_ });
//# sourceMappingURL=exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js ***!
  \********************************************************************/
/*! exports provided: expandDims */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expandDims", function() { return expandDims; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function expandDims_(x, axis = 0) {
    const parseAs = null;
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'expandDims', parseAs);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](axis <= $x.rank, () => 'Axis must be <= rank of the tensor');
    const newShape = $x.shape.slice();
    if (axis < 0) {
        // Negative value is counted from the tail of rank.
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"](-($x.rank + 1) <= axis, () => `Axis must be in the interval [${-($x.rank + 1)}, ${$x.rank}]`);
        axis = $x.rank + axis + 1;
    }
    newShape.splice(axis, 0, 1);
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])($x, newShape);
}
const expandDims = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ expandDims_ });
//# sourceMappingURL=expand_dims.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js ***!
  \**************************************************************/
/*! exports provided: expm1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expm1", function() { return expm1; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes exponential of the input `tf.Tensor` minus one element-wise.
 * `e ^ x - 1`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.expm1().print();  // or tf.expm1(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function expm1_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'expm1');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.expm1($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Expm1"]);
}
const expm1 = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ expm1_ });
//# sourceMappingURL=expm1.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js ***!
  \************************************************************/
/*! exports provided: eye */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eye", function() { return eye; });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Create an identity matrix.
 *
 * @param numRows Number of rows.
 * @param numColumns Number of columns. Defaults to `numRows`.
 * @param batchShape If provided, will add the batch shape to the beginning
 *   of the shape of the returned `tf.Tensor` by repeating the identity
 *   matrix.
 * @param dtype Data type.
 * @returns Identity matrix of the specified size and data type, possibly
 *   with batch repetition if `batchShape` is specified.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function eye_(numRows, numColumns, batchShape, dtype = 'float32') {
    if (numColumns == null) {
        numColumns = numRows;
    }
    const buff = Object(_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])([numRows, numColumns], dtype);
    const n = numRows <= numColumns ? numRows : numColumns;
    for (let i = 0; i < n; ++i) {
        buff.set(1, i, i);
    }
    const out = Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])(buff.toTensor(), [numRows, numColumns]);
    if (batchShape == null) {
        return out;
    }
    else {
        if (batchShape.length === 1) {
            return Object(_tile__WEBPACK_IMPORTED_MODULE_4__["tile"])(Object(_expand_dims__WEBPACK_IMPORTED_MODULE_1__["expandDims"])(out, 0), [batchShape[0], 1, 1]);
        }
        else if (batchShape.length === 2) {
            // tslint:disable-next-line:no-unnecessary-type-assertion
            return Object(_tile__WEBPACK_IMPORTED_MODULE_4__["tile"])(Object(_expand_dims__WEBPACK_IMPORTED_MODULE_1__["expandDims"])(Object(_expand_dims__WEBPACK_IMPORTED_MODULE_1__["expandDims"])(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);
        }
        else if (batchShape.length === 3) {
            // tslint:disable-next-line:no-unnecessary-type-assertion
            return Object(_tile__WEBPACK_IMPORTED_MODULE_4__["tile"])(Object(_expand_dims__WEBPACK_IMPORTED_MODULE_1__["expandDims"])(Object(_expand_dims__WEBPACK_IMPORTED_MODULE_1__["expandDims"])(Object(_expand_dims__WEBPACK_IMPORTED_MODULE_1__["expandDims"])(out, 0), 0), 0), [
                batchShape[0], batchShape[1], batchShape[2], 1, 1
            ]);
        }
        else {
            throw new Error(`eye() currently supports only 1D and 2D ` +
                // tslint:disable-next-line:no-any
                `batchShapes, but received ${batchShape.length}D.`);
        }
    }
}
const eye = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ eye_ });
//# sourceMappingURL=eye.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js ***!
  \*************************************************************/
/*! exports provided: fill */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fill", function() { return fill; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates a `tf.Tensor` filled with a scalar value.
 *
 * ```js
 * tf.fill([2, 2], 4).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param value The scalar value to fill the tensor with.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 * 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function fill(shape, value, dtype) {
    const attrs = { shape, value, dtype };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.fill(shape, value, dtype), {}, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Fill"], attrs);
}

//# sourceMappingURL=fill.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js ***!
  \**************************************************************/
/*! exports provided: floor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.floor().print();  // or tf.floor(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function floor_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'floor');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.floor($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Floor"]);
}
const floor = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ floor_ });
//# sourceMappingURL=floor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js ***!
  \*****************************************************************/
/*! exports provided: floorDiv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floorDiv", function() { return floorDiv; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 * The result is rounded with floor function.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.floorDiv(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function floorDiv_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'floorDiv');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'floorDiv');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    const forward = (backend, save) => {
        const res = backend.floorDiv($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["FloorDiv"]);
}
const floorDiv = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ floorDiv_ });
//# sourceMappingURL=floorDiv.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js ***!
  \*********************************************************************/
/*! exports provided: conv2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conv2d", function() { return conv2d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../conv2d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js");
/* harmony import */ var _conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../conv2d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _fused_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */















/**
 * Computes a 2D convolution over the input x, optionally fused with adding a
 * bias and applying an activation.
 *
 * ```js
 * const inputDepth = 2;
 * const inShape = [2, 2, 2, inputDepth];
 * const outputDepth = 2;
 * const fSize = 1;
 * const pad = 0;
 * const strides = 1;
 *
 * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 * 16], inShape);
 * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
 * outputDepth]);
 *
 * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
 * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
 * ```
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`) to be
 *     applied
 *      after biasAdd.
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 */
function fusedConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights }) {
    activation = activation || 'linear';
    if (Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["shouldFuse"])(_engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].state.gradientDepth, activation) === false) {
        let result = Object(_conv2d__WEBPACK_IMPORTED_MODULE_8__["conv2d"])(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) {
            result = Object(_add__WEBPACK_IMPORTED_MODULE_6__["add"])(result, bias);
        }
        return Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["applyActivation"])(result, activation, preluActivationWeights);
    }
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(x, 'x', 'conv2d');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(filter, 'filter', 'conv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_14__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` +
        `${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"]($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` +
        `${$filter.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_5__["assert"](_util__WEBPACK_IMPORTED_MODULE_5__["isInt"](pad), () => `Error in fused conv2d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +
        `input depth for filter ${$filter.shape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_11__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);
    const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_11__["computeConv2DInfo"](x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
    let $bias;
    if (bias != null) {
        $bias = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(bias, 'bias', 'fused conv2d');
        [$bias] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_3__["makeTypesMatch"])($bias, $x);
        _broadcast_util__WEBPACK_IMPORTED_MODULE_7__["assertAndGetBroadcastShape"](convInfo.outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) {
        $preluActivationWeights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(preluActivationWeights, 'prelu weights', 'fused conv2d');
    }
    const grad = (dy, saved) => {
        const [$filter, x4D, y, $bias] = saved;
        const dyActivation = Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["getFusedDyActivation"])(dy, y, activation);
        _util__WEBPACK_IMPORTED_MODULE_5__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_11__["tupleValuesAreOne"](dilations), () => 'Error in gradient of fused conv2D: ' +
            `dilation rates greater than 1 ` +
            `are not yet supported in gradients. Got dilations '${dilations}'`);
        const xDer = Object(_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_10__["conv2DBackpropInput"])(x4D.shape, dyActivation, $filter, strides, pad);
        const filterDer = Object(_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_9__["conv2DBackpropFilter"])(x4D, dyActivation, $filter.shape, strides, pad);
        const der = [xDer, filterDer];
        if ($bias != null) {
            const biasDer = Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["getFusedBiasGradient"])($bias, dyActivation);
            der.push(biasDer);
        }
        return der;
    };
    const forward = (backend) => {
        const res = backend.fusedConv2d({
            input: x4D,
            filter: $filter,
            convInfo,
            bias: $bias,
            activation,
            preluActivationWeights: $preluActivationWeights
        });
        return res;
    };
    const inputs = {
        x: x4D,
        filter: $filter,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode, activation };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["customGrad"])((x4D, filter, save) => {
            let res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["FusedConv2D"], attrs);
            save([filter, x4D, res]);
            if (reshapedTo4D) {
                res = Object(_reshape__WEBPACK_IMPORTED_MODULE_14__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOp(x4D, $filter);
    }
    else {
        const customOpWithBias = Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["customGrad"])((x4D, filter, bias, save) => {
            let res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["FusedConv2D"], attrs);
            save([filter, x4D, res, bias]);
            if (reshapedTo4D) {
                res = Object(_reshape__WEBPACK_IMPORTED_MODULE_14__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOpWithBias(x4D, $filter, $bias);
    }
}
const conv2d = Object(_operation__WEBPACK_IMPORTED_MODULE_13__["op"])({ fusedConv2d_ });
//# sourceMappingURL=conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js ***!
  \*******************************************************************************/
/*! exports provided: depthwiseConv2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2d", function() { return depthwiseConv2d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../depthwise_conv2d_native_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js");
/* harmony import */ var _depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../depthwise_conv2d_native_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js");
/* harmony import */ var _fused_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */















/**
 * Computes depthwise 2D convolution, optionally fused with adding a
 * bias and applying an activation.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`).
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 */
function fusedDepthwiseConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights }) {
    if (Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["shouldFuse"])(_engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].state.gradientDepth, activation) === false) {
        let result = Object(_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_9__["depthwiseConv2d"])(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) {
            result = Object(_add__WEBPACK_IMPORTED_MODULE_6__["add"])(result, bias);
        }
        return Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["applyActivation"])(result, activation, preluActivationWeights);
    }
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(x, 'x', 'depthwiseConv2d');
    const $filter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(filter, 'filter', 'depthwiseConv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_14__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +
        `rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"]($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +
        `but got rank ${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` +
        `(${x4D.shape[3]}) must match the inChannels dimension in ` +
        `filter ${$filter.shape[2]}.`);
    if (dilations == null) {
        dilations = [1, 1];
    }
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_8__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' +
        `be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_5__["assert"](_util__WEBPACK_IMPORTED_MODULE_5__["isInt"](pad), () => `Error in fused depthwiseConv2d: pad must be an integer when ` +
            `using dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_8__["computeConv2DInfo"](x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
    let $bias;
    if (bias != null) {
        $bias = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(bias, 'bias', 'fused conv2d');
        [$bias] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_3__["makeTypesMatch"])($bias, $x);
        _broadcast_util__WEBPACK_IMPORTED_MODULE_7__["assertAndGetBroadcastShape"](convInfo.outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) {
        $preluActivationWeights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');
    }
    const grad = (dy, saved) => {
        _util__WEBPACK_IMPORTED_MODULE_5__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_8__["tupleValuesAreOne"](dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +
            `greater than 1 are not yet supported. Got dilations ` +
            `'${dilations}'`);
        const [$filter, x4D, y, bias] = saved;
        const dyActivation = Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["getFusedDyActivation"])(dy, y, activation);
        const xDer = Object(_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_11__["depthwiseConv2dNativeBackpropInput"])(x4D.shape, dyActivation, $filter, strides, pad, dilations, dimRoundingMode);
        const filterDer = Object(_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_10__["depthwiseConv2dNativeBackpropFilter"])(x4D, dyActivation, $filter.shape, strides, pad, dilations, dimRoundingMode);
        if (bias != null) {
            const biasDer = Object(_fused_util__WEBPACK_IMPORTED_MODULE_12__["getFusedBiasGradient"])($bias, dyActivation);
            return [xDer, filterDer, biasDer];
        }
        return [xDer, filterDer];
    };
    const forward = (backend) => {
        const res = backend.fusedDepthwiseConv2D({
            input: x4D,
            filter: $filter,
            convInfo,
            bias: $bias,
            activation,
            preluActivationWeights: $preluActivationWeights
        });
        return res;
    };
    const inputs = {
        x: x4D,
        filter: $filter,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode, activation };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["customGrad"])((x4D, filter, save) => {
            let res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["FusedDepthwiseConv2D"], attrs);
            save([filter, x4D, res]);
            if (reshapedTo4D) {
                res = Object(_reshape__WEBPACK_IMPORTED_MODULE_14__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOp(x4D, $filter);
    }
    else {
        const customOpWithBias = Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["customGrad"])((x4D, filter, bias, save) => {
            let res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["FusedDepthwiseConv2D"], attrs);
            save([filter, x4D, res, bias]);
            if (reshapedTo4D) {
                res = Object(_reshape__WEBPACK_IMPORTED_MODULE_14__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOpWithBias(x4D, $filter, $bias);
    }
}
const depthwiseConv2d = Object(_operation__WEBPACK_IMPORTED_MODULE_13__["op"])({ fusedDepthwiseConv2d_ });
//# sourceMappingURL=depthwise_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js ***!
  \**********************************************************************/
/*! exports provided: matMul */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matMul", function() { return matMul; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _fused_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












/**
 * Computes the dot product of two matrices with optional activation and bias.
 *
 * ```js
 * const a = tf.tensor2d([-1, -2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const bias = tf.tensor2d([1, 2], [1, 2]);
 *
 * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
 * ```
 *
 * @param obj An object with the following properties:
 * - `a` First matrix in dot product operation.
 * - `b` Second matrix in dot product operation.
 * - `transposeA` If true, `a` is transposed before multiplication.
 * - `transposeB` If true, `b` is transposed before multiplication.
 * - `bias` Matrix to be added to the result.
 * - `activation` Name of activation kernel (defaults to `linear`).
 * - `preluActivationWeights` Tensor of prelu weights.
 */
function fusedMatMul_({ a, b, transposeA = false, transposeB = false, bias, activation = 'linear', preluActivationWeights }) {
    if (Object(_fused_util__WEBPACK_IMPORTED_MODULE_8__["shouldFuse"])(_engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].state.gradientDepth, activation) === false) {
        let result = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(a, b, transposeA, transposeB);
        if (bias != null) {
            result = Object(_add__WEBPACK_IMPORTED_MODULE_6__["add"])(result, bias);
        }
        return Object(_fused_util__WEBPACK_IMPORTED_MODULE_8__["applyActivation"])(result, activation, preluActivationWeights);
    }
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(a, 'a', 'fused matMul');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(b, 'b', 'fused matMul');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_3__["makeTypesMatch"])($a, $b);
    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
    const outerDimsA = $a.shape.slice(0, -2);
    const outerDimsB = $b.shape.slice(0, -2);
    const batchDimA = _util__WEBPACK_IMPORTED_MODULE_5__["sizeFromShape"](outerDimsA);
    const batchDimB = _util__WEBPACK_IMPORTED_MODULE_5__["sizeFromShape"](outerDimsB);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"]($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in fused matMul: inputs must have the same rank of at least ` +
        `2, got ranks ${$a.rank} and ${$b.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](_util__WEBPACK_IMPORTED_MODULE_5__["arraysEqual"](outerDimsA, outerDimsB), () => `Error in fused matMul: outer dimensions (${outerDimsA}) and (` +
        `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +
        `${$b.shape} must match.`);
    _util__WEBPACK_IMPORTED_MODULE_5__["assert"](innerShapeA === innerShapeB, () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +
        `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +
        `${$b.shape} and transposeA=${transposeA}` +
        ` and transposeB=${transposeB} must match.`);
    const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);
    const a3D = transposeA ?
        Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])($a, [batchDimA, innerShapeA, outerShapeA]) :
        Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])($a, [batchDimA, outerShapeA, innerShapeA]);
    const b3D = transposeB ?
        Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])($b, [batchDimB, outerShapeB, innerShapeB]) :
        Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])($b, [batchDimB, innerShapeB, outerShapeB]);
    let $bias;
    if (bias != null) {
        $bias = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(bias, 'bias', 'fused matMul');
        [$bias] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_3__["makeTypesMatch"])($bias, $a);
        _broadcast_util__WEBPACK_IMPORTED_MODULE_7__["assertAndGetBroadcastShape"](outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) {
        $preluActivationWeights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__["convertToTensor"])(preluActivationWeights, 'prelu weights', 'fused matMul');
    }
    const grad = (dy, saved) => {
        const [a3D, b3D, y, $bias] = saved;
        // we reshape dy because the result of the forward is not
        // necessarily going to be a 3d tensor due to a reshape done at the end of
        // the customOp.
        const dyActivation = Object(_fused_util__WEBPACK_IMPORTED_MODULE_8__["getFusedDyActivation"])(Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])(dy, y.shape), y, activation);
        let aDer;
        let bDer;
        if (!transposeA && !transposeB) {
            aDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(dyActivation, b3D, false, true);
            bDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(a3D, dyActivation, true, false);
        }
        else if (!transposeA && transposeB) {
            aDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(dyActivation, b3D, false, false);
            bDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(dyActivation, a3D, true, false);
        }
        else if (transposeA && !transposeB) {
            aDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(b3D, dyActivation, false, true);
            bDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(a3D, dyActivation, false, false);
        }
        else {
            aDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(b3D, dyActivation, true, true);
            bDer = Object(_mat_mul__WEBPACK_IMPORTED_MODULE_9__["matMul"])(dyActivation, a3D, true, true);
        }
        if (bias != null) {
            const biasDer = Object(_fused_util__WEBPACK_IMPORTED_MODULE_8__["getFusedBiasGradient"])($bias, dyActivation);
            return [aDer, bDer, biasDer];
        }
        else {
            return [aDer, bDer];
        }
    };
    const forward = (backend) => {
        const y = backend.fusedBatchMatMul({
            a: a3D,
            b: b3D,
            transposeA,
            transposeB,
            bias: $bias,
            activation,
            preluActivationWeights: $preluActivationWeights
        });
        return y;
    };
    const inputs = {
        a: a3D,
        b: b3D,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = { transposeA, transposeB, activation };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["customGrad"])((a3D, b3D, save) => {
            const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["_FusedMatMul"], attrs);
            save([a3D, b3D, res]);
            return { value: Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])(res, outShape), gradFunc: grad };
        });
        return customOp(a3D, b3D);
    }
    else {
        const customOpWithBias = Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["customGrad"])((a3D, b3D, $bias, save) => {
            const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["_FusedMatMul"], attrs);
            save([a3D, b3D, res, $bias]);
            return { value: Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])(res, outShape), gradFunc: grad };
        });
        return customOpWithBias(a3D, b3D, $bias);
    }
}
const matMul = Object(_operation__WEBPACK_IMPORTED_MODULE_10__["op"])({ fusedMatMul_ });
//# sourceMappingURL=mat_mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js ***!
  \******************************************************************/
/*! exports provided: conv2d, depthwiseConv2d, matMul */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _fused_conv2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fused/conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2d", function() { return _fused_conv2d__WEBPACK_IMPORTED_MODULE_0__["conv2d"]; });

/* harmony import */ var _fused_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fused/depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2d", function() { return _fused_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__["depthwiseConv2d"]; });

/* harmony import */ var _fused_mat_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fused/mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matMul", function() { return _fused_mat_mul__WEBPACK_IMPORTED_MODULE_2__["matMul"]; });

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




//# sourceMappingURL=fused_ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js ***!
  \*******************************************************************/
/*! exports provided: getFusedDyActivation, getFusedBiasGradient, applyActivation, shouldFuse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFusedDyActivation", function() { return getFusedDyActivation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFusedBiasGradient", function() { return getFusedBiasGradient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyActivation", function() { return applyActivation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldFuse", function() { return shouldFuse; });
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _elu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _prelu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./prelu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _relu6__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









// Returns gradient for fused activation.
function getFusedDyActivation(dy, y, activation) {
    if (activation == null || activation === 'linear') {
        return dy;
    }
    if (activation === 'relu') {
        return Object(_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(dy, Object(_step__WEBPACK_IMPORTED_MODULE_7__["step"])(y));
    }
    throw new Error(`Cannot compute gradient for fused activation ${activation}.`);
}
// Returns gradient for fused bias.
function getFusedBiasGradient(bias, dyActivation) {
    let res = dyActivation;
    const reduceAxes = _broadcast_util__WEBPACK_IMPORTED_MODULE_0__["getReductionAxes"](bias.shape, dyActivation.shape);
    if (reduceAxes.length > 0) {
        res = Object(_sum__WEBPACK_IMPORTED_MODULE_8__["sum"])(res, reduceAxes);
    }
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, bias.shape);
}
function applyActivation(x, activation, preluActivationWeights) {
    if (activation === 'linear') {
        return x;
    }
    else if (activation === 'relu') {
        return Object(_relu__WEBPACK_IMPORTED_MODULE_4__["relu"])(x);
    }
    else if (activation === 'elu') {
        return Object(_elu__WEBPACK_IMPORTED_MODULE_1__["elu"])(x);
    }
    else if (activation === 'relu6') {
        return Object(_relu6__WEBPACK_IMPORTED_MODULE_5__["relu6"])(x);
    }
    else if (activation === 'prelu') {
        return Object(_prelu__WEBPACK_IMPORTED_MODULE_3__["prelu"])(x, preluActivationWeights);
    }
    throw new Error(`Unknown fused activation ${activation}.`);
}
// Whether we should call fused ops.
const shouldFuse = (gradientDepth, activation) => {
    const gradientMode = gradientDepth > 0;
    return !gradientMode || activation === 'linear';
};
//# sourceMappingURL=fused_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js ***!
  \***************************************************************/
/*! exports provided: gather */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gather", function() { return gather; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _segment_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./segment_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function gather_(x, indices, axis = 0) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'gather');
    const $indices = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(indices, 'indices', 'gather', 'int32');
    const inputs = { x: $x, indices: $indices };
    const attrs = { axis };
    const forward = (backend, save) => {
        const parsedAxis = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape)[0];
        const shapeInfo = Object(_segment_util__WEBPACK_IMPORTED_MODULE_6__["collectGatherOpShapeInfo"])($x, $indices, parsedAxis);
        const res = backend.gather($x, Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($indices, [$indices.size]), parsedAxis);
        save([$x, $indices]);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, shapeInfo.outputShape);
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["GatherV2"], attrs);
}
const gather = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ gather_ });
//# sourceMappingURL=gather.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js ***!
  \******************************************************************/
/*! exports provided: gatherND */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gatherND", function() { return gatherND; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Gather slices from input tensor into a Tensor with shape specified by
 * `indices`.
 *
 * `indices` is an K-dimensional integer tensor, best thought of as a
 * (K-1)-dimensional tensor of indices into input, where each element defines a
 * slice of input:
 * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
 *
 * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
 * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
 * of input, where N = indices.shape[-1].
 *
 * The last dimension of indices can be at most the rank of input:
 * indices.shape[-1] <= input.rank
 *
 * The last dimension of `indices` corresponds to elements
 * (if indices.shape[-1] == input.rank) or slices
 * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
 * input.
 * The output tensor has shape
 * indices.shape[:-1] + input.shape[indices.shape[-1]:]
 *
 * Note that on CPU, if an out of bound index is found, an error is returned. On
 * GPU, if an out of bound index is found, a 0 is stored in the corresponding
 * output value.
 *
 * ```js
 * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
 * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
 * tf.gatherND(input, indices).print() // [10, 11]
 * ```
 *
 * @param x The tensor from which to gather values.
 * @param indices Index tensor, must be of type int32.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function gatherND_(x, indices) {
    const $indices = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(indices, 'indices', 'gatherND', 'int32');
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'gatherND');
    const forward = (backend) => {
        return backend.gatherND($x, $indices);
    };
    const inputs = { params: $x, indices: $indices };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["GatherNd"]);
}
const gatherND = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ gatherND_ });
//# sourceMappingURL=gather_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js ***!
  \***********************************************************************/
/*! exports provided: prepareAndValidate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepareAndValidate", function() { return prepareAndValidate; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");

/**
 * Validate gather nd inputs.
 *
 * @param tensor The tensor contains the source values.
 * @param indices The tensor contains the indices to slice the source.
 *
 * @returns [resultShape, numUpdates, sliceSize, strides]
 */
function prepareAndValidate(tensor, indices) {
    if (tensor.rank < 1) {
        throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' +
            ` but the rank was ${tensor.rank}.`);
    }
    if (indices.rank < 1) {
        throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' +
            ` but the rank was ${indices.rank}.`);
    }
    if (indices.dtype !== 'int32') {
        throw new Error('tf.gatherND() expects the indices to be int32 type,' +
            ` but the dtype was ${indices.dtype}.`);
    }
    if (indices.shape[indices.rank - 1] > tensor.rank) {
        throw new Error('index innermost dimension length must be <= tensor rank; saw: ' +
            `${indices.shape[indices.rank - 1]} vs. ${tensor.rank}`);
    }
    if (tensor.size === 0) {
        throw new Error('Requested more than 0 entries, but input is empty.' +
            ` Input shape: ${tensor.shape}.`);
    }
    const indicesShape = indices.shape;
    const sliceRank = indicesShape[indicesShape.length - 1];
    // The result shape is
    //   indices.shape[:-1] + params.shape[indices.shape[-1]:]
    let nResult = 1;
    for (let i = 0; i < indicesShape.length - 1; ++i) {
        nResult *= indicesShape[i];
    }
    const inputShape = tensor.shape;
    const resultShape = indicesShape.slice();
    resultShape.pop();
    let sliceSize = 1;
    for (let i = sliceRank; i < tensor.rank; ++i) {
        sliceSize *= inputShape[i];
        resultShape.push(inputShape[i]);
    }
    const strides = [...Object(_util__WEBPACK_IMPORTED_MODULE_0__["computeStrides"])(tensor.shape).map(stride => stride / sliceSize),
        1].slice(0, sliceRank);
    return [resultShape, nResult, sliceSize, strides];
}
//# sourceMappingURL=gather_nd_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js ***!
  \****************************************************************/
/*! exports provided: greater */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greater", function() { return greater; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a > b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greater(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greater_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'greater');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'greater');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = backend => backend.greater($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Greater"]);
}
const greater = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ greater_ });
//# sourceMappingURL=greater.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js ***!
  \**********************************************************************/
/*! exports provided: greaterEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greaterEqual", function() { return greaterEqual; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greaterEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greaterEqual_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'greaterEqual');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'greaterEqual');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = (backend, save) => {
        const res = backend.greaterEqual($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["GreaterEqual"]);
}
const greaterEqual = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ greaterEqual_ });
//# sourceMappingURL=greater_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js ***!
  \*************************************************************/
/*! exports provided: imag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "imag", function() { return imag; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the imaginary part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the imaginary part of each element in input considered as a complex number.
 * If input is real, a tensor of all zeros is returned.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.imag(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function imag_(input) {
    const $input = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(input, 'input', 'imag');
    const forward = (backend) => {
        return backend.imag($input);
    };
    const inputs = { input: $input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Imag"]);
}
const imag = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ imag_ });
//# sourceMappingURL=imag.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js ***!
  \******************************************************************************/
/*! exports provided: cropAndResize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cropAndResize", function() { return cropAndResize; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Extracts crops from the input image tensor and resizes them using bilinear
 * sampling or nearest neighbor sampling (possibly with aspect ratio change)
 * to a common output size specified by cropSize.
 *
 * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
 *     where imageHeight and imageWidth must be positive, specifying the
 *     batch of images from which to take crops
 * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
 *     coordinates of the box in the boxInd[i]'th image in the batch
 * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
 *     `[0, batch)` that specifies the image that the `i`-th box refers to.
 * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
 *     specifying the size to which all crops are resized to.
 * @param method Optional string from `'bilinear' | 'nearest'`,
 *     defaults to bilinear, which specifies the sampling method for resizing
 * @param extrapolationValue A threshold for deciding when to remove boxes based
 *     on score. Defaults to 0.
 * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function cropAndResize_(image, boxes, boxInd, cropSize, method, extrapolationValue) {
    const $image = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(image, 'image', 'cropAndResize');
    const $boxes = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(boxes, 'boxes', 'cropAndResize', 'float32');
    const $boxInd = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(boxInd, 'boxInd', 'cropAndResize', 'int32');
    method = method || 'bilinear';
    extrapolationValue = extrapolationValue || 0;
    const numBoxes = $boxes.shape[0];
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' +
        `but got rank ${$image.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +
        `but had shape ${$boxes.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +
        `but had shape ${$boxes.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` +
        `length ${cropSize.length}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);
    const forward = (backend) => backend.cropAndResize($image, $boxes, $boxInd, cropSize, method, extrapolationValue);
    const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };
    const attrs = { method, extrapolationValue, cropSize };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["CropAndResize"], attrs);
    return res;
}
const cropAndResize = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ cropAndResize_ });
//# sourceMappingURL=crop_and_resize.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js ***!
  \******************************************************************************/
/*! exports provided: flipLeftRight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flipLeftRight", function() { return flipLeftRight; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Flips the image left to right. Currently available in the CPU, WebGL, and
 * WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 */
/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
function flipLeftRight_(image) {
    const $image = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(image, 'image', 'flipLeftRight', 'float32');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' +
        `but got rank ${$image.rank}.`);
    const inputs = { image: $image };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["FlipLeftRight"], inputs, {});
    return res;
}
const flipLeftRight = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ flipLeftRight_ });
//# sourceMappingURL=flip_left_right.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js ***!
  \**********************************************************************************/
/*! exports provided: nonMaxSuppression */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppression", function() { return nonMaxSuppression; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(boxes, 'boxes', 'nonMaxSuppression');
    const $scores = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(scores, 'scores', 'nonMaxSuppression');
    const inputs = Object(_nonmax_util__WEBPACK_IMPORTED_MODULE_3__["nonMaxSuppSanityCheck"])($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const attrs = { maxOutputSize, iouThreshold, scoreThreshold };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(b => b.nonMaxSuppression($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold), { boxes: $boxes, scores: $scores }, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["NonMaxSuppressionV3"], attrs);
}
const nonMaxSuppression = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ nonMaxSuppression_ });
//# sourceMappingURL=non_max_suppression.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js ***!
  \****************************************************************************************/
/*! exports provided: nonMaxSuppressionAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionAsync", function() { return nonMaxSuppressionAsync; });
/* harmony import */ var _backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../backends/non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This is the async version of `nonMaxSuppression`
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(boxes, 'boxes', 'nonMaxSuppressionAsync');
    const $scores = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(scores, 'scores', 'nonMaxSuppressionAsync');
    const inputs = Object(_nonmax_util__WEBPACK_IMPORTED_MODULE_2__["nonMaxSuppSanityCheck"])($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    // We call a cpu based impl directly with the typedarray data  here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const res = Object(_backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__["nonMaxSuppressionV3Impl"])(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
    if ($boxes !== boxes) {
        $boxes.dispose();
    }
    if ($scores !== scores) {
        $scores.dispose();
    }
    return res;
}
const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;
//# sourceMappingURL=non_max_suppression_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js ***!
  \*****************************************************************************************/
/*! exports provided: nonMaxSuppressionPadded */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionPadded", function() { return nonMaxSuppressionPadded; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
    const $boxes = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(boxes, 'boxes', 'nonMaxSuppression');
    const $scores = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(scores, 'scores', 'nonMaxSuppression');
    const params = Object(_nonmax_util__WEBPACK_IMPORTED_MODULE_3__["nonMaxSuppSanityCheck"])($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
    const $maxOutputSize = params.maxOutputSize;
    const $iouThreshold = params.iouThreshold;
    const $scoreThreshold = params.scoreThreshold;
    const inputs = { boxes: $boxes, scores: $scores };
    const attrs = {
        maxOutputSize: $maxOutputSize,
        iouThreshold: $iouThreshold,
        scoreThreshold: $scoreThreshold,
        padToMaxOutputSize
    };
    const result = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["NonMaxSuppressionV4"], inputs, attrs);
    return { selectedIndices: result[0], validOutputs: result[1] };
}
const nonMaxSuppressionPadded = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ nonMaxSuppressionPadded_ });
//# sourceMappingURL=non_max_suppression_padded.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js ***!
  \***********************************************************************************************/
/*! exports provided: nonMaxSuppressionPaddedAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionPaddedAsync", function() { return nonMaxSuppressionPaddedAsync; });
/* harmony import */ var _backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../backends/non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
    const $boxes = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(boxes, 'boxes', 'nonMaxSuppressionAsync');
    const $scores = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(scores, 'scores', 'nonMaxSuppressionAsync');
    const params = Object(_nonmax_util__WEBPACK_IMPORTED_MODULE_2__["nonMaxSuppSanityCheck"])($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
    const $maxOutputSize = params.maxOutputSize;
    const $iouThreshold = params.iouThreshold;
    const $scoreThreshold = params.scoreThreshold;
    const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);
    // We call a cpu based impl directly with the typedarray data here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const res = Object(_backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__["nonMaxSuppressionV4Impl"])(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);
    if ($boxes !== boxes) {
        $boxes.dispose();
    }
    if ($scores !== scores) {
        $scores.dispose();
    }
    return res;
}
const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;
//# sourceMappingURL=non_max_suppression_padded_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js ***!
  \*********************************************************************************************/
/*! exports provided: nonMaxSuppressionWithScore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionWithScore", function() { return nonMaxSuppressionWithScore; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(boxes, 'boxes', 'nonMaxSuppression');
    const $scores = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(scores, 'scores', 'nonMaxSuppression');
    const params = Object(_nonmax_util__WEBPACK_IMPORTED_MODULE_3__["nonMaxSuppSanityCheck"])($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = params.maxOutputSize;
    iouThreshold = params.iouThreshold;
    scoreThreshold = params.scoreThreshold;
    softNmsSigma = params.softNmsSigma;
    const inputs = { boxes: $boxes, scores: $scores };
    const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };
    const result = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["NonMaxSuppressionV5"], inputs, attrs);
    return { selectedIndices: result[0], selectedScores: result[1] };
}
const nonMaxSuppressionWithScore = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ nonMaxSuppressionWithScore_ });
//# sourceMappingURL=non_max_suppression_with_score.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js ***!
  \***************************************************************************************************/
/*! exports provided: nonMaxSuppressionWithScoreAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppressionWithScoreAsync", function() { return nonMaxSuppressionWithScoreAsync; });
/* harmony import */ var _backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../backends/non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(boxes, 'boxes', 'nonMaxSuppressionAsync');
    const $scores = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(scores, 'scores', 'nonMaxSuppressionAsync');
    const params = Object(_nonmax_util__WEBPACK_IMPORTED_MODULE_2__["nonMaxSuppSanityCheck"])($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = params.maxOutputSize;
    iouThreshold = params.iouThreshold;
    scoreThreshold = params.scoreThreshold;
    softNmsSigma = params.softNmsSigma;
    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    // We call a cpu based impl directly with the typedarray data  here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const res = Object(_backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__["nonMaxSuppressionV5Impl"])(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    if ($boxes !== boxes) {
        $boxes.dispose();
    }
    if ($scores !== scores) {
        $scores.dispose();
    }
    return res;
}
const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;
//# sourceMappingURL=non_max_suppression_with_score_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js ***!
  \******************************************************************************/
/*! exports provided: resizeBilinear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizeBilinear", function() { return resizeBilinear; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Bilinear resize a single 3D image or a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeBilinear_(images, size, alignCorners = false) {
    const $images = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(images, 'images', 'resizeBilinear');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +
        `rank ${$images.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` +
        `${size}.`);
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
    }
    const [newHeight, newWidth] = size;
    const forward = (backend, save) => {
        save([batchImages]);
        return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);
    };
    const inputs = { images: batchImages };
    const attrs = { alignCorners, size };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ResizeBilinear"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const resizeBilinear = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ resizeBilinear_ });
//# sourceMappingURL=resize_bilinear.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js ***!
  \**************************************************************************************/
/*! exports provided: resizeNearestNeighbor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizeNearestNeighbor", function() { return resizeNearestNeighbor; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * NearestNeighbor resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeNearestNeighbor_(images, size, alignCorners = false) {
    const $images = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(images, 'images', 'resizeNearestNeighbor');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +
        `rank ${$images.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +
        `${size}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
    }
    const [newHeight, newWidth] = size;
    const inputs = { images: batchImages };
    const attrs = { alignCorners, size };
    const forward = (backend, save) => {
        save([batchImages]);
        return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);
    };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ResizeNearestNeighbor"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const resizeNearestNeighbor = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ resizeNearestNeighbor_ });
//# sourceMappingURL=resize_nearest_neighbor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js ***!
  \*********************************************************************************/
/*! exports provided: rotateWithOffset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateWithOffset", function() { return rotateWithOffset; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Rotates the input image tensor counter-clockwise with an optional offset
 * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param radians The amount of rotation.
 * @param fillValue The value to fill in the empty space leftover
 *     after rotation. Can be either a single grayscale value (0-255), or an
 *     array of three numbers `[red, green, blue]` specifying the red, green,
 *     and blue channels. Defaults to `0` (black).
 * @param center The center of rotation. Can be either a single value (0-1), or
 *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
 *     the image around its center).
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {
    const $image = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(image, 'image', 'rotateWithOffset', 'float32');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' +
        `but got rank ${$image.rank}.`);
    const inputs = { image: $image };
    const attrs = { radians, fillValue, center };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["RotateWithOffset"], inputs, attrs);
    return res;
}
const rotateWithOffset = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ rotateWithOffset_ });
//# sourceMappingURL=rotate_with_offset.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js ***!
  \*****************************************************************/
/*! exports provided: inTopKAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inTopKAsync", function() { return inTopKAsync; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Returns whether the targets are in the top K predictions.
 *
 * ```js
 * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
 * const targets = tf.tensor1d([2, 0]);
 * const precision = await tf.inTopKAsync(predictions, targets);
 * precision.print();
 * ```
 * @param predictions 2-D or higher `tf.Tensor` with last dimension being
 *     at least `k`.
 * @param targets 1-D or higher `tf.Tensor`.
 * @param k Optional Number of top elements to look at for computing precision,
 *     default to 1.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
async function inTopKAsync_(predictions, targets, k = 1) {
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'inTopK');
    const $targets = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(targets, 'targets', 'inTopK');
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])($predictions.rank > 1, () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +
        `but got ${$predictions.rank}`);
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than ` +
        `targets rank, but got predictions rank ` +
        `${$predictions.rank} and targets rank ${$targets.rank}`);
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` +
        'except the last dimension.');
    const lastDim = $predictions.shape[$predictions.shape.length - 1];
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +
        `dimension (${lastDim}), but got ${k}`);
    const predictionsVals = await $predictions.data();
    const targetsVals = await $targets.data();
    // Reshape predictionsVals into a 2d tensor [batch, lastDim]
    // and look up topK along lastDim.
    const [batch, size] = [predictionsVals.length / lastDim, lastDim];
    const precision = Object(_util__WEBPACK_IMPORTED_MODULE_1__["getTypedArrayFromDType"])('bool', batch);
    for (let b = 0; b < batch; b++) {
        const offset = b * size;
        const vals = predictionsVals.subarray(offset, offset + size);
        const valAndInd = [];
        for (let i = 0; i < vals.length; i++) {
            valAndInd.push({ value: vals[i], index: i });
        }
        valAndInd.sort((a, b) => b.value - a.value);
        precision[b] = 0;
        for (let i = 0; i < k; i++) {
            if (valAndInd[i].index === targetsVals[b]) {
                precision[b] = 1;
                break;
            }
        }
    }
    if (predictions !== $predictions) {
        $predictions.dispose();
    }
    if (targets !== $targets) {
        $targets.dispose();
    }
    // Output precision has the same shape as targets.
    return Object(_tensor__WEBPACK_IMPORTED_MODULE_2__["tensor"])(precision, $targets.shape, 'bool');
}
const inTopKAsync = inTopKAsync_;
//# sourceMappingURL=in_top_k.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js ***!
  \******************************************************************/
/*! exports provided: isFinite */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFinite", function() { return isFinite; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns which elements of x are finite.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isFinite().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isFinite_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'isFinite');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend) => backend.isFinite($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["IsFinite"]);
}
const isFinite = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ isFinite_ });
//# sourceMappingURL=is_finite.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js ***!
  \***************************************************************/
/*! exports provided: isInf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInf", function() { return isInf; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns which elements of x are Infinity or -Infinity.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isInf().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isInf_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'isInf');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend) => backend.isInf($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["IsInf"]);
}
const isInf = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ isInf_ });
//# sourceMappingURL=is_inf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js ***!
  \***************************************************************/
/*! exports provided: isNaN */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return isNaN; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * RReturns which elements of x are NaN.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isNaN().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isNaN_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'isNaN');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.isNaN($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["IsNan"]);
}
const isNaN = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ isNaN_ });
//# sourceMappingURL=is_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js ***!
  \*******************************************************************/
/*! exports provided: leakyRelu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "leakyRelu", function() { return leakyRelu; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes leaky rectified linear element-wise.
 *
 * See
 * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
 *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
 * ```
 * @param x The input tensor.
 * @param alpha The scaling factor for negative values, defaults to 0.2.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function leakyRelu_(x, alpha = 0.2) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'leakyRelu');
    return Object(_maximum__WEBPACK_IMPORTED_MODULE_1__["maximum"])(Object(_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(Object(_scalar__WEBPACK_IMPORTED_MODULE_4__["scalar"])(alpha), $x), $x);
}
const leakyRelu = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ leakyRelu_ });
//# sourceMappingURL=leaky_relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/less.js ***!
  \*************************************************************/
/*! exports provided: less */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "less", function() { return less; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a < b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.less(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function less_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'less');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'less');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = backend => backend.less($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Less"]);
}
const less = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ less_ });
//# sourceMappingURL=less.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js ***!
  \*******************************************************************/
/*! exports provided: lessEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lessEqual", function() { return lessEqual; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.lessEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function lessEqual_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'lessEqual');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'lessEqual');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = (backend, save) => {
        const res = backend.lessEqual($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LessEqual"]);
}
const lessEqual = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ lessEqual_ });
//# sourceMappingURL=less_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js ***!
  \*************************************************************************/
/*! exports provided: bandPart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bandPart", function() { return bandPart; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../range */ "./node_modules/@tensorflow/tfjs-core/dist/ops/range.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */














/**
 * Copy a tensor setting everything outside a central band in each innermost
 * matrix to zero.
 *
 * The band part is computed as follows: Assume input has `k` dimensions
 * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
 * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
 * The indicator function
 * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
 * `&& (num_upper < 0 || (n-m) <= num_upper)`
 *
 * ```js
 * const x = tf.tensor2d([[ 0,  1,  2, 3],
 *                        [-1,  0,  1, 2],
 *                        [-2, -1,  0, 1],
 *                        [-3, -2, -1, 0]]);
 * let y = tf.linalg.bandPart(x, 1, -1);
 * y.print(); // [[ 0,  1,  2, 3],
 *            //  [-1,  0,  1, 2],
 *            //  [ 0, -1,  0, 1],
 *            //  [ 0, 0 , -1, 0]]
 * let z = tf.linalg.bandPart(x, 2, 1);
 * z.print(); // [[ 0,  1,  0, 0],
 *            //  [-1,  0,  1, 0],
 *            //  [-2, -1,  0, 1],
 *            //  [ 0, -2, -1, 0]]
 * ```
 *
 * @param x Rank `k` tensor
 * @param numLower Number of subdiagonals to keep.
 *   If negative, keep entire lower triangle.
 * @param numUpper Number of subdiagonals to keep.
 *   If negative, keep entire upper triangle.
 * @returns Rank `k` tensor of the same shape as input.
 *   The extracted banded tensor.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function bandPart_(a, numLower, numUpper) {
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(a, 'a', 'bandPart');
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);
    const shape = $a.shape;
    const [M, N] = $a.shape.slice(-2);
    if (!(numLower <= M)) {
        throw new Error(`bandPart(): numLower (${numLower})` +
            ` must not be greater than the number of rows (${M}).`);
    }
    if (!(numUpper <= N)) {
        throw new Error(`bandPart(): numUpper (${numUpper})` +
            ` must not be greater than the number of columns (${N}).`);
    }
    if (numLower < 0) {
        numLower = M;
    }
    if (numUpper < 0) {
        numUpper = N;
    }
    const i = Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(Object(_range__WEBPACK_IMPORTED_MODULE_6__["range"])(0, M, 1, 'int32'), [-1, 1]);
    const j = Object(_range__WEBPACK_IMPORTED_MODULE_6__["range"])(0, N, 1, 'int32');
    const ij = Object(_sub__WEBPACK_IMPORTED_MODULE_10__["sub"])(i, j);
    const inBand = Object(_logical_and__WEBPACK_IMPORTED_MODULE_4__["logicalAnd"])(Object(_less_equal__WEBPACK_IMPORTED_MODULE_3__["lessEqual"])(ij, Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(+numLower, 'int32')), Object(_greater_equal__WEBPACK_IMPORTED_MODULE_2__["greaterEqual"])(ij, Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(-numUpper, 'int32')));
    const zero = Object(_zeros__WEBPACK_IMPORTED_MODULE_13__["zeros"])([M, N], $a.dtype);
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(Object(_stack__WEBPACK_IMPORTED_MODULE_9__["stack"])(Object(_unstack__WEBPACK_IMPORTED_MODULE_11__["unstack"])(Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])($a, [-1, M, N]))
        .map(mat => Object(_where__WEBPACK_IMPORTED_MODULE_12__["where"])(inBand, mat, zero))), shape);
}
const bandPart = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ bandPart_ });
//# sourceMappingURL=band_part.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js ***!
  \****************************************************************************/
/*! exports provided: gramSchmidt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gramSchmidt", function() { return gramSchmidt; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../norm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Gram-Schmidt orthogonalization.
 *
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * let y = tf.linalg.gramSchmidt(x);
 * y.print();
 * console.log('Othogonalized:');
 * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
 * console.log('First row direction maintained:');
 * const data = await y.array();
 * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
 * ```
 *
 * @param xs The vectors to be orthogonalized, in one of the two following
 *   formats:
 *   - An Array of `tf.Tensor1D`.
 *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
 *     of `xs`.
 *   In each case, all the vectors must have the same length and the length
 *   must be greater than or equal to the number of vectors.
 * @returns The orthogonalized and normalized vectors or matrix.
 *   Orthogonalization means that the vectors or the rows of the matrix
 *   are orthogonal (zero inner products). Normalization means that each
 *   vector or each row of the matrix has an L2 norm that equals `1`.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function gramSchmidt_(xs) {
    let inputIsTensor2D;
    if (Array.isArray(xs)) {
        inputIsTensor2D = false;
        Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +
            'empty');
        const dim = xs[0].shape[0];
        for (let i = 1; i < xs.length; ++i) {
            Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +
                `(${xs[i].shape[0]} vs. ${dim})`);
        }
    }
    else {
        inputIsTensor2D = true;
        xs = Object(_split__WEBPACK_IMPORTED_MODULE_6__["split"])(xs, xs.shape[0], 0).map(x => Object(_squeeze__WEBPACK_IMPORTED_MODULE_7__["squeeze"])(x, [0]));
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +
        `number of dimensions (${xs[0].shape[0]}).`);
    const ys = [];
    const xs1d = xs;
    for (let i = 0; i < xs.length; ++i) {
        ys.push(_engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].tidy(() => {
            let x = xs1d[i];
            if (i > 0) {
                for (let j = 0; j < i; ++j) {
                    const proj = Object(_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(Object(_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(ys[j], x)), ys[j]);
                    x = Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(x, proj);
                }
            }
            return Object(_div__WEBPACK_IMPORTED_MODULE_2__["div"])(x, Object(_norm__WEBPACK_IMPORTED_MODULE_4__["norm"])(x, 'euclidean'));
        }));
    }
    if (inputIsTensor2D) {
        return Object(_stack__WEBPACK_IMPORTED_MODULE_8__["stack"])(ys, 0);
    }
    else {
        return ys;
    }
}
const gramSchmidt = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ gramSchmidt_ });
//# sourceMappingURL=gram_schmidt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js ***!
  \******************************************************************/
/*! exports provided: qr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "qr", function() { return qr; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _eye__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../eye */ "./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js");
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../norm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _tensor2d__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../tensor2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





















/**
 * Compute QR decomposition of m-by-n matrix using Householder transformation.
 *
 * Implementation based on
 *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
 * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [3, 4]]);
 * let [q, r] = tf.linalg.qr(a);
 * console.log('Q');
 * q.print();
 * console.log('R');
 * r.print();
 * console.log('Orthogonalized');
 * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
 * console.log('Reconstructed');
 * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
 * ```
 *
 * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
 *   it has the shape `[..., M, N]`.
 * @param fullMatrices An optional boolean parameter. Defaults to `false`.
 *   If `true`, compute full-sized `Q`. If `false` (the default),
 *   compute only the leading N columns of `Q` and `R`.
 * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
 *   i.e., its columns all have unit norm and are mutually orthogonal.
 *   If `M >= N`,
 *     If `fullMatrices` is `false` (default),
 *       - `Q` has a shape of `[..., M, N]`,
 *       - `R` has a shape of `[..., N, N]`.
 *     If `fullMatrices` is `true` (default),
 *       - `Q` has a shape of `[..., M, M]`,
 *       - `R` has a shape of `[..., M, N]`.
 *   If `M < N`,
 *     - `Q` has a shape of `[..., M, M]`,
 *     - `R` has a shape of `[..., M, N]`.
 * @throws If the rank of `x` is less than 2.
 *
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */
function qr_(x, fullMatrices = false) {
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);
    if (x.rank === 2) {
        return qr2d(x, fullMatrices);
    }
    else {
        // Rank > 2.
        // TODO(cais): Below we split the input into individual 2D tensors,
        //   perform QR decomposition on them and then stack the results back
        //   together. We should explore whether this can be parallelized.
        const outerDimsProd = x.shape.slice(0, x.shape.length - 2)
            .reduce((value, prev) => value * prev);
        const x2ds = Object(_unstack__WEBPACK_IMPORTED_MODULE_19__["unstack"])(Object(_reshape__WEBPACK_IMPORTED_MODULE_13__["reshape"])(x, [
            outerDimsProd, x.shape[x.shape.length - 2],
            x.shape[x.shape.length - 1]
        ]), 0);
        const q2ds = [];
        const r2ds = [];
        x2ds.forEach(x2d => {
            const [q2d, r2d] = qr2d(x2d, fullMatrices);
            q2ds.push(q2d);
            r2ds.push(r2d);
        });
        const q = Object(_reshape__WEBPACK_IMPORTED_MODULE_13__["reshape"])(Object(_stack__WEBPACK_IMPORTED_MODULE_15__["stack"])(q2ds, 0), x.shape);
        const r = Object(_reshape__WEBPACK_IMPORTED_MODULE_13__["reshape"])(Object(_stack__WEBPACK_IMPORTED_MODULE_15__["stack"])(r2ds, 0), x.shape);
        return [q, r];
    }
}
function qr2d(x, fullMatrices = false) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].tidy(() => {
        Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);
        const m = x.shape[0];
        const n = x.shape[1];
        let q = Object(_eye__WEBPACK_IMPORTED_MODULE_6__["eye"])(m); // Orthogonal transform so far.
        let r = Object(_clone__WEBPACK_IMPORTED_MODULE_3__["clone"])(x); // Transformed matrix so far.
        const one2D = Object(_tensor2d__WEBPACK_IMPORTED_MODULE_17__["tensor2d"])([[1]], [1, 1]);
        let w = Object(_clone__WEBPACK_IMPORTED_MODULE_3__["clone"])(one2D);
        const iters = m >= n ? n : m;
        for (let j = 0; j < iters; ++j) {
            // This tidy within the for-loop ensures we clean up temporary
            // tensors as soon as they are no longer needed.
            const rTemp = r;
            const wTemp = w;
            const qTemp = q;
            [w, r, q] = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].tidy(() => {
                // Find H = I - tau * w * w', to put zeros below R(j, j).
                const rjEnd1 = Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(r, [j, j], [m - j, 1]);
                const normX = Object(_norm__WEBPACK_IMPORTED_MODULE_11__["norm"])(rjEnd1);
                const rjj = Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(r, [j, j], [1, 1]);
                // The sign() function returns 0 on 0, which causes division by zero.
                const s = Object(_where__WEBPACK_IMPORTED_MODULE_20__["where"])(Object(_greater__WEBPACK_IMPORTED_MODULE_7__["greater"])(rjj, 0), Object(_tensor2d__WEBPACK_IMPORTED_MODULE_17__["tensor2d"])([[-1]]), Object(_tensor2d__WEBPACK_IMPORTED_MODULE_17__["tensor2d"])([[1]]));
                const u1 = Object(_sub__WEBPACK_IMPORTED_MODULE_16__["sub"])(rjj, Object(_mul__WEBPACK_IMPORTED_MODULE_9__["mul"])(s, normX));
                const wPre = Object(_div__WEBPACK_IMPORTED_MODULE_5__["div"])(rjEnd1, u1);
                if (wPre.shape[0] === 1) {
                    w = Object(_clone__WEBPACK_IMPORTED_MODULE_3__["clone"])(one2D);
                }
                else {
                    w = Object(_concat__WEBPACK_IMPORTED_MODULE_4__["concat"])([
                        one2D,
                        Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])
                    ], 0);
                }
                const tau = Object(_neg__WEBPACK_IMPORTED_MODULE_10__["neg"])(Object(_div__WEBPACK_IMPORTED_MODULE_5__["div"])(Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(s, u1), normX));
                // -- R := HR, Q := QH.
                const rjEndAll = Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(r, [j, 0], [m - j, n]);
                const tauTimesW = Object(_mul__WEBPACK_IMPORTED_MODULE_9__["mul"])(tau, w);
                const wT = Object(_transpose__WEBPACK_IMPORTED_MODULE_18__["transpose"])(w);
                if (j === 0) {
                    r = Object(_sub__WEBPACK_IMPORTED_MODULE_16__["sub"])(rjEndAll, Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(tauTimesW, Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(wT, rjEndAll)));
                }
                else {
                    const rTimesTau = Object(_sub__WEBPACK_IMPORTED_MODULE_16__["sub"])(rjEndAll, Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(tauTimesW, Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(wT, rjEndAll)));
                    r = Object(_concat__WEBPACK_IMPORTED_MODULE_4__["concat"])([Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(r, [0, 0], [j, n]), rTimesTau], 0);
                }
                const tawTimesWT = Object(_transpose__WEBPACK_IMPORTED_MODULE_18__["transpose"])(tauTimesW);
                const qAllJEnd = Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(q, [0, j], [m, q.shape[1] - j]);
                if (j === 0) {
                    q = Object(_sub__WEBPACK_IMPORTED_MODULE_16__["sub"])(qAllJEnd, Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(qAllJEnd, w), tawTimesWT));
                }
                else {
                    const qTimesTau = Object(_sub__WEBPACK_IMPORTED_MODULE_16__["sub"])(qAllJEnd, Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(Object(_mat_mul__WEBPACK_IMPORTED_MODULE_8__["matMul"])(qAllJEnd, w), tawTimesWT));
                    q = Object(_concat__WEBPACK_IMPORTED_MODULE_4__["concat"])([Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(q, [0, 0], [m, j]), qTimesTau], 1);
                }
                return [w, r, q];
            });
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])([rTemp, wTemp, qTemp]);
        }
        if (!fullMatrices && m > n) {
            q = Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(q, [0, 0], [m, n]);
            r = Object(_slice__WEBPACK_IMPORTED_MODULE_14__["slice"])(r, [0, 0], [n, n]);
        }
        return [q, r];
    });
}
const qr = Object(_operation__WEBPACK_IMPORTED_MODULE_12__["op"])({ qr_ });
//# sourceMappingURL=qr.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js ***!
  \*****************************************************************/
/*! exports provided: linspace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linspace", function() { return linspace; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Return an evenly spaced sequence of numbers over the given interval.
 *
 * ```js
 * tf.linspace(0, 9, 10).print();
 * ```
 * @param start The start value of the sequence.
 * @param stop The end value of the sequence.
 * @param num The number of values to generate.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function linspace(start, stop, num) {
    if (num <= 0) {
        throw new Error('The number of values should be positive.');
    }
    const attrs = { start, stop, num };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.linspace(start, stop, num), {} /* inputs */, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LinSpace"], attrs);
}
//# sourceMappingURL=linspace.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js ***!
  \*************************************************************************************/
/*! exports provided: localResponseNormalization */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "localResponseNormalization", function() { return localResponseNormalization; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Normalizes the activation of a local neighborhood across or within
 * channels.
 *
 * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
 *     of 1D vectors (along the last dimension), and each vector is
 *     normalized independently.
 * @param depthRadius The number of adjacent channels in the 1D normalization
 *     window.
 * @param bias A constant bias term for the basis.
 * @param alpha A scale factor, usually positive.
 * @param beta An exponent.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'localResponseNormalization');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` +
        `integer but got depthRadius ${depthRadius}.`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    const forward = (backend, save) => {
        const y = backend.localResponseNormalization4D(x4D, depthRadius, bias, alpha, beta);
        save([x4D, y]);
        return y;
    };
    const inputs = { x: x4D };
    const attrs = { depthRadius, bias, alpha, beta };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LRN"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    else {
        return res;
    }
}
const localResponseNormalization = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ localResponseNormalization_ });
//# sourceMappingURL=local_response_normalization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js ***!
  \**********************************************************************************************/
/*! exports provided: localResponseNormalizationBackprop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "localResponseNormalizationBackprop", function() { return localResponseNormalizationBackprop; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function localResponseNormalizationBackprop_(x, y, dy, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
    const forward = backend => backend.LRNGrad(dy, x, y, depthRadius, bias, alpha, beta);
    const inputs = { x, y, dy };
    const attrs = { depthRadius, bias, alpha, beta };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LRNBackprop"], attrs);
}
const localResponseNormalizationBackprop = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ localResponseNormalizationBackprop_ });
//# sourceMappingURL=local_response_normalization_backprop.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log.js ***!
  \************************************************************/
/*! exports provided: log */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E]);
 *
 * x.log().print();  // or tf.log(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'log');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.log($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Log"]);
}
const log = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ log_ });
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js ***!
  \**************************************************************/
/*! exports provided: log1p */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log1p", function() { return log1p; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes natural logarithm of the input `tf.Tensor` plus one
 * element-wise: `ln(1 + x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E - 1]);
 *
 * x.log1p().print();  // or tf.log1p(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log1p_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'log1p');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.log1p($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Log1p"]);
}
const log1p = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ log1p_ });
//# sourceMappingURL=log1p.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js ***!
  \********************************************************************/
/*! exports provided: logSigmoid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logSigmoid", function() { return logSigmoid; });
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony import */ var _softplus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./softplus */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes log sigmoid of the input `tf.Tensor` element-wise:
 * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.logSigmoid().print();  // or tf.logSigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function logSigmoid_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(x, 'x', 'logSigmoid');
    // Use a custom gradient to maintain previous implementation.
    // There is no LogSigmoid kernel in TF so we can't use engine.runKernel
    // directly
    const customOp = Object(_gradients__WEBPACK_IMPORTED_MODULE_0__["customGrad"])((x) => {
        // TODO(yassogba) we can remove the chained softplus call here only
        // after backends have modualrized softplus at which point we can call
        // engine runKernel(..., Sotfplus, ...) directly.
        const value = Object(_neg__WEBPACK_IMPORTED_MODULE_3__["neg"])(Object(_softplus__WEBPACK_IMPORTED_MODULE_6__["softplus"])(Object(_neg__WEBPACK_IMPORTED_MODULE_3__["neg"])(x)));
        const gradFunc = (dy) => {
            const derX = Object(_mul__WEBPACK_IMPORTED_MODULE_2__["mul"])(dy, Object(_sigmoid__WEBPACK_IMPORTED_MODULE_5__["sigmoid"])(Object(_neg__WEBPACK_IMPORTED_MODULE_3__["neg"])(x)));
            return derX;
        };
        return { value, gradFunc };
    });
    return customOp($x);
}
const logSigmoid = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ logSigmoid_ });
//# sourceMappingURL=log_sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js ***!
  \********************************************************************/
/*! exports provided: logSoftmax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logSoftmax", function() { return logSoftmax; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * Computes the log softmax.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param axis The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function logSoftmax_(logits, axis = -1) {
    const $logits = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(logits, 'logits', 'logSoftmax');
    if (axis === -1) {
        axis = $logits.rank - 1;
    }
    if (axis !== $logits.rank - 1) {
        throw Error('Log Softmax along a non-last dimension is not yet supported. ' +
            `Logits was rank ${$logits.rank} and axis was ${axis}`);
    }
    const forward = (backend, save) => {
        const keepDims = true;
        const xMax = Object(_max__WEBPACK_IMPORTED_MODULE_6__["max"])(logits, axis, true);
        const shifted = Object(_sub__WEBPACK_IMPORTED_MODULE_8__["sub"])(logits, xMax);
        const value = Object(_sub__WEBPACK_IMPORTED_MODULE_8__["sub"])(Object(_cast__WEBPACK_IMPORTED_MODULE_3__["cast"])(shifted, 'float32'), Object(_log__WEBPACK_IMPORTED_MODULE_5__["log"])(Object(_sum__WEBPACK_IMPORTED_MODULE_9__["sum"])(Object(_exp__WEBPACK_IMPORTED_MODULE_4__["exp"])(shifted), axis, keepDims)));
        save([value]);
        return value;
    };
    const inputs = { logits: $logits };
    const attrs = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LogSoftmax"], attrs);
}
const logSoftmax = Object(_operation__WEBPACK_IMPORTED_MODULE_7__["op"])({ logSoftmax_ });
//# sourceMappingURL=log_softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js ***!
  \********************************************************************/
/*! exports provided: logSumExp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logSumExp", function() { return logSumExp; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Computes the log(sum(exp(elements across the reduction dimensions)).
 *
 * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.logSumExp().print();  // or tf.logSumExp(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
 * ```
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. If null (the default),
 *     reduces all dimensions.
 * @param keepDims If true, retains reduced dimensions with length
 *     of 1. Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function logSumExp_(x, axis = null, keepDims = false) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'logSumExp');
    const axes = Object(_util__WEBPACK_IMPORTED_MODULE_1__["parseAxisParam"])(axis, $x.shape);
    const xMax = Object(_max__WEBPACK_IMPORTED_MODULE_6__["max"])($x, axes, true /* keepDims */);
    const a = Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])($x, xMax);
    const b = Object(_exp__WEBPACK_IMPORTED_MODULE_4__["exp"])(a);
    const c = Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(b, axes);
    const d = Object(_log__WEBPACK_IMPORTED_MODULE_5__["log"])(c);
    const res = Object(_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_reshape__WEBPACK_IMPORTED_MODULE_8__["reshape"])(xMax, d.shape), d);
    if (keepDims) {
        const newShape = Object(_axis_util__WEBPACK_IMPORTED_MODULE_3__["expandShapeToKeepDim"])(res.shape, axes);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_8__["reshape"])(res, newShape);
    }
    return res;
}
const logSumExp = Object(_operation__WEBPACK_IMPORTED_MODULE_7__["op"])({ logSumExp_ });
//# sourceMappingURL=log_sum_exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js ***!
  \********************************************************************/
/*! exports provided: logicalAnd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logicalAnd", function() { return logicalAnd; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalAnd(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalAnd_(a, b) {
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(a, 'a', 'logicalAnd', 'bool');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(b, 'b', 'logicalAnd', 'bool');
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_3__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.logicalAnd($a, $b), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LogicalAnd"]);
}
const logicalAnd = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ logicalAnd_ });
//# sourceMappingURL=logical_and.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js ***!
  \********************************************************************/
/*! exports provided: logicalNot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logicalNot", function() { return logicalNot; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the truth value of `NOT x` element-wise.
 *
 * ```js
 * const a = tf.tensor1d([false, true], 'bool');
 *
 * a.logicalNot().print();
 * ```
 *
 * @param x The input tensor. Must be of dtype 'bool'.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalNot_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'logicalNot', 'bool');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.logicalNot($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LogicalNot"]);
}
const logicalNot = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ logicalNot_ });
//# sourceMappingURL=logical_not.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js ***!
  \*******************************************************************/
/*! exports provided: logicalOr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logicalOr", function() { return logicalOr; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalOr(b).print();
 * ```
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalOr_(a, b) {
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(a, 'a', 'logicalOr', 'bool');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(b, 'b', 'logicalOr', 'bool');
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_3__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.logicalOr($a, $b), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["LogicalOr"]);
}
const logicalOr = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ logicalOr_ });
//# sourceMappingURL=logical_or.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js ***!
  \********************************************************************/
/*! exports provided: logicalXor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logicalXor", function() { return logicalXor; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _logical_not__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _logical_or__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalXor(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalXor_(a, b) {
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(a, 'a', 'logicalXor', 'bool');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(b, 'b', 'logicalXor', 'bool');
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_1__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    // x ^ y = (x | y) & ~(x & y)
    return Object(_logical_and__WEBPACK_IMPORTED_MODULE_2__["logicalAnd"])(Object(_logical_or__WEBPACK_IMPORTED_MODULE_4__["logicalOr"])(a, b), Object(_logical_not__WEBPACK_IMPORTED_MODULE_3__["logicalNot"])(Object(_logical_and__WEBPACK_IMPORTED_MODULE_2__["logicalAnd"])(a, b)));
}
const logicalXor = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ logicalXor_ });
//# sourceMappingURL=logical_xor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js ***!
  \***********************************************************************/
/*! exports provided: Reduction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reduction", function() { return Reduction; });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Reduction;
(function (Reduction) {
    Reduction[Reduction["NONE"] = 0] = "NONE";
    Reduction[Reduction["MEAN"] = 1] = "MEAN";
    Reduction[Reduction["SUM"] = 2] = "SUM";
    Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (Reduction = {}));
//# sourceMappingURL=loss_ops_utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js ***!
  \***********************************************************************************/
/*! exports provided: absoluteDifference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "absoluteDifference", function() { return absoluteDifference; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the absolute difference loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function absoluteDifference_(labels, predictions, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    const $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'absoluteDifference');
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'absoluteDifference');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'absoluteDifference');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');
    const losses = Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(Object(_sub__WEBPACK_IMPORTED_MODULE_5__["sub"])($labels, $predictions));
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_6__["computeWeightedLoss"])(losses, $weights, reduction);
}
const absoluteDifference = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ absoluteDifference_ });
//# sourceMappingURL=absolute_difference.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js ***!
  \*************************************************************************************/
/*! exports provided: computeWeightedLoss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeWeightedLoss", function() { return computeWeightedLoss; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _ones__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");











/**
 * Computes the weighted loss between two tensors.
 *
 * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `losses`, and must be broadcastable to `losses` (i.e., all
 *    dimensions must be either `1`, or the same as the corresponding
 *    `losses` dimension).
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function computeWeightedLoss_(losses, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    const $losses = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(losses, 'losses', 'computeWeightedLoss');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'computeWeightedLoss');
    }
    const weightedLoss = ($weights == null) ? $losses : Object(_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])($losses, $weights);
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__["Reduction"].NONE) {
        return weightedLoss;
    }
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__["Reduction"].SUM) {
        return Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(weightedLoss);
    }
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__["Reduction"].MEAN) {
        if ($weights == null) {
            return Object(_mean__WEBPACK_IMPORTED_MODULE_4__["mean"])(weightedLoss);
        }
        else {
            const broadcastFactor = $losses.size / $weights.size;
            const result = Object(_div__WEBPACK_IMPORTED_MODULE_2__["div"])(Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(weightedLoss), Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])($weights));
            return broadcastFactor > 1 ? Object(_div__WEBPACK_IMPORTED_MODULE_2__["div"])(result, Object(_scalar__WEBPACK_IMPORTED_MODULE_9__["scalar"])(broadcastFactor)) :
                result;
        }
    }
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_3__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
        if ($weights == null) {
            return Object(_div__WEBPACK_IMPORTED_MODULE_2__["div"])(Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(weightedLoss), Object(_scalar__WEBPACK_IMPORTED_MODULE_9__["scalar"])($losses.size));
        }
        else {
            const broadcastedWeights = Object(_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])($weights, Object(_ones__WEBPACK_IMPORTED_MODULE_7__["ones"])($losses.shape));
            const numNonZeros = Object(_cast__WEBPACK_IMPORTED_MODULE_1__["cast"])(Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(Object(_not_equal__WEBPACK_IMPORTED_MODULE_6__["notEqual"])(broadcastedWeights, Object(_scalar__WEBPACK_IMPORTED_MODULE_9__["scalar"])(0))), 'float32');
            return Object(_div__WEBPACK_IMPORTED_MODULE_2__["div"])(Object(_sum__WEBPACK_IMPORTED_MODULE_10__["sum"])(weightedLoss), numNonZeros);
        }
    }
    throw Error(`Unknown reduction: ${reduction}`);
}
const computeWeightedLoss = Object(_operation__WEBPACK_IMPORTED_MODULE_8__["op"])({ computeWeightedLoss_ });
//# sourceMappingURL=compute_weighted_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js ***!
  \*******************************************************************************/
/*! exports provided: cosineDistance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cosineDistance", function() { return cosineDistance; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");









/**
 * Computes the cosine distance loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param axis The dimension along which the cosine distance is computed.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function cosineDistance_(labels, predictions, axis, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_2__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    const $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'cosineDistance');
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'cosineDistance');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'cosineDistance');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($labels.shape, $predictions.shape, 'Error in cosineDistance: ');
    const one = Object(_scalar__WEBPACK_IMPORTED_MODULE_5__["scalar"])(1);
    const losses = Object(_sub__WEBPACK_IMPORTED_MODULE_6__["sub"])(one, Object(_sum__WEBPACK_IMPORTED_MODULE_7__["sum"])(Object(_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])($labels, $predictions), axis, true));
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_8__["computeWeightedLoss"])(losses, $weights, reduction);
}
const cosineDistance = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ cosineDistance_ });
//# sourceMappingURL=cosine_distance.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js ***!
  \**************************************************************************/
/*! exports provided: hingeLoss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hingeLoss", function() { return hingeLoss; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");









/**
 * Computes the Hinge loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function hingeLoss_(labels, predictions, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_2__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    let $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'hingeLoss');
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'hingeLoss');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'hingeLoss');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($labels.shape, $predictions.shape, 'Error in hingeLoss: ');
    const one = Object(_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(1);
    // Convert binary labels to (-1, 1)
    $labels = Object(_sub__WEBPACK_IMPORTED_MODULE_7__["sub"])(Object(_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(2), $labels), one);
    const losses = Object(_relu__WEBPACK_IMPORTED_MODULE_5__["relu"])(Object(_sub__WEBPACK_IMPORTED_MODULE_7__["sub"])(one, Object(_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])($labels, $predictions)));
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_8__["computeWeightedLoss"])(losses, $weights, reduction);
}
const hingeLoss = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ hingeLoss_ });
//# sourceMappingURL=hinge_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js ***!
  \**************************************************************************/
/*! exports provided: huberLoss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "huberLoss", function() { return huberLoss; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












/**
 * Computes the huber loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param delta Point where huber loss changes from quadratic to linear.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`.
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function huberLoss_(labels, predictions, weights, delta = 1.0, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_4__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    const $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'huberLoss');
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'huberLoss');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'huberLoss');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($labels.shape, $predictions.shape, 'Error in huberLoss: ');
    const deltaScalar = Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(delta);
    const error = Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(Object(_sub__WEBPACK_IMPORTED_MODULE_10__["sub"])($predictions, $labels));
    const quadratic = Object(_minimum__WEBPACK_IMPORTED_MODULE_5__["minimum"])(error, deltaScalar);
    const linear = Object(_sub__WEBPACK_IMPORTED_MODULE_10__["sub"])(error, quadratic);
    const losses = Object(_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(0.5), Object(_square__WEBPACK_IMPORTED_MODULE_9__["square"])(quadratic)), Object(_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(deltaScalar, linear));
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_11__["computeWeightedLoss"])(losses, $weights, reduction);
}
const huberLoss = Object(_operation__WEBPACK_IMPORTED_MODULE_7__["op"])({ huberLoss_ });
//# sourceMappingURL=huber_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js ***!
  \************************************************************************/
/*! exports provided: logLoss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logLoss", function() { return logLoss; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Computes the log loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param epsilon A small increment to avoid taking log of zero
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_4__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    const $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'logLoss');
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'logLoss');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'logLoss');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($labels.shape, $predictions.shape, 'Error in logLoss: ');
    const one = Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(1);
    const epsilonScalar = Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(epsilon);
    const l1 = Object(_neg__WEBPACK_IMPORTED_MODULE_6__["neg"])(Object(_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])($labels, Object(_log__WEBPACK_IMPORTED_MODULE_3__["log"])(Object(_add__WEBPACK_IMPORTED_MODULE_2__["add"])($predictions, epsilonScalar))));
    const l2 = Object(_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])(Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(one, $labels), Object(_log__WEBPACK_IMPORTED_MODULE_3__["log"])(Object(_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(one, $predictions), epsilonScalar)));
    const losses = Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(l1, l2);
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_10__["computeWeightedLoss"])(losses, $weights, reduction);
}
const logLoss = Object(_operation__WEBPACK_IMPORTED_MODULE_7__["op"])({ logLoss_ });
//# sourceMappingURL=log_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js ***!
  \**********************************************************************************/
/*! exports provided: meanSquaredError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "meanSquaredError", function() { return meanSquaredError; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the mean squared error between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function meanSquaredError_(labels, predictions, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_2__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    const $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'meanSquaredError');
    const $predictions = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(predictions, 'predictions', 'meanSquaredError');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'meanSquaredError');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');
    const losses = Object(_squared_difference__WEBPACK_IMPORTED_MODULE_4__["squaredDifference"])($labels, $predictions);
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_5__["computeWeightedLoss"])(losses, $weights, reduction);
}
const meanSquaredError = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ meanSquaredError_ });
//# sourceMappingURL=mean_squared_error.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js ***!
  \*************************************************************************************/
/*! exports provided: sigmoidCrossEntropy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sigmoidCrossEntropy", function() { return sigmoidCrossEntropy; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log1p__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../log1p */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */














function sigmoidCrossEntropyWithLogits_(labels, logits) {
    const $labels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(labels, 'labels', 'sigmoidCrossEntropyWithLogits');
    const $logits = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(logits, 'logits', 'sigmoidCrossEntropyWithLogits');
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
    /**
     * Implementation Details:
     *
     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
     *   = (1 - z) * x + log(1 + exp(-x))
     *   = x - x * z + log(1 + exp(-x))
     *
     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
     *     x - x * z + log(1 + exp(-x))
     *   = log(exp(x)) - x * z + log(1 + exp(-x))
     *   = - x * z + log(1 + exp(x))
     *
     * Hence, to ensure stability and avoid overflow, the implementation uses
     * this equivalent formulation:
     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
     */
    const maxOutput = Object(_relu__WEBPACK_IMPORTED_MODULE_10__["relu"])($logits);
    const outputXTarget = Object(_mul__WEBPACK_IMPORTED_MODULE_7__["mul"])($logits, $labels);
    const sigmoidOutput = Object(_log1p__WEBPACK_IMPORTED_MODULE_5__["log1p"])(Object(_exp__WEBPACK_IMPORTED_MODULE_4__["exp"])(Object(_neg__WEBPACK_IMPORTED_MODULE_8__["neg"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])($logits))));
    return Object(_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_sub__WEBPACK_IMPORTED_MODULE_12__["sub"])(maxOutput, outputXTarget), sigmoidOutput);
}
/**
 * Computes the sigmoid cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
 *                         + 0.5 * labelSmoothing
 *
 * @param multiClassLabels The ground truth output tensor of shape
 * [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */
function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_6__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    let $multiClassLabels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');
    const $logits = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(logits, 'logits', 'sigmoidCrossEntropy');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(weights, 'weights', 'sigmoidCrossEntropy');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"])($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = Object(_scalar__WEBPACK_IMPORTED_MODULE_11__["scalar"])(labelSmoothing);
        const one = Object(_scalar__WEBPACK_IMPORTED_MODULE_11__["scalar"])(1);
        const half = Object(_scalar__WEBPACK_IMPORTED_MODULE_11__["scalar"])(0.5);
        $multiClassLabels =
            Object(_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_mul__WEBPACK_IMPORTED_MODULE_7__["mul"])($multiClassLabels, Object(_sub__WEBPACK_IMPORTED_MODULE_12__["sub"])(one, labelSmoothingScalar)), Object(_mul__WEBPACK_IMPORTED_MODULE_7__["mul"])(half, labelSmoothingScalar));
    }
    const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_13__["computeWeightedLoss"])(losses, $weights, reduction);
}
const sigmoidCrossEntropy = Object(_operation__WEBPACK_IMPORTED_MODULE_9__["op"])({ sigmoidCrossEntropy_ });
//# sourceMappingURL=sigmoid_cross_entropy.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js ***!
  \*************************************************************************************/
/*! exports provided: softmaxCrossEntropy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "softmaxCrossEntropy", function() { return softmaxCrossEntropy; });
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log_sum_exp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


















/**
 * Computes softmax cross entropy between logits and labels.
 *
 * Measures the probability error in discrete classification tasks in which
 * the classes are mutually exclusive (each entry is in exactly one class).
 * For example, each CIFAR-10 image is labeled with one and only one label: an
 * image can be a dog or a truck, but not both.
 *
 * `NOTE`: While the classes are mutually exclusive, their probabilities need
 * not be. All that is required is that each row of labels is a valid
 * probability distribution. If they are not, the computation of the gradient
 * will be incorrect.
 *
 * `WARNING`: This op expects unscaled logits, since it performs a softmax on
 * logits internally for efficiency. Do not call this op with the output of
 * softmax, as it will produce incorrect results.
 *
 * logits and labels must have the same shape, e.g. [batch_size, num_classes]
 * and the same dtype.
 * @param labels The labels array.
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */
function softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {
    if (dim === -1) {
        dim = logits.rank - 1;
    }
    if (dim !== logits.rank - 1) {
        throw Error(`Softmax cross entropy along a non-last dimension is not yet ` +
            `supported. Labels / logits was rank ${logits.rank} ` +
            `and dim was ${dim}`);
    }
    // Use a custom gradient for numerical stability.
    const customOp = Object(_gradients__WEBPACK_IMPORTED_MODULE_0__["customGrad"])((labels, logits, save) => {
        // Reference:
        //   1. http://cs231n.github.io/linear-classify/#softmax
        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
        const keepDims = true;
        const lse = Object(_log_sum_exp__WEBPACK_IMPORTED_MODULE_8__["logSumExp"])(logits, [dim], keepDims);
        const logResult = Object(_sub__WEBPACK_IMPORTED_MODULE_15__["sub"])(Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])(logits, 'float32'), lse);
        save([labels, logResult]);
        const costVector = Object(_neg__WEBPACK_IMPORTED_MODULE_11__["neg"])(Object(_mul__WEBPACK_IMPORTED_MODULE_10__["mul"])(logResult, labels));
        const value = Object(_sum__WEBPACK_IMPORTED_MODULE_16__["sum"])(costVector, [dim]);
        const gradFunc = (dy, saved) => {
            const [labels, logResult] = saved;
            const dyShape = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["expandShapeToKeepDim"])(dy.shape, [dim]);
            return [
                Object(_mul__WEBPACK_IMPORTED_MODULE_10__["mul"])(Object(_reshape__WEBPACK_IMPORTED_MODULE_13__["reshape"])(dy, dyShape), Object(_sub__WEBPACK_IMPORTED_MODULE_15__["sub"])(Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])(labels, 'float32'), Object(_exp__WEBPACK_IMPORTED_MODULE_7__["exp"])(logResult))),
                Object(_mul__WEBPACK_IMPORTED_MODULE_10__["mul"])(Object(_reshape__WEBPACK_IMPORTED_MODULE_13__["reshape"])(dy, dyShape), Object(_sub__WEBPACK_IMPORTED_MODULE_15__["sub"])(Object(_exp__WEBPACK_IMPORTED_MODULE_7__["exp"])(logResult), Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])(labels, 'float32'))),
            ];
        };
        return { value, gradFunc };
    });
    return customOp(labels, logits);
}
/**
 * Computes the softmax cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
 *                         + labelSmoothing / numClasses
 *
 * @param onehotLabels One hot encoded labels
 *    [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or 1, and must be
 *    broadcastable to `loss`  of shape [batch_size]
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */
function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_9__["Reduction"].SUM_BY_NONZERO_WEIGHTS) {
    let $onehotLabels = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');
    const $logits = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(logits, 'logits', 'softmaxCrossEntropy');
    let $weights = null;
    if (weights != null) {
        $weights = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(weights, 'weights', 'softmaxCrossEntropy');
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assertShapesMatch"])($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = Object(_scalar__WEBPACK_IMPORTED_MODULE_14__["scalar"])(labelSmoothing);
        const one = Object(_scalar__WEBPACK_IMPORTED_MODULE_14__["scalar"])(1);
        const numClasses = Object(_scalar__WEBPACK_IMPORTED_MODULE_14__["scalar"])($onehotLabels.shape[1]);
        $onehotLabels =
            Object(_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_mul__WEBPACK_IMPORTED_MODULE_10__["mul"])($onehotLabels, Object(_sub__WEBPACK_IMPORTED_MODULE_15__["sub"])(one, labelSmoothingScalar)), Object(_div__WEBPACK_IMPORTED_MODULE_6__["div"])(labelSmoothingScalar, numClasses));
    }
    const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
    return Object(_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_17__["computeWeightedLoss"])(losses, $weights, reduction);
}
const softmaxCrossEntropy = Object(_operation__WEBPACK_IMPORTED_MODULE_12__["op"])({ softmaxCrossEntropy_ });
//# sourceMappingURL=softmax_cross_entropy.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js ***!
  \****************************************************************/
/*! exports provided: matMul */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matMul", function() { return matMul; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function matMul_(a, b, transposeA = false, transposeB = false) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'matMul');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'matMul');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    const forward = (backend, save) => {
        save([$a, $b]);
        const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
        const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
        const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
        const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
        const outerDimsA = $a.shape.slice(0, -2);
        const outerDimsB = $b.shape.slice(0, -2);
        const batchDimA = _util__WEBPACK_IMPORTED_MODULE_4__["sizeFromShape"](outerDimsA);
        const batchDimB = _util__WEBPACK_IMPORTED_MODULE_4__["sizeFromShape"](outerDimsB);
        const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"]($a.rank >= 2 && $b.rank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` +
            `same or at least one input batch dimension must be 1. Got input ` +
            `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +
            `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +
            `${$b.shape} and transposeA=${transposeA}` +
            ` and transposeB=${transposeB} must match.`);
        const outShapeOuterDims = batchDimA > batchDimB ? outerDimsA : outerDimsB;
        const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);
        const a3D = transposeA ?
            Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($a, [batchDimA, innerShapeA, outerShapeA]) :
            Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($a, [batchDimA, outerShapeA, innerShapeA]);
        const b3D = transposeB ?
            Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($b, [batchDimB, outerShapeB, innerShapeB]) :
            Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($b, [batchDimB, innerShapeB, outerShapeB]);
        const res3d = backend.batchMatMul(a3D, b3D, transposeA, transposeB);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res3d, outShape);
    };
    const inputs = { a: $a, b: $b };
    const attrs = { transposeA, transposeB };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["BatchMatMul"], attrs);
}
const matMul = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ matMul_ });
//# sourceMappingURL=mat_mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max.js ***!
  \************************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function max_(x, axis = null, keepDims = false) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'max');
    const forward = (backend, save) => {
        const origAxes = _util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"](axis, $x.shape);
        let axes = origAxes;
        const permutedAxes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"](axes, $x.rank);
        let maxInput = $x;
        if (permutedAxes != null) {
            maxInput = Object(_transpose__WEBPACK_IMPORTED_MODULE_7__["transpose"])($x, permutedAxes);
            axes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"](axes.length, maxInput.rank);
        }
        const y = backend.max(maxInput, axes);
        if (permutedAxes != null) {
            maxInput.dispose();
        }
        let res = y;
        if (keepDims) {
            const expandedShape = _axis_util__WEBPACK_IMPORTED_MODULE_4__["expandShapeToKeepDim"](res.shape, _util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"](axis, $x.shape));
            res = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, expandedShape);
            y.dispose();
        }
        save([$x, res]);
        return res;
    };
    const inputs = { x: $x };
    const attrs = { reductionIndices: axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Max"], attrs);
}
const max = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ max_ });
//# sourceMappingURL=max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js ***!
  \*****************************************************************/
/*! exports provided: maxPool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPool", function() { return maxPool; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */
function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'maxPool');
    const dilations = 1;
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](x4D.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_4__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](pad), () => `Error in maxPool: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = (backend, save) => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computePool2DInfo"](x4D.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
        let y;
        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
            _util__WEBPACK_IMPORTED_MODULE_3__["arraysEqual"](convInfo.inShape, convInfo.outShape)) {
            y = x4D.clone();
        }
        else {
            y = backend.maxPool(x4D, convInfo);
        }
        save([x4D, y]);
        return y;
    };
    const inputs = { x: x4D };
    const attrs = { filterSize, strides, pad, dimRoundingMode };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["MaxPool"], attrs);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const maxPool = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ maxPool_ });
//# sourceMappingURL=max_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js ***!
  \********************************************************************/
/*! exports provided: maxPool3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPool3d", function() { return maxPool3d; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the 3D max pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.maxPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPool3d_(x, filterSize = [1, 1, 1], strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {
    if (dilations == null) {
        dilations = [1, 1, 1];
    }
    else {
        Object(_globals__WEBPACK_IMPORTED_MODULE_1__["deprecationWarn"])('dilations is deprecated, this field will be gone in ' +
            'v3.0.0.');
    }
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(x, 'x', 'maxPool3d');
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_4__["assert"](x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_4__["assert"](dataFormat === 'NDHWC', () => `Error in maxPool3d: Only NDHWC is currently supported, ` +
        `but got dataFormat of ${dataFormat}`);
    _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_5__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in maxPool3d: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_4__["assert"](_util__WEBPACK_IMPORTED_MODULE_4__["isInt"](pad), () => `Error in maxPool3d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = (backend, save) => {
        if (dilations == null) {
            dilations = [1, 1, 1];
        }
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_5__["computePool3DInfo"](x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
        const y = backend.maxPool3d(x5D, convInfo);
        save([x5D, y]);
        return y;
    };
    const inputs = { x: x5D };
    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["MaxPool3D"], attrs);
    if (reshapedTo5D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const maxPool3d = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ maxPool3d_ });
//# sourceMappingURL=max_pool_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_backprop.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_backprop.js ***!
  \*****************************************************************************/
/*! exports provided: maxPool3dBackprop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPool3dBackprop", function() { return maxPool3dBackprop; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the backprop of a 3d max pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank 4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param output The original output image, of rank 5 of shape
 *     [batchSize, outDepth, outHeight, outWidth, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function maxPool3dBackprop_(dy, input, output, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {
    const $dy = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(dy, 'dy', 'maxPool3dBackprop');
    const $input = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(input, 'input', 'maxPool3dBackprop');
    const $output = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(output, 'output', 'maxPool3dBackprop');
    let dy5D = $dy;
    let input5D = $input;
    let output5D = $output;
    let reshapedTo5D = false;
    if ($input.rank === 4) {
        reshapedTo5D = true;
        dy5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
        input5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($input, [
            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]
        ]);
        output5D = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])($output, [
            1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]
        ]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](dy5D.rank === 5, () => `Error in maxPool3dBackprop: dy must be rank 5 but got rank ` +
        `${dy5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](input5D.rank === 5, () => `Error in maxPool3dBackprop: input must be rank 5 but got rank ` +
        `${input5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](output5D.rank === 5, () => `Error in maxPool3dBackprop: output must be rank 5 but got rank ` +
        `${output5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_4__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in maxPool3dBackprop: Either strides or dilations ' +
        `must be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](pad), () => `Error in maxPool3dBackprop: pad must be an integer when ` +
            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = backend => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computePool3DInfo"](input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        return backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo);
    };
    const inputs = { dy: dy5D, input: input5D, output: output5D };
    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["MaxPool3DBackprop"], attrs);
    if (reshapedTo5D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const maxPool3dBackprop = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ maxPool3dBackprop_ });
//# sourceMappingURL=max_pool_3d_backprop.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_backprop.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_backprop.js ***!
  \**************************************************************************/
/*! exports provided: maxPoolBackprop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPoolBackprop", function() { return maxPoolBackprop; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the backprop of a 2D max pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The original input image, of rank 4, of shape
 *     [batchSize, height, width, channels].
 * @param output The original output image, of rank 4, of shape
 *     [batchSize, outHeight, outWidth, channels].
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */
function maxPoolBackprop_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {
    const $dy = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(dy, 'dy', 'maxPoolBackprop');
    const $input = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(input, 'input', 'maxPoolBackprop');
    const $output = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(output, 'output', 'maxPoolBackprop');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` +
        `(${$dy.rank})`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($dy.rank === 4, () => `Error in maxPoolBackprop: dy must be rank 4 but got rank ` +
        `${$dy.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($input.rank === 4, () => `Error in maxPoolBackprop: input must be rank 4 but got rank ` +
        `${$input.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](_util__WEBPACK_IMPORTED_MODULE_3__["isInt"](pad), () => `Error in maxPoolBackprop: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const forward = backend => {
        const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computePool2DInfo"]($input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
        return backend.maxPoolBackprop($dy, $input, $output, convInfo);
    };
    const inputs = { dy: $dy, input: $input, output: $output };
    const attrs = { filterSize, strides, pad, dimRoundingMode };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["MaxPoolBackprop"], attrs);
}
const maxPoolBackprop = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ maxPoolBackprop_ });
//# sourceMappingURL=max_pool_backprop.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js ***!
  \*****************************************************************************/
/*! exports provided: maxPoolWithArgmax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPoolWithArgmax", function() { return maxPoolWithArgmax; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the 2D max pooling of an image with Argmax index.
 * The indices in argmax are flattened, so that a maximum value at position `[b,
 * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
 * include_batch_in_index is False; `((b * height + y) * width + x) * channels
 * +c` if include_batch_in_index is True.
 *
 * The indices returned are always in `[0, height) x [0, width)` before
 * flattening.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param includeBatchIndex Defaults to False. Whether to include batch
 *    dimension in flattened index of argmax.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'maxPoolWithArgmax');
    const inputs = { x: $x };
    const attrs = { filterSize, strides, pad, includeBatchInIndex };
    const result = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["MaxPoolWithArgmax"], inputs, attrs);
    return { result: result[0], indexes: result[1] };
}
const maxPoolWithArgmax = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ maxPoolWithArgmax_ });
//# sourceMappingURL=max_pool_with_argmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js ***!
  \****************************************************************/
/*! exports provided: maximum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maximum", function() { return maximum; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the max of a and b (`a > b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `tf.maximumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * ```js
 * // Broadcast maximum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function maximum_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'maximum');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'maximum');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    if ($a.dtype === 'bool') {
        $a = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])($a, 'int32');
        $b = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])($b, 'int32');
    }
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = (backend, save) => {
        const res = backend.maximum($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Maximum"]);
}
const maximum = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ maximum_ });
//# sourceMappingURL=maximum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js ***!
  \*************************************************************/
/*! exports provided: mean */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mean", function() { return mean; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ones__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */














/**
 * Computes the mean of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
 * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
 * a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.mean().print();  // or tf.mean(a)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.mean(axis).print();  // or tf.mean(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function mean_(x, axis = null, keepDims = false) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(x, 'x', 'mean');
    const axes = Object(_util__WEBPACK_IMPORTED_MODULE_4__["parseAxisParam"])(axis, $x.shape);
    const shapes = Object(_axis_util__WEBPACK_IMPORTED_MODULE_5__["computeOutAndReduceShapes"])($x.shape, axes);
    const reduceShape = shapes[1];
    const reduceSize = Object(_util__WEBPACK_IMPORTED_MODULE_4__["sizeFromShape"])(reduceShape);
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    const forward = () => {
        const reduceSizeScalar = Object(_scalar__WEBPACK_IMPORTED_MODULE_12__["scalar"])(reduceSize);
        // Cast if needed.
        const xReduce = reduceSizeScalar.dtype === $x.dtype ?
            $x :
            Object(_cast__WEBPACK_IMPORTED_MODULE_6__["cast"])($x, reduceSizeScalar.dtype);
        const res = Object(_div__WEBPACK_IMPORTED_MODULE_7__["div"])(xReduce, reduceSizeScalar);
        return Object(_sum__WEBPACK_IMPORTED_MODULE_13__["sum"])(res, axis, keepDims);
    };
    // Use a custom gradient to bypass 2 gradient backprops since mean is used
    // extremely often.
    const customOp = Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["customGrad"])((x) => {
        const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_2__["Mean"], attrs);
        const gradFunc = (dy) => {
            const expandedDyShape = x.shape.slice();
            axes.forEach(axis => {
                expandedDyShape[axis] = 1;
            });
            const expandedDy = Object(_reshape__WEBPACK_IMPORTED_MODULE_11__["reshape"])(dy, expandedDyShape);
            const derX = Object(_div__WEBPACK_IMPORTED_MODULE_7__["div"])(Object(_mul__WEBPACK_IMPORTED_MODULE_8__["mul"])(expandedDy, Object(_ones__WEBPACK_IMPORTED_MODULE_9__["ones"])(x.shape, 'float32')), reduceSize);
            return derX;
        };
        return { value, gradFunc };
    });
    return customOp($x);
}
const mean = Object(_operation__WEBPACK_IMPORTED_MODULE_10__["op"])({ mean_ });
//# sourceMappingURL=mean.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/min.js ***!
  \************************************************************/
/*! exports provided: min */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");








/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function min_(x, axis = null, keepDims = false) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'min');
    const forward = (backend, save) => {
        const origAxes = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape);
        let axes = origAxes;
        const permutedAxes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"](axes, $x.rank);
        let minInput = $x;
        if (permutedAxes != null) {
            minInput = Object(_transpose__WEBPACK_IMPORTED_MODULE_7__["transpose"])($x, permutedAxes);
            axes = _axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"](axes.length, $x.rank);
        }
        const y = backend.min(minInput, axes);
        if (permutedAxes != null) {
            minInput.dispose();
        }
        let res = y;
        if (keepDims) {
            const expandedShape = _axis_util__WEBPACK_IMPORTED_MODULE_4__["expandShapeToKeepDim"](res.shape, origAxes);
            res = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(y, expandedShape);
            y.dispose();
        }
        save([$x, res]);
        return res;
    };
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Min"], attrs);
}
const min = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ min_ });
//# sourceMappingURL=min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js ***!
  \****************************************************************/
/*! exports provided: minimum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "minimum", function() { return minimum; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the min of a and b (`a < b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `minimumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * ```js
 * // Broadcast minimum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function minimum_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'minimum');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'minimum');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    if ($a.dtype === 'bool') {
        $a = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])($a, 'int32');
        $b = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])($b, 'int32');
    }
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = (backend, save) => {
        const res = backend.minimum($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Minimum"]);
}
const minimum = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ minimum_ });
//# sourceMappingURL=minimum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js ***!
  \*******************************************************************/
/*! exports provided: mirrorPad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mirrorPad", function() { return mirrorPad; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Pads a `tf.Tensor` using mirror padding.
 *
 * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.
 *
 * ```js
 * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);
 * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * In "reflect" mode, the padded regions do not include the borders,
 * while in "symmetric" mode the padded regions do include the borders.
 * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,
 * then the output is `[1, 2, 3, 2, 1]` in "reflect" mode, and
 * `[1, 2, 3, 3, 2]` in "symmetric" mode.
 * If `mode` is "reflect" then both `paddings[D, 0]` and `paddings[D, 1]`
 * must be no greater than `x.shape[D] - 1`. If mode is "symmetric"
 * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than
 * `x.shape[D]`
 * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`
 */
/** @doc {heading: 'Tensors', subheading: 'Transformations'} */
function mirrorPad_(x, paddings, mode) {
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` +
        `Got ${mode}.`);
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'mirrorPad');
    if ($x.rank === 0) {
        throw new Error('mirrorPad(scalar) is not defined. ' +
            'Pass non-scalar to mirrorPad');
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` +
        `Got ${paddings.length}.`);
    const shapeOffset = mode === 'reflect' ? 1 : 0;
    for (let i = 0; i < $x.rank; i++) {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&
            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` +
            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +
            `shape ${$x.shape}`);
    }
    const attrs = { paddings, mode };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["MirrorPad"], inputs, attrs);
}
const mirrorPad = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ mirrorPad_ });
//# sourceMappingURL=mirror_pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js ***!
  \************************************************************/
/*! exports provided: mod */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return mod; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns the mod of a and b element-wise.
 * `floor(x / y) * y + mod(x, y) = x`
 * Supports broadcasting.
 *
 * We also expose `tf.modStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * ```js
 * // Broadcast a mod b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mod_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'mod');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'mod');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    const forward = (backend, save) => {
        const res = backend.mod($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Mod"]);
}
const mod = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ mod_ });
//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/moments.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/moments.js ***!
  \****************************************************************/
/*! exports provided: moments */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moments", function() { return moments; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Calculates the mean and variance of `x`. The mean and variance are
 * calculated by aggregating the contents of `x` across `axes`. If `x` is
 * 1-D and `axes = [0]` this is just the mean and variance of a vector.
 *
 * @param x The input tensor.
 * @param axis The dimension(s) along with to compute mean and
 *     variance. By default it reduces all dimensions.
 * @param keepDims If true, the moments have the same dimensionality as the
 *     input.
 * @return An object with two keys: `mean` and `variance`.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function moments_(x, axis = null, keepDims = false) {
    x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'moments');
    const axes = Object(_util__WEBPACK_IMPORTED_MODULE_1__["parseAxisParam"])(axis, x.shape);
    const xMean = Object(_mean__WEBPACK_IMPORTED_MODULE_4__["mean"])(x, axes, keepDims);
    let keepDimsShape = xMean.shape;
    if (!keepDims) {
        keepDimsShape = Object(_axis_util__WEBPACK_IMPORTED_MODULE_2__["expandShapeToKeepDim"])(xMean.shape, axes);
    }
    const devSquared = Object(_square__WEBPACK_IMPORTED_MODULE_7__["square"])(Object(_sub__WEBPACK_IMPORTED_MODULE_8__["sub"])(Object(_cast__WEBPACK_IMPORTED_MODULE_3__["cast"])(x, 'float32'), Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(xMean, keepDimsShape)));
    const variance = Object(_mean__WEBPACK_IMPORTED_MODULE_4__["mean"])(devSquared, axes, keepDims);
    return { mean: xMean, variance };
}
const moments = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ moments_ });
//# sourceMappingURL=moments.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js ***!
  \***********************************************************************/
/*! exports provided: movingAverage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "movingAverage", function() { return movingAverage; });
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * Compute the moving average of a variable.
 *
 * Without zeroDebias, the moving average operation is defined by:
 *   `v += delta`
 * where
 *   `delta = (1 - decay) * (x - v)`
 *
 * With zeroDebias (default), the `delta` term is scaled to debias the
 * effect of the (assumed) zero-initialization of `v`.
 *   `delta /= (1 - decay ^ step)`
 *
 * For more details on the zero-debiasing algorithm, see:
 *   https://arxiv.org/abs/1412.6980
 *
 * Note that this function is completely stateless and does not keep track of
 * step count. The step count needs to be maintained by the caller and passed
 * in as `step`.
 *
 * @param v The current moving average value.
 * @param x New input value, must have the same shape and dtype as `v`.
 * @param decay The decay factor. Typical values are 0.95 and 0.99.
 * @param step Step count.
 * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
 * @returns The new moving average value.
 *
 * @doc {heading: 'Operations', subheading: 'Moving Average'}
 */
function movingAverage_(v, x, decay, step, zeroDebias = true) {
    const $v = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(v, 'v', 'movingAverage');
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(x, 'x', 'movingAverage');
    const $decay = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(decay, 'decay', 'movingAverage');
    Object(_tensor_util__WEBPACK_IMPORTED_MODULE_0__["assertTypesMatch"])($v, $x);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"](_util__WEBPACK_IMPORTED_MODULE_2__["arraysEqual"]($v.shape, $x.shape), () => 'Shape mismatch in v and x');
    const one = Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(1);
    const oneMinusDecay = Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(one, $decay);
    let update = Object(_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])(Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])($x, $v), oneMinusDecay);
    if (zeroDebias) {
        _util__WEBPACK_IMPORTED_MODULE_2__["assert"](step != null, () => 'When using zeroDebias: true, step is required.');
        const $step = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(step, 'step', 'movingAverage');
        update = Object(_div__WEBPACK_IMPORTED_MODULE_4__["div"])(update, Object(_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(one, Object(_pow__WEBPACK_IMPORTED_MODULE_7__["pow"])($decay, $step)));
    }
    return Object(_add__WEBPACK_IMPORTED_MODULE_3__["add"])($v, update);
}
const movingAverage = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ movingAverage_ });
//# sourceMappingURL=moving_average.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js ***!
  \************************************************************/
/*! exports provided: mul */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mul_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'mul');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'mul');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    const forward = (backend, save) => {
        const res = backend.multiply($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Multiply"]);
}
const mul = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ mul_ });
//# sourceMappingURL=mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js ***!
  \***********************************************************************/
/*! exports provided: multiRNNCell */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiRNNCell", function() { return multiRNNCell; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Computes the next states and outputs of a stack of LSTMCells.
 *
 * Each cell output is used as input to the next cell.
 *
 * Returns `[cellState, cellOutput]`.
 *
 * Derived from tf.contrib.rn.MultiRNNCell.
 *
 * @param lstmCells Array of LSTMCell functions.
 * @param data The input to the cell.
 * @param c Array of previous cell states.
 * @param h Array of previous cell outputs.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function multiRNNCell_(lstmCells, data, c, h) {
    const $data = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(data, 'data', 'multiRNNCell');
    const $c = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensorArray"])(c, 'c', 'multiRNNCell');
    const $h = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensorArray"])(h, 'h', 'multiRNNCell');
    let input = $data;
    const newStates = [];
    for (let i = 0; i < lstmCells.length; i++) {
        const output = lstmCells[i](input, $c[i], $h[i]);
        newStates.push(output[0]);
        newStates.push(output[1]);
        input = output[1];
    }
    const newC = [];
    const newH = [];
    for (let i = 0; i < newStates.length; i += 2) {
        newC.push(newStates[i]);
        newH.push(newStates[i + 1]);
    }
    return [newC, newH];
}
const multiRNNCell = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ multiRNNCell_ });
//# sourceMappingURL=multi_rnn_cell.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js ***!
  \********************************************************************/
/*! exports provided: multinomial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multinomial", function() { return multinomial; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
 *
 * ```js
 * const probs = tf.tensor([.75, .25]);
 * tf.multinomial(probs, 3).print();
 * ```
 *
 * @param logits 1D array with unnormalized log-probabilities, or
 *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
 *     parameter.
 * @param numSamples Number of samples to draw for each row slice.
 * @param seed The seed number.
 * @param normalized Whether the provided `logits` are normalized true
 *     probabilities (sum to 1). Defaults to false.
 * @return 1D array of shape `[numSamples]`, or 2D array of shape
 *     `[batchSize, numSamples]`, depending on the rank of the input.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function multinomial_(logits, numSamples, seed, normalized = false) {
    const $logits = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(logits, 'logits', 'multinomial');
    const numOutcomes = $logits.size;
    const origRank = $logits.rank;
    if (numOutcomes < 2) {
        throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` +
            `${numOutcomes}.`);
    }
    if (origRank > 2) {
        throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);
    }
    seed = seed || Math.random();
    const logits2D = origRank === 1 ? Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])($logits, [1, -1]) : $logits;
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.multinomial(logits2D, normalized, numSamples, seed), { logits2D });
    // tslint:disable-next-line:no-unnecessary-type-assertion
    return origRank === 1 ? Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])(res, [res.size]) : res;
}
const multinomial = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ multinomial_ });
//# sourceMappingURL=multinomial.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js ***!
  \************************************************************/
/*! exports provided: neg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "neg", function() { return neg; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes `-1 * x` element-wise.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
 *
 * x.neg().print();  // or tf.neg(x)
 * ```
 *
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function neg_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'neg');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.neg($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Negate"]);
}
const neg = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ neg_ });
//# sourceMappingURL=neg.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js ***!
  \********************************************************************/
/*! exports provided: nonMaxSuppSanityCheck */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonMaxSuppSanityCheck", function() { return nonMaxSuppSanityCheck; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    if (iouThreshold == null) {
        iouThreshold = 0.5;
    }
    if (scoreThreshold == null) {
        scoreThreshold = Number.NEGATIVE_INFINITY;
    }
    if (softNmsSigma == null) {
        softNmsSigma = 0.0;
    }
    const numBoxes = boxes.shape[0];
    maxOutputSize = Math.min(maxOutputSize, numBoxes);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](scores.rank === 1, () => 'scores must be a 1D tensor');
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +
        `but was ${scores.shape[0]}`);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);
    return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };
}

//# sourceMappingURL=nonmax_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js ***!
  \*************************************************************/
/*! exports provided: norm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "norm", function() { return norm; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^1/2*
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is a integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm have the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function norm_(x, ord = 'euclidean', axis = null, keepDims = false) {
    x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'norm');
    const norm = normImpl(x, ord, axis);
    let keepDimsShape = norm.shape;
    if (keepDims) {
        const axes = Object(_util__WEBPACK_IMPORTED_MODULE_1__["parseAxisParam"])(axis, x.shape);
        keepDimsShape = _axis_util__WEBPACK_IMPORTED_MODULE_3__["expandShapeToKeepDim"](norm.shape, axes);
    }
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_8__["reshape"])(norm, keepDimsShape);
}
function normImpl(x, p, axis = null) {
    if (x.rank === 0) {
        return Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x);
    }
    // consider vector when no axis is specified
    if (x.rank !== 1 && axis === null) {
        return normImpl(Object(_reshape__WEBPACK_IMPORTED_MODULE_8__["reshape"])(x, [-1]), p, axis);
    }
    // vector
    if (x.rank === 1 || typeof axis === 'number' ||
        Array.isArray(axis) && axis.length === 1) {
        if (p === 1) {
            return Object(_sum__WEBPACK_IMPORTED_MODULE_12__["sum"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x), axis);
        }
        if (p === Infinity) {
            return Object(_max__WEBPACK_IMPORTED_MODULE_4__["max"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x), axis);
        }
        if (p === -Infinity) {
            return Object(_min__WEBPACK_IMPORTED_MODULE_5__["min"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x), axis);
        }
        if (p === 'euclidean' || p === 2) {
            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
            return Object(_sqrt__WEBPACK_IMPORTED_MODULE_10__["sqrt"])(Object(_sum__WEBPACK_IMPORTED_MODULE_12__["sum"])(Object(_pow__WEBPACK_IMPORTED_MODULE_7__["pow"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x), Object(_scalar__WEBPACK_IMPORTED_MODULE_9__["scalar"])(2, 'int32')), axis));
        }
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    // matrix (assumption axis[0] < axis[1])
    if (Array.isArray(axis) && axis.length === 2) {
        if (p === 1) {
            return Object(_max__WEBPACK_IMPORTED_MODULE_4__["max"])(Object(_sum__WEBPACK_IMPORTED_MODULE_12__["sum"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x), axis[0]), axis[1] - 1);
        }
        if (p === Infinity) {
            return Object(_max__WEBPACK_IMPORTED_MODULE_4__["max"])(Object(_sum__WEBPACK_IMPORTED_MODULE_12__["sum"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x), axis[1]), axis[0]);
        }
        if (p === -Infinity) {
            return Object(_min__WEBPACK_IMPORTED_MODULE_5__["min"])(Object(_sum__WEBPACK_IMPORTED_MODULE_12__["sum"])(Object(_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(x), axis[1]), axis[0]);
        }
        if (p === 'fro' || p === 'euclidean') {
            // norm(x) = sqrt(sum(pow(x, 2)))
            return Object(_sqrt__WEBPACK_IMPORTED_MODULE_10__["sqrt"])(Object(_sum__WEBPACK_IMPORTED_MODULE_12__["sum"])(Object(_square__WEBPACK_IMPORTED_MODULE_11__["square"])(x), axis));
        }
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    throw new Error(`Error in norm: invalid axis: ${axis}`);
}
const norm = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ norm_ });
//# sourceMappingURL=norm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js ***!
  \******************************************************************/
/*! exports provided: notEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notEqual", function() { return notEqual; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a != b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([0, 2, 3]);
 *
 * a.notEqual(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function notEqual_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'notEqual');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'notEqual');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = (backend) => backend.notEqual($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["NotEqual"]);
}
const notEqual = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ notEqual_ });
//# sourceMappingURL=not_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js ***!
  \****************************************************************/
/*! exports provided: oneHot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oneHot", function() { return oneHot; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
 * value `onValue` (defaults to 1), while all other locations take value
 * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
 * `R+1` with the last axis of size `depth`.
 *
 * ```js
 * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
 * ```
 *
 * @param indices `tf.Tensor` of indices with dtype `int32`.
 * @param depth The depth of the one hot dimension.
 * @param onValue A number used to fill in the output when the index matches
 * the location.
 * @param offValue A number used to fill in the output when the index does
 *     not match the location.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function oneHot_(indices, depth, onValue = 1, offValue = 0) {
    if (depth < 2) {
        throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);
    }
    const $indices = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(indices, 'indices', 'oneHot', 'int32');
    const outShape = [...$indices.shape, depth];
    const forward = (backend, save) => {
        save([$indices]);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(backend.oneHot(Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($indices, [$indices.size]), depth, onValue, offValue), outShape);
    };
    const inputs = { indices: $indices };
    const attrs = { depth, onValue, offValue };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["OneHot"], attrs);
}
const oneHot = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ oneHot_ });
//# sourceMappingURL=one_hot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js ***!
  \*************************************************************/
/*! exports provided: ones */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ones", function() { return ones; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a `tf.Tensor` with all elements set to 1.
 *
 * ```js
 * tf.ones([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 *     'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function ones(shape, dtype = 'float32') {
    if (dtype === 'complex64') {
        const real = ones(shape, 'float32');
        const imag = Object(_zeros__WEBPACK_IMPORTED_MODULE_3__["zeros"])(shape, 'float32');
        return Object(_complex__WEBPACK_IMPORTED_MODULE_2__["complex"])(real, imag);
    }
    const values = Object(_util__WEBPACK_IMPORTED_MODULE_1__["makeOnesTypedArray"])(Object(_util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"])(shape), dtype);
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensor(values, shape, dtype);
}
//# sourceMappingURL=ones.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js ***!
  \******************************************************************/
/*! exports provided: onesLike */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onesLike", function() { return onesLike; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _imag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./imag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./real */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.onesLike(x).print();
 * ```
 * @param x A tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function onesLike_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'onesLike');
    const forward = (backend, save) => {
        if ($x.dtype === 'complex64') {
            const r = onesLike(Object(_real__WEBPACK_IMPORTED_MODULE_6__["real"])($x));
            const i = Object(_zeros_like__WEBPACK_IMPORTED_MODULE_7__["zerosLike"])(Object(_imag__WEBPACK_IMPORTED_MODULE_4__["imag"])($x));
            return Object(_complex__WEBPACK_IMPORTED_MODULE_3__["complex"])(r, i);
        }
        return backend.onesLike($x);
    };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["OnesLike"]);
}
const onesLike = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ onesLike_ });
//# sourceMappingURL=ones_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js ***!
  \******************************************************************/
/*! exports provided: OP_SCOPE_SUFFIX, op */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OP_SCOPE_SUFFIX", function() { return OP_SCOPE_SUFFIX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "op", function() { return op; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const OP_SCOPE_SUFFIX = '__op';
/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */
function op(f) {
    const keys = Object.keys(f);
    if (keys.length !== 1) {
        throw new Error(`Please provide an object with a single key ` +
            `(operation name) mapping to a function. Got an object with ` +
            `${keys.length} keys.`);
    }
    let opName = keys[0];
    const fn = f[opName];
    // Strip the underscore from the end of the function name.
    if (opName.endsWith('_')) {
        opName = opName.substring(0, opName.length - 1);
    }
    // add an __op suffix to distinguish ops from kernels in tf.profile
    opName = opName + OP_SCOPE_SUFFIX;
    // tslint:disable-next-line:no-any
    const f2 = (...args) => {
        _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].startScope(opName);
        try {
            const result = fn(...args);
            if (Object(_util__WEBPACK_IMPORTED_MODULE_1__["isPromise"])(result)) {
                console.error('Cannot return a Promise inside of tidy.');
            }
            _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].endScope(result);
            return result;
        }
        catch (ex) {
            _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].endScope(null);
            throw ex;
        }
    };
    Object.defineProperty(f2, 'name', { value: opName, configurable: true });
    // tslint:disable-next-line:no-any
    return f2;
}
//# sourceMappingURL=operation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js ***!
  \************************************************************/
/*! exports provided: abs, acos, acosh, add, addN, all, any, argMax, argMin, asin, asinh, atan, atan2, atanh, avgPool, avgPool3d, basicLSTMCell, batchToSpaceND, batchNorm, batchNorm2d, batchNorm3d, batchNorm4d, broadcastTo, buffer, cast, ceil, clipByValue, clone, complex, concat, concat1d, concat2d, concat3d, concat4d, conv1d, conv2d, conv2dTranspose, conv3d, conv3dTranspose, cos, cosh, cumsum, depthToSpace, depthwiseConv2d, diag, dilation2d, div, divNoNan, dot, elu, equal, erf, exp, expandDims, expm1, eye, fill, floor, floorDiv, gather, greater, greaterEqual, imag, isFinite, isInf, isNaN, leakyRelu, less, lessEqual, linspace, localResponseNormalization, log, log1p, logSigmoid, logSoftmax, logSumExp, logicalAnd, logicalNot, logicalOr, logicalXor, matMul, max, maxPool, maxPool3d, maxPoolWithArgmax, maximum, mean, min, minimum, mirrorPad, mod, moments, mul, multiRNNCell, multinomial, neg, notEqual, oneHot, ones, onesLike, outerProduct, pad, pad1d, pad2d, pad3d, pad4d, pool, pow, prelu, print, prod, rand, randomGamma, randomNormal, randomUniform, range, real, reciprocal, relu, relu6, reshape, reverse, reverse1d, reverse2d, reverse3d, reverse4d, round, rsqrt, scalar, selu, separableConv2d, setdiff1dAsync, sigmoid, sign, sin, sinh, slice, slice1d, slice2d, slice3d, slice4d, softmax, softplus, spaceToBatchND, fft, ifft, irfft, rfft, split, sqrt, square, squaredDifference, squeeze, stack, step, stridedSlice, sub, sum, tan, tanh, tensor, tensor1d, tensor2d, tensor3d, tensor4d, tensor5d, tensor6d, tile, topk, truncatedNormal, unique, unsortedSegmentSum, unstack, variable, where, whereAsync, zeros, zerosLike, booleanMaskAsync, equalStrict, greaterEqualStrict, greaterStrict, lessEqualStrict, lessStrict, notEqualStrict, addStrict, divStrict, maximumStrict, minimumStrict, modStrict, mulStrict, powStrict, squaredDifferenceStrict, subStrict, transpose, norm, movingAverage, scatterND, sparseToDense, gatherND, dropout, enclosingPowerOfTwo, cosineWindow, inTopKAsync, op, OP_SCOPE_SUFFIX, image, linalg, losses, spectral, fused, signal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "image", function() { return image; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linalg", function() { return linalg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "losses", function() { return losses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spectral", function() { return spectral; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "signal", function() { return signal; });
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "abs", function() { return _abs__WEBPACK_IMPORTED_MODULE_0__["abs"]; });

/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acos", function() { return _acos__WEBPACK_IMPORTED_MODULE_1__["acos"]; });

/* harmony import */ var _acosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acosh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acosh", function() { return _acosh__WEBPACK_IMPORTED_MODULE_2__["acosh"]; });

/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "add", function() { return _add__WEBPACK_IMPORTED_MODULE_3__["add"]; });

/* harmony import */ var _add_n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./add_n */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addN", function() { return _add_n__WEBPACK_IMPORTED_MODULE_4__["addN"]; });

/* harmony import */ var _all__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./all */ "./node_modules/@tensorflow/tfjs-core/dist/ops/all.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "all", function() { return _all__WEBPACK_IMPORTED_MODULE_5__["all"]; });

/* harmony import */ var _any__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./any */ "./node_modules/@tensorflow/tfjs-core/dist/ops/any.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "any", function() { return _any__WEBPACK_IMPORTED_MODULE_6__["any"]; });

/* harmony import */ var _arg_max__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./arg_max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMax", function() { return _arg_max__WEBPACK_IMPORTED_MODULE_7__["argMax"]; });

/* harmony import */ var _arg_min__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./arg_min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMin", function() { return _arg_min__WEBPACK_IMPORTED_MODULE_8__["argMin"]; });

/* harmony import */ var _asin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asin */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asin", function() { return _asin__WEBPACK_IMPORTED_MODULE_9__["asin"]; });

/* harmony import */ var _asinh__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./asinh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asinh", function() { return _asinh__WEBPACK_IMPORTED_MODULE_10__["asinh"]; });

/* harmony import */ var _atan__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./atan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan", function() { return _atan__WEBPACK_IMPORTED_MODULE_11__["atan"]; });

/* harmony import */ var _atan2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./atan2 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan2", function() { return _atan2__WEBPACK_IMPORTED_MODULE_12__["atan2"]; });

/* harmony import */ var _atanh__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./atanh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atanh", function() { return _atanh__WEBPACK_IMPORTED_MODULE_13__["atanh"]; });

/* harmony import */ var _avg_pool__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool", function() { return _avg_pool__WEBPACK_IMPORTED_MODULE_14__["avgPool"]; });

/* harmony import */ var _avg_pool_3d__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./avg_pool_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool3d", function() { return _avg_pool_3d__WEBPACK_IMPORTED_MODULE_15__["avgPool3d"]; });

/* harmony import */ var _basic_lstm_cell__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./basic_lstm_cell */ "./node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basicLSTMCell", function() { return _basic_lstm_cell__WEBPACK_IMPORTED_MODULE_16__["basicLSTMCell"]; });

/* harmony import */ var _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchToSpaceND", function() { return _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_17__["batchToSpaceND"]; });

/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm", function() { return _batchnorm__WEBPACK_IMPORTED_MODULE_18__["batchNorm"]; });

/* harmony import */ var _batchnorm2d__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./batchnorm2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm2d", function() { return _batchnorm2d__WEBPACK_IMPORTED_MODULE_19__["batchNorm2d"]; });

/* harmony import */ var _batchnorm3d__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./batchnorm3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm3d", function() { return _batchnorm3d__WEBPACK_IMPORTED_MODULE_20__["batchNorm3d"]; });

/* harmony import */ var _batchnorm4d__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./batchnorm4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm4d", function() { return _batchnorm4d__WEBPACK_IMPORTED_MODULE_21__["batchNorm4d"]; });

/* harmony import */ var _broadcast_to__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "broadcastTo", function() { return _broadcast_to__WEBPACK_IMPORTED_MODULE_22__["broadcastTo"]; });

/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return _buffer__WEBPACK_IMPORTED_MODULE_23__["buffer"]; });

/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cast", function() { return _cast__WEBPACK_IMPORTED_MODULE_24__["cast"]; });

/* harmony import */ var _ceil__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ceil */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return _ceil__WEBPACK_IMPORTED_MODULE_25__["ceil"]; });

/* harmony import */ var _clip_by_value__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./clip_by_value */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clipByValue", function() { return _clip_by_value__WEBPACK_IMPORTED_MODULE_26__["clipByValue"]; });

/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return _clone__WEBPACK_IMPORTED_MODULE_27__["clone"]; });

/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "complex", function() { return _complex__WEBPACK_IMPORTED_MODULE_28__["complex"]; });

/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return _concat__WEBPACK_IMPORTED_MODULE_29__["concat"]; });

/* harmony import */ var _concat_1d__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./concat_1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat1d", function() { return _concat_1d__WEBPACK_IMPORTED_MODULE_30__["concat1d"]; });

/* harmony import */ var _concat_2d__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./concat_2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat2d", function() { return _concat_2d__WEBPACK_IMPORTED_MODULE_31__["concat2d"]; });

/* harmony import */ var _concat_3d__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./concat_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat3d", function() { return _concat_3d__WEBPACK_IMPORTED_MODULE_32__["concat3d"]; });

/* harmony import */ var _concat_4d__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./concat_4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat4d", function() { return _concat_4d__WEBPACK_IMPORTED_MODULE_33__["concat4d"]; });

/* harmony import */ var _conv1d__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./conv1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv1d", function() { return _conv1d__WEBPACK_IMPORTED_MODULE_34__["conv1d"]; });

/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2d", function() { return _conv2d__WEBPACK_IMPORTED_MODULE_35__["conv2d"]; });

/* harmony import */ var _conv2d_transpose__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./conv2d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2dTranspose", function() { return _conv2d_transpose__WEBPACK_IMPORTED_MODULE_36__["conv2dTranspose"]; });

/* harmony import */ var _conv3d__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./conv3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3d", function() { return _conv3d__WEBPACK_IMPORTED_MODULE_37__["conv3d"]; });

/* harmony import */ var _conv3d_transpose__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./conv3d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3dTranspose", function() { return _conv3d_transpose__WEBPACK_IMPORTED_MODULE_38__["conv3dTranspose"]; });

/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./cos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return _cos__WEBPACK_IMPORTED_MODULE_39__["cos"]; });

/* harmony import */ var _cosh__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./cosh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosh", function() { return _cosh__WEBPACK_IMPORTED_MODULE_40__["cosh"]; });

/* harmony import */ var _cumsum__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cumsum", function() { return _cumsum__WEBPACK_IMPORTED_MODULE_41__["cumsum"]; });

/* harmony import */ var _depth_to_space__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./depth_to_space */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthToSpace", function() { return _depth_to_space__WEBPACK_IMPORTED_MODULE_42__["depthToSpace"]; });

/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2d", function() { return _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_43__["depthwiseConv2d"]; });

/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./diag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "diag", function() { return _diag__WEBPACK_IMPORTED_MODULE_44__["diag"]; });

/* harmony import */ var _dilation2d__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./dilation2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dilation2d", function() { return _dilation2d__WEBPACK_IMPORTED_MODULE_45__["dilation2d"]; });

/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "div", function() { return _div__WEBPACK_IMPORTED_MODULE_46__["div"]; });

/* harmony import */ var _div_no_nan__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./div_no_nan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divNoNan", function() { return _div_no_nan__WEBPACK_IMPORTED_MODULE_47__["divNoNan"]; });

/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./dot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return _dot__WEBPACK_IMPORTED_MODULE_48__["dot"]; });

/* harmony import */ var _elu__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./elu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elu", function() { return _elu__WEBPACK_IMPORTED_MODULE_49__["elu"]; });

/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equal", function() { return _equal__WEBPACK_IMPORTED_MODULE_50__["equal"]; });

/* harmony import */ var _erf__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./erf */ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "erf", function() { return _erf__WEBPACK_IMPORTED_MODULE_51__["erf"]; });

/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exp", function() { return _exp__WEBPACK_IMPORTED_MODULE_52__["exp"]; });

/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expandDims", function() { return _expand_dims__WEBPACK_IMPORTED_MODULE_53__["expandDims"]; });

/* harmony import */ var _expm1__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./expm1 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expm1", function() { return _expm1__WEBPACK_IMPORTED_MODULE_54__["expm1"]; });

/* harmony import */ var _eye__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./eye */ "./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eye", function() { return _eye__WEBPACK_IMPORTED_MODULE_55__["eye"]; });

/* harmony import */ var _fill__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./fill */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fill", function() { return _fill__WEBPACK_IMPORTED_MODULE_56__["fill"]; });

/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./floor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return _floor__WEBPACK_IMPORTED_MODULE_57__["floor"]; });

/* harmony import */ var _floorDiv__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floorDiv", function() { return _floorDiv__WEBPACK_IMPORTED_MODULE_58__["floorDiv"]; });

/* harmony import */ var _gather__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gather", function() { return _gather__WEBPACK_IMPORTED_MODULE_59__["gather"]; });

/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greater", function() { return _greater__WEBPACK_IMPORTED_MODULE_60__["greater"]; });

/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqual", function() { return _greater_equal__WEBPACK_IMPORTED_MODULE_61__["greaterEqual"]; });

/* harmony import */ var _imag__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./imag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "imag", function() { return _imag__WEBPACK_IMPORTED_MODULE_62__["imag"]; });

/* harmony import */ var _is_finite__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./is_finite */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFinite", function() { return _is_finite__WEBPACK_IMPORTED_MODULE_63__["isFinite"]; });

/* harmony import */ var _is_inf__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./is_inf */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInf", function() { return _is_inf__WEBPACK_IMPORTED_MODULE_64__["isInf"]; });

/* harmony import */ var _is_nan__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./is_nan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return _is_nan__WEBPACK_IMPORTED_MODULE_65__["isNaN"]; });

/* harmony import */ var _leaky_relu__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./leaky_relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "leakyRelu", function() { return _leaky_relu__WEBPACK_IMPORTED_MODULE_66__["leakyRelu"]; });

/* harmony import */ var _less__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "less", function() { return _less__WEBPACK_IMPORTED_MODULE_67__["less"]; });

/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqual", function() { return _less_equal__WEBPACK_IMPORTED_MODULE_68__["lessEqual"]; });

/* harmony import */ var _linspace__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./linspace */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linspace", function() { return _linspace__WEBPACK_IMPORTED_MODULE_69__["linspace"]; });

/* harmony import */ var _local_response_normalization__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./local_response_normalization */ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "localResponseNormalization", function() { return _local_response_normalization__WEBPACK_IMPORTED_MODULE_70__["localResponseNormalization"]; });

/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log", function() { return _log__WEBPACK_IMPORTED_MODULE_71__["log"]; });

/* harmony import */ var _log1p__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./log1p */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log1p", function() { return _log1p__WEBPACK_IMPORTED_MODULE_72__["log1p"]; });

/* harmony import */ var _log_sigmoid__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./log_sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSigmoid", function() { return _log_sigmoid__WEBPACK_IMPORTED_MODULE_73__["logSigmoid"]; });

/* harmony import */ var _log_softmax__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./log_softmax */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSoftmax", function() { return _log_softmax__WEBPACK_IMPORTED_MODULE_74__["logSoftmax"]; });

/* harmony import */ var _log_sum_exp__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSumExp", function() { return _log_sum_exp__WEBPACK_IMPORTED_MODULE_75__["logSumExp"]; });

/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalAnd", function() { return _logical_and__WEBPACK_IMPORTED_MODULE_76__["logicalAnd"]; });

/* harmony import */ var _logical_not__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalNot", function() { return _logical_not__WEBPACK_IMPORTED_MODULE_77__["logicalNot"]; });

/* harmony import */ var _logical_or__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalOr", function() { return _logical_or__WEBPACK_IMPORTED_MODULE_78__["logicalOr"]; });

/* harmony import */ var _logical_xor__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./logical_xor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalXor", function() { return _logical_xor__WEBPACK_IMPORTED_MODULE_79__["logicalXor"]; });

/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matMul", function() { return _mat_mul__WEBPACK_IMPORTED_MODULE_80__["matMul"]; });

/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "max", function() { return _max__WEBPACK_IMPORTED_MODULE_81__["max"]; });

/* harmony import */ var _max_pool__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool", function() { return _max_pool__WEBPACK_IMPORTED_MODULE_82__["maxPool"]; });

/* harmony import */ var _max_pool_3d__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./max_pool_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool3d", function() { return _max_pool_3d__WEBPACK_IMPORTED_MODULE_83__["maxPool3d"]; });

/* harmony import */ var _max_pool_with_argmax__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./max_pool_with_argmax */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPoolWithArgmax", function() { return _max_pool_with_argmax__WEBPACK_IMPORTED_MODULE_84__["maxPoolWithArgmax"]; });

/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximum", function() { return _maximum__WEBPACK_IMPORTED_MODULE_85__["maximum"]; });

/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mean", function() { return _mean__WEBPACK_IMPORTED_MODULE_86__["mean"]; });

/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "min", function() { return _min__WEBPACK_IMPORTED_MODULE_87__["min"]; });

/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimum", function() { return _minimum__WEBPACK_IMPORTED_MODULE_88__["minimum"]; });

/* harmony import */ var _mirror_pad__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./mirror_pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mirrorPad", function() { return _mirror_pad__WEBPACK_IMPORTED_MODULE_89__["mirrorPad"]; });

/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./mod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return _mod__WEBPACK_IMPORTED_MODULE_90__["mod"]; });

/* harmony import */ var _moments__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./moments */ "./node_modules/@tensorflow/tfjs-core/dist/ops/moments.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moments", function() { return _moments__WEBPACK_IMPORTED_MODULE_91__["moments"]; });

/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return _mul__WEBPACK_IMPORTED_MODULE_92__["mul"]; });

/* harmony import */ var _multi_rnn_cell__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./multi_rnn_cell */ "./node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multiRNNCell", function() { return _multi_rnn_cell__WEBPACK_IMPORTED_MODULE_93__["multiRNNCell"]; });

/* harmony import */ var _multinomial__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./multinomial */ "./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multinomial", function() { return _multinomial__WEBPACK_IMPORTED_MODULE_94__["multinomial"]; });

/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "neg", function() { return _neg__WEBPACK_IMPORTED_MODULE_95__["neg"]; });

/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqual", function() { return _not_equal__WEBPACK_IMPORTED_MODULE_96__["notEqual"]; });

/* harmony import */ var _one_hot__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "oneHot", function() { return _one_hot__WEBPACK_IMPORTED_MODULE_97__["oneHot"]; });

/* harmony import */ var _ones__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ones", function() { return _ones__WEBPACK_IMPORTED_MODULE_98__["ones"]; });

/* harmony import */ var _ones_like__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./ones_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onesLike", function() { return _ones_like__WEBPACK_IMPORTED_MODULE_99__["onesLike"]; });

/* harmony import */ var _outer_product__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./outer_product */ "./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "outerProduct", function() { return _outer_product__WEBPACK_IMPORTED_MODULE_100__["outerProduct"]; });

/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad", function() { return _pad__WEBPACK_IMPORTED_MODULE_101__["pad"]; });

/* harmony import */ var _pad1d__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./pad1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad1d", function() { return _pad1d__WEBPACK_IMPORTED_MODULE_102__["pad1d"]; });

/* harmony import */ var _pad2d__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./pad2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad2d", function() { return _pad2d__WEBPACK_IMPORTED_MODULE_103__["pad2d"]; });

/* harmony import */ var _pad3d__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./pad3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad3d", function() { return _pad3d__WEBPACK_IMPORTED_MODULE_104__["pad3d"]; });

/* harmony import */ var _pad4d__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./pad4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad4d", function() { return _pad4d__WEBPACK_IMPORTED_MODULE_105__["pad4d"]; });

/* harmony import */ var _pool__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pool", function() { return _pool__WEBPACK_IMPORTED_MODULE_106__["pool"]; });

/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return _pow__WEBPACK_IMPORTED_MODULE_107__["pow"]; });

/* harmony import */ var _prelu__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./prelu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prelu", function() { return _prelu__WEBPACK_IMPORTED_MODULE_108__["prelu"]; });

/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./print */ "./node_modules/@tensorflow/tfjs-core/dist/ops/print.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "print", function() { return _print__WEBPACK_IMPORTED_MODULE_109__["print"]; });

/* harmony import */ var _prod__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./prod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prod", function() { return _prod__WEBPACK_IMPORTED_MODULE_110__["prod"]; });

/* harmony import */ var _rand__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./rand */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rand", function() { return _rand__WEBPACK_IMPORTED_MODULE_111__["rand"]; });

/* harmony import */ var _random_gamma__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./random_gamma */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomGamma", function() { return _random_gamma__WEBPACK_IMPORTED_MODULE_112__["randomGamma"]; });

/* harmony import */ var _random_normal__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./random_normal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomNormal", function() { return _random_normal__WEBPACK_IMPORTED_MODULE_113__["randomNormal"]; });

/* harmony import */ var _random_uniform__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./random_uniform */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomUniform", function() { return _random_uniform__WEBPACK_IMPORTED_MODULE_114__["randomUniform"]; });

/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./range */ "./node_modules/@tensorflow/tfjs-core/dist/ops/range.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _range__WEBPACK_IMPORTED_MODULE_115__["range"]; });

/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./real */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "real", function() { return _real__WEBPACK_IMPORTED_MODULE_116__["real"]; });

/* harmony import */ var _reciprocal__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./reciprocal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reciprocal", function() { return _reciprocal__WEBPACK_IMPORTED_MODULE_117__["reciprocal"]; });

/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu", function() { return _relu__WEBPACK_IMPORTED_MODULE_118__["relu"]; });

/* harmony import */ var _relu6__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu6", function() { return _relu6__WEBPACK_IMPORTED_MODULE_119__["relu6"]; });

/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reshape", function() { return _reshape__WEBPACK_IMPORTED_MODULE_120__["reshape"]; });

/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return _reverse__WEBPACK_IMPORTED_MODULE_121__["reverse"]; });

/* harmony import */ var _reverse_1d__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./reverse_1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse1d", function() { return _reverse_1d__WEBPACK_IMPORTED_MODULE_122__["reverse1d"]; });

/* harmony import */ var _reverse_2d__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./reverse_2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse2d", function() { return _reverse_2d__WEBPACK_IMPORTED_MODULE_123__["reverse2d"]; });

/* harmony import */ var _reverse_3d__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./reverse_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse3d", function() { return _reverse_3d__WEBPACK_IMPORTED_MODULE_124__["reverse3d"]; });

/* harmony import */ var _reverse_4d__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./reverse_4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse4d", function() { return _reverse_4d__WEBPACK_IMPORTED_MODULE_125__["reverse4d"]; });

/* harmony import */ var _round__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./round */ "./node_modules/@tensorflow/tfjs-core/dist/ops/round.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "round", function() { return _round__WEBPACK_IMPORTED_MODULE_126__["round"]; });

/* harmony import */ var _rsqrt__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./rsqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rsqrt", function() { return _rsqrt__WEBPACK_IMPORTED_MODULE_127__["rsqrt"]; });

/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scalar", function() { return _scalar__WEBPACK_IMPORTED_MODULE_128__["scalar"]; });

/* harmony import */ var _selu__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./selu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "selu", function() { return _selu__WEBPACK_IMPORTED_MODULE_129__["selu"]; });

/* harmony import */ var _separable_conv2d__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./separable_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "separableConv2d", function() { return _separable_conv2d__WEBPACK_IMPORTED_MODULE_130__["separableConv2d"]; });

/* harmony import */ var _setdiff1d_async__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./setdiff1d_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setdiff1dAsync", function() { return _setdiff1d_async__WEBPACK_IMPORTED_MODULE_131__["setdiff1dAsync"]; });

/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sigmoid", function() { return _sigmoid__WEBPACK_IMPORTED_MODULE_132__["sigmoid"]; });

/* harmony import */ var _sign__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./sign */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return _sign__WEBPACK_IMPORTED_MODULE_133__["sign"]; });

/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./sin */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return _sin__WEBPACK_IMPORTED_MODULE_134__["sin"]; });

/* harmony import */ var _sinh__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./sinh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sinh", function() { return _sinh__WEBPACK_IMPORTED_MODULE_135__["sinh"]; });

/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return _slice__WEBPACK_IMPORTED_MODULE_136__["slice"]; });

/* harmony import */ var _slice1d__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./slice1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice1d", function() { return _slice1d__WEBPACK_IMPORTED_MODULE_137__["slice1d"]; });

/* harmony import */ var _slice2d__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./slice2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice2d", function() { return _slice2d__WEBPACK_IMPORTED_MODULE_138__["slice2d"]; });

/* harmony import */ var _slice3d__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./slice3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice3d", function() { return _slice3d__WEBPACK_IMPORTED_MODULE_139__["slice3d"]; });

/* harmony import */ var _slice4d__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./slice4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice4d", function() { return _slice4d__WEBPACK_IMPORTED_MODULE_140__["slice4d"]; });

/* harmony import */ var _softmax__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./softmax */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softmax", function() { return _softmax__WEBPACK_IMPORTED_MODULE_141__["softmax"]; });

/* harmony import */ var _softplus__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./softplus */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softplus", function() { return _softplus__WEBPACK_IMPORTED_MODULE_142__["softplus"]; });

/* harmony import */ var _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spaceToBatchND", function() { return _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_143__["spaceToBatchND"]; });

/* harmony import */ var _spectral_fft__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./spectral/fft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fft", function() { return _spectral_fft__WEBPACK_IMPORTED_MODULE_144__["fft"]; });

/* harmony import */ var _spectral_ifft__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./spectral/ifft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ifft", function() { return _spectral_ifft__WEBPACK_IMPORTED_MODULE_145__["ifft"]; });

/* harmony import */ var _spectral_irfft__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./spectral/irfft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "irfft", function() { return _spectral_irfft__WEBPACK_IMPORTED_MODULE_146__["irfft"]; });

/* harmony import */ var _spectral_rfft__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./spectral/rfft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rfft", function() { return _spectral_rfft__WEBPACK_IMPORTED_MODULE_147__["rfft"]; });

/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "split", function() { return _split__WEBPACK_IMPORTED_MODULE_148__["split"]; });

/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sqrt", function() { return _sqrt__WEBPACK_IMPORTED_MODULE_149__["sqrt"]; });

/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "square", function() { return _square__WEBPACK_IMPORTED_MODULE_150__["square"]; });

/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifference", function() { return _squared_difference__WEBPACK_IMPORTED_MODULE_151__["squaredDifference"]; });

/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squeeze", function() { return _squeeze__WEBPACK_IMPORTED_MODULE_152__["squeeze"]; });

/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stack", function() { return _stack__WEBPACK_IMPORTED_MODULE_153__["stack"]; });

/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "step", function() { return _step__WEBPACK_IMPORTED_MODULE_154__["step"]; });

/* harmony import */ var _strided_slice__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./strided_slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stridedSlice", function() { return _strided_slice__WEBPACK_IMPORTED_MODULE_155__["stridedSlice"]; });

/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return _sub__WEBPACK_IMPORTED_MODULE_156__["sub"]; });

/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return _sum__WEBPACK_IMPORTED_MODULE_157__["sum"]; });

/* harmony import */ var _tan__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./tan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tan", function() { return _tan__WEBPACK_IMPORTED_MODULE_158__["tan"]; });

/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./tanh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tanh", function() { return _tanh__WEBPACK_IMPORTED_MODULE_159__["tanh"]; });

/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor", function() { return _tensor__WEBPACK_IMPORTED_MODULE_160__["tensor"]; });

/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor1d", function() { return _tensor1d__WEBPACK_IMPORTED_MODULE_161__["tensor1d"]; });

/* harmony import */ var _tensor2d__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./tensor2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor2d", function() { return _tensor2d__WEBPACK_IMPORTED_MODULE_162__["tensor2d"]; });

/* harmony import */ var _tensor3d__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./tensor3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor3d", function() { return _tensor3d__WEBPACK_IMPORTED_MODULE_163__["tensor3d"]; });

/* harmony import */ var _tensor4d__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./tensor4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor4d", function() { return _tensor4d__WEBPACK_IMPORTED_MODULE_164__["tensor4d"]; });

/* harmony import */ var _tensor5d__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./tensor5d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor5d", function() { return _tensor5d__WEBPACK_IMPORTED_MODULE_165__["tensor5d"]; });

/* harmony import */ var _tensor6d__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./tensor6d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor6d", function() { return _tensor6d__WEBPACK_IMPORTED_MODULE_166__["tensor6d"]; });

/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tile", function() { return _tile__WEBPACK_IMPORTED_MODULE_167__["tile"]; });

/* harmony import */ var _topk__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./topk */ "./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "topk", function() { return _topk__WEBPACK_IMPORTED_MODULE_168__["topk"]; });

/* harmony import */ var _truncated_normal__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./truncated_normal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "truncatedNormal", function() { return _truncated_normal__WEBPACK_IMPORTED_MODULE_169__["truncatedNormal"]; });

/* harmony import */ var _unique__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./unique */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unique", function() { return _unique__WEBPACK_IMPORTED_MODULE_170__["unique"]; });

/* harmony import */ var _unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unsortedSegmentSum", function() { return _unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_171__["unsortedSegmentSum"]; });

/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ./unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstack", function() { return _unstack__WEBPACK_IMPORTED_MODULE_172__["unstack"]; });

/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ./variable */ "./node_modules/@tensorflow/tfjs-core/dist/ops/variable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variable", function() { return _variable__WEBPACK_IMPORTED_MODULE_173__["variable"]; });

/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ./where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "where", function() { return _where__WEBPACK_IMPORTED_MODULE_174__["where"]; });

/* harmony import */ var _where_async__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ./where_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "whereAsync", function() { return _where_async__WEBPACK_IMPORTED_MODULE_175__["whereAsync"]; });

/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ./zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zeros", function() { return _zeros__WEBPACK_IMPORTED_MODULE_176__["zeros"]; });

/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ./zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zerosLike", function() { return _zeros_like__WEBPACK_IMPORTED_MODULE_177__["zerosLike"]; });

/* harmony import */ var _boolean_mask__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ./boolean_mask */ "./node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "booleanMaskAsync", function() { return _boolean_mask__WEBPACK_IMPORTED_MODULE_178__["booleanMaskAsync"]; });

/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ./compare */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equalStrict", function() { return _compare__WEBPACK_IMPORTED_MODULE_179__["equalStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqualStrict", function() { return _compare__WEBPACK_IMPORTED_MODULE_179__["greaterEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterStrict", function() { return _compare__WEBPACK_IMPORTED_MODULE_179__["greaterStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqualStrict", function() { return _compare__WEBPACK_IMPORTED_MODULE_179__["lessEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessStrict", function() { return _compare__WEBPACK_IMPORTED_MODULE_179__["lessStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqualStrict", function() { return _compare__WEBPACK_IMPORTED_MODULE_179__["notEqualStrict"]; });

/* harmony import */ var _binary_ops__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ./binary_ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["addStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["divStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximumStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["maximumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimumStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["minimumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["modStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mulStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["mulStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "powStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["powStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifferenceStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["squaredDifferenceStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "subStrict", function() { return _binary_ops__WEBPACK_IMPORTED_MODULE_180__["subStrict"]; });

/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return _transpose__WEBPACK_IMPORTED_MODULE_181__["transpose"]; });

/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ./norm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "norm", function() { return _norm__WEBPACK_IMPORTED_MODULE_182__["norm"]; });

/* harmony import */ var _moving_average__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ./moving_average */ "./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "movingAverage", function() { return _moving_average__WEBPACK_IMPORTED_MODULE_183__["movingAverage"]; });

/* harmony import */ var _scatter_nd__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ./scatter_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scatterND", function() { return _scatter_nd__WEBPACK_IMPORTED_MODULE_184__["scatterND"]; });

/* harmony import */ var _sparse_to_dense__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ./sparse_to_dense */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sparseToDense", function() { return _sparse_to_dense__WEBPACK_IMPORTED_MODULE_185__["sparseToDense"]; });

/* harmony import */ var _gather_nd__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ./gather_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gatherND", function() { return _gather_nd__WEBPACK_IMPORTED_MODULE_186__["gatherND"]; });

/* harmony import */ var _dropout__WEBPACK_IMPORTED_MODULE_187__ = __webpack_require__(/*! ./dropout */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dropout", function() { return _dropout__WEBPACK_IMPORTED_MODULE_187__["dropout"]; });

/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_188__ = __webpack_require__(/*! ./signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enclosingPowerOfTwo", function() { return _signal_ops_util__WEBPACK_IMPORTED_MODULE_188__["enclosingPowerOfTwo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosineWindow", function() { return _signal_ops_util__WEBPACK_IMPORTED_MODULE_188__["cosineWindow"]; });

/* harmony import */ var _in_top_k__WEBPACK_IMPORTED_MODULE_189__ = __webpack_require__(/*! ./in_top_k */ "./node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inTopKAsync", function() { return _in_top_k__WEBPACK_IMPORTED_MODULE_189__["inTopKAsync"]; });

/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_190__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "op", function() { return _operation__WEBPACK_IMPORTED_MODULE_190__["op"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OP_SCOPE_SUFFIX", function() { return _operation__WEBPACK_IMPORTED_MODULE_190__["OP_SCOPE_SUFFIX"]; });

/* harmony import */ var _fused_ops__WEBPACK_IMPORTED_MODULE_191__ = __webpack_require__(/*! ./fused_ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "fused", function() { return _fused_ops__WEBPACK_IMPORTED_MODULE_191__; });
/* harmony import */ var _signal_hamming_window__WEBPACK_IMPORTED_MODULE_192__ = __webpack_require__(/*! ./signal/hamming_window */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js");
/* harmony import */ var _signal_hann_window__WEBPACK_IMPORTED_MODULE_193__ = __webpack_require__(/*! ./signal/hann_window */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js");
/* harmony import */ var _signal_frame__WEBPACK_IMPORTED_MODULE_194__ = __webpack_require__(/*! ./signal/frame */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js");
/* harmony import */ var _signal_stft__WEBPACK_IMPORTED_MODULE_195__ = __webpack_require__(/*! ./signal/stft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js");
/* harmony import */ var _image_crop_and_resize__WEBPACK_IMPORTED_MODULE_196__ = __webpack_require__(/*! ./image/crop_and_resize */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js");
/* harmony import */ var _image_flip_left_right__WEBPACK_IMPORTED_MODULE_197__ = __webpack_require__(/*! ./image/flip_left_right */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js");
/* harmony import */ var _image_rotate_with_offset__WEBPACK_IMPORTED_MODULE_198__ = __webpack_require__(/*! ./image/rotate_with_offset */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js");
/* harmony import */ var _image_non_max_suppression__WEBPACK_IMPORTED_MODULE_199__ = __webpack_require__(/*! ./image/non_max_suppression */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js");
/* harmony import */ var _image_non_max_suppression_async__WEBPACK_IMPORTED_MODULE_200__ = __webpack_require__(/*! ./image/non_max_suppression_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js");
/* harmony import */ var _image_non_max_suppression_with_score__WEBPACK_IMPORTED_MODULE_201__ = __webpack_require__(/*! ./image/non_max_suppression_with_score */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js");
/* harmony import */ var _image_non_max_suppression_with_score_async__WEBPACK_IMPORTED_MODULE_202__ = __webpack_require__(/*! ./image/non_max_suppression_with_score_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js");
/* harmony import */ var _image_non_max_suppression_padded__WEBPACK_IMPORTED_MODULE_203__ = __webpack_require__(/*! ./image/non_max_suppression_padded */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js");
/* harmony import */ var _image_non_max_suppression_padded_async__WEBPACK_IMPORTED_MODULE_204__ = __webpack_require__(/*! ./image/non_max_suppression_padded_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js");
/* harmony import */ var _image_resize_bilinear__WEBPACK_IMPORTED_MODULE_205__ = __webpack_require__(/*! ./image/resize_bilinear */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js");
/* harmony import */ var _image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_206__ = __webpack_require__(/*! ./image/resize_nearest_neighbor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js");
/* harmony import */ var _linalg_band_part__WEBPACK_IMPORTED_MODULE_207__ = __webpack_require__(/*! ./linalg/band_part */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js");
/* harmony import */ var _linalg_gram_schmidt__WEBPACK_IMPORTED_MODULE_208__ = __webpack_require__(/*! ./linalg/gram_schmidt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js");
/* harmony import */ var _linalg_qr__WEBPACK_IMPORTED_MODULE_209__ = __webpack_require__(/*! ./linalg/qr */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js");
/* harmony import */ var _losses_absolute_difference__WEBPACK_IMPORTED_MODULE_210__ = __webpack_require__(/*! ./losses/absolute_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js");
/* harmony import */ var _losses_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_211__ = __webpack_require__(/*! ./losses/compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/* harmony import */ var _losses_cosine_distance__WEBPACK_IMPORTED_MODULE_212__ = __webpack_require__(/*! ./losses/cosine_distance */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js");
/* harmony import */ var _losses_hinge_loss__WEBPACK_IMPORTED_MODULE_213__ = __webpack_require__(/*! ./losses/hinge_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js");
/* harmony import */ var _losses_huber_loss__WEBPACK_IMPORTED_MODULE_214__ = __webpack_require__(/*! ./losses/huber_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js");
/* harmony import */ var _losses_log_loss__WEBPACK_IMPORTED_MODULE_215__ = __webpack_require__(/*! ./losses/log_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js");
/* harmony import */ var _losses_mean_squared_error__WEBPACK_IMPORTED_MODULE_216__ = __webpack_require__(/*! ./losses/mean_squared_error */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js");
/* harmony import */ var _losses_sigmoid_cross_entropy__WEBPACK_IMPORTED_MODULE_217__ = __webpack_require__(/*! ./losses/sigmoid_cross_entropy */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js");
/* harmony import */ var _losses_softmax_cross_entropy__WEBPACK_IMPORTED_MODULE_218__ = __webpack_require__(/*! ./losses/softmax_cross_entropy */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Modularized ops.



































































































































































































const spectral = {
    fft: _spectral_fft__WEBPACK_IMPORTED_MODULE_144__["fft"],
    ifft: _spectral_ifft__WEBPACK_IMPORTED_MODULE_145__["ifft"],
    rfft: _spectral_rfft__WEBPACK_IMPORTED_MODULE_147__["rfft"],
    irfft: _spectral_irfft__WEBPACK_IMPORTED_MODULE_146__["irfft"]
};





const signal = {
    hammingWindow: _signal_hamming_window__WEBPACK_IMPORTED_MODULE_192__["hammingWindow"],
    hannWindow: _signal_hann_window__WEBPACK_IMPORTED_MODULE_193__["hannWindow"],
    frame: _signal_frame__WEBPACK_IMPORTED_MODULE_194__["frame"],
    stft: _signal_stft__WEBPACK_IMPORTED_MODULE_195__["stft"],
};
// Image Ops namespace











const image = {
    flipLeftRight: _image_flip_left_right__WEBPACK_IMPORTED_MODULE_197__["flipLeftRight"],
    resizeNearestNeighbor: _image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_206__["resizeNearestNeighbor"],
    resizeBilinear: _image_resize_bilinear__WEBPACK_IMPORTED_MODULE_205__["resizeBilinear"],
    rotateWithOffset: _image_rotate_with_offset__WEBPACK_IMPORTED_MODULE_198__["rotateWithOffset"],
    cropAndResize: _image_crop_and_resize__WEBPACK_IMPORTED_MODULE_196__["cropAndResize"],
    nonMaxSuppression: _image_non_max_suppression__WEBPACK_IMPORTED_MODULE_199__["nonMaxSuppression"],
    nonMaxSuppressionAsync: _image_non_max_suppression_async__WEBPACK_IMPORTED_MODULE_200__["nonMaxSuppressionAsync"],
    nonMaxSuppressionWithScore: _image_non_max_suppression_with_score__WEBPACK_IMPORTED_MODULE_201__["nonMaxSuppressionWithScore"],
    nonMaxSuppressionWithScoreAsync: _image_non_max_suppression_with_score_async__WEBPACK_IMPORTED_MODULE_202__["nonMaxSuppressionWithScoreAsync"],
    nonMaxSuppressionPadded: _image_non_max_suppression_padded__WEBPACK_IMPORTED_MODULE_203__["nonMaxSuppressionPadded"],
    nonMaxSuppressionPaddedAsync: _image_non_max_suppression_padded_async__WEBPACK_IMPORTED_MODULE_204__["nonMaxSuppressionPaddedAsync"]
};
// linalg namespace



const linalg = {
    bandPart: _linalg_band_part__WEBPACK_IMPORTED_MODULE_207__["bandPart"],
    gramSchmidt: _linalg_gram_schmidt__WEBPACK_IMPORTED_MODULE_208__["gramSchmidt"],
    qr: _linalg_qr__WEBPACK_IMPORTED_MODULE_209__["qr"]
};
// losses namespace;









const losses = {
    absoluteDifference: _losses_absolute_difference__WEBPACK_IMPORTED_MODULE_210__["absoluteDifference"],
    computeWeightedLoss: _losses_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_211__["computeWeightedLoss"],
    cosineDistance: _losses_cosine_distance__WEBPACK_IMPORTED_MODULE_212__["cosineDistance"],
    hingeLoss: _losses_hinge_loss__WEBPACK_IMPORTED_MODULE_213__["hingeLoss"],
    huberLoss: _losses_huber_loss__WEBPACK_IMPORTED_MODULE_214__["huberLoss"],
    logLoss: _losses_log_loss__WEBPACK_IMPORTED_MODULE_215__["logLoss"],
    meanSquaredError: _losses_mean_squared_error__WEBPACK_IMPORTED_MODULE_216__["meanSquaredError"],
    sigmoidCrossEntropy: _losses_sigmoid_cross_entropy__WEBPACK_IMPORTED_MODULE_217__["sigmoidCrossEntropy"],
    softmaxCrossEntropy: _losses_softmax_cross_entropy__WEBPACK_IMPORTED_MODULE_218__["softmaxCrossEntropy"]
};
// Second level exports.

//# sourceMappingURL=ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js ***!
  \**************************************************************************/
/*! exports provided: abs, acos, acosh, add, addN, all, any, argMax, argMin, asin, asinh, atan, atan2, atanh, avgPool, avgPool3d, basicLSTMCell, batchToSpaceND, batchNorm, batchNorm2d, batchNorm3d, batchNorm4d, broadcastTo, buffer, cast, ceil, clipByValue, clone, complex, concat, concat1d, concat2d, concat3d, concat4d, conv1d, conv2d, conv2dTranspose, conv3d, conv3dTranspose, cos, cosh, cumsum, depthToSpace, depthwiseConv2d, diag, dilation2d, div, divNoNan, dot, elu, equal, erf, exp, expandDims, expm1, eye, fill, floor, floorDiv, gather, greater, greaterEqual, imag, isFinite, isInf, isNaN, leakyRelu, less, lessEqual, linspace, localResponseNormalization, log, log1p, logSigmoid, logSoftmax, logSumExp, logicalAnd, logicalNot, logicalOr, logicalXor, matMul, max, maxPool, maxPool3d, maxPoolWithArgmax, maximum, mean, min, minimum, mirrorPad, mod, moments, mul, multiRNNCell, multinomial, neg, notEqual, oneHot, ones, onesLike, outerProduct, pad, pad1d, pad2d, pad3d, pad4d, pool, pow, prelu, print, prod, rand, randomGamma, randomNormal, randomUniform, range, real, reciprocal, relu, relu6, reshape, reverse, reverse1d, reverse2d, reverse3d, reverse4d, round, rsqrt, scalar, selu, separableConv2d, setdiff1dAsync, sigmoid, sign, sin, sinh, slice, slice1d, slice2d, slice3d, slice4d, softmax, softplus, spaceToBatchND, fft, ifft, irfft, rfft, split, sqrt, square, squaredDifference, squeeze, stack, step, stridedSlice, sub, sum, tan, tanh, tensor, tensor1d, tensor2d, tensor3d, tensor4d, tensor5d, tensor6d, tile, topk, truncatedNormal, unique, unsortedSegmentSum, unstack, variable, where, whereAsync, zeros, zerosLike, booleanMaskAsync, equalStrict, greaterEqualStrict, greaterStrict, lessEqualStrict, lessStrict, notEqualStrict, addStrict, divStrict, maximumStrict, minimumStrict, modStrict, mulStrict, powStrict, squaredDifferenceStrict, subStrict, transpose, norm, movingAverage, scatterND, sparseToDense, gatherND, dropout, enclosingPowerOfTwo, cosineWindow, inTopKAsync, op, OP_SCOPE_SUFFIX, image, linalg, losses, spectral, fused, signal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "abs", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["abs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acos", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["acos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "acosh", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["acosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "add", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["add"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addN", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["addN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "all", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["all"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "any", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMax", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["argMax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argMin", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["argMin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asin", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["asin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asinh", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["asinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["atan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atan2", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["atan2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "atanh", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["atanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["avgPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "avgPool3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["avgPool3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basicLSTMCell", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["basicLSTMCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchToSpaceND", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["batchToSpaceND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["batchNorm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["batchNorm2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["batchNorm3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batchNorm4d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["batchNorm4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "broadcastTo", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["broadcastTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["buffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cast", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["cast"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["ceil"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clipByValue", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["clipByValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["clone"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "complex", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["complex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["concat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat1d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["concat1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["concat2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["concat3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat4d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["concat4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv1d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["conv1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["conv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv2dTranspose", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["conv2dTranspose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["conv3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "conv3dTranspose", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["conv3dTranspose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["cos"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosh", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["cosh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cumsum", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["cumsum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthToSpace", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["depthToSpace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "depthwiseConv2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["depthwiseConv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "diag", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["diag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dilation2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["dilation2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "div", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["div"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divNoNan", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["divNoNan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["dot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elu", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["elu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equal", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["equal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "erf", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["erf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exp", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["exp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expandDims", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["expandDims"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expm1", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["expm1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eye", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["eye"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fill", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["fill"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["floor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "floorDiv", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["floorDiv"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gather", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["gather"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greater", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["greater"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqual", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["greaterEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "imag", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["imag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFinite", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["isFinite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInf", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["isInf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["isNaN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "leakyRelu", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["leakyRelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "less", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["less"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqual", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["lessEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linspace", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["linspace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "localResponseNormalization", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["localResponseNormalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["log"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "log1p", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["log1p"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSigmoid", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["logSigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSoftmax", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["logSoftmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logSumExp", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["logSumExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalAnd", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["logicalAnd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalNot", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["logicalNot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalOr", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["logicalOr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicalXor", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["logicalXor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matMul", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["matMul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "max", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["max"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["maxPool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPool3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["maxPool3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxPoolWithArgmax", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["maxPoolWithArgmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximum", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["maximum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mean", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["mean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "min", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["min"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimum", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["minimum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mirrorPad", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["mirrorPad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["mod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "moments", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["moments"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["mul"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multiRNNCell", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["multiRNNCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multinomial", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["multinomial"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "neg", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["neg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqual", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["notEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "oneHot", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["oneHot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ones", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["ones"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onesLike", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["onesLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "outerProduct", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["outerProduct"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["pad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad1d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["pad1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["pad2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["pad3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pad4d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["pad4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pool", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["pool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["pow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prelu", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["prelu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "print", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["print"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prod", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["prod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rand", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["rand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomGamma", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["randomGamma"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomNormal", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["randomNormal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomUniform", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["randomUniform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["range"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "real", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["real"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reciprocal", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["reciprocal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["relu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relu6", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["relu6"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reshape", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["reshape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["reverse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse1d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["reverse1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["reverse2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["reverse3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reverse4d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["reverse4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "round", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["round"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rsqrt", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["rsqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scalar", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["scalar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "selu", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["selu"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "separableConv2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["separableConv2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setdiff1dAsync", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["setdiff1dAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sigmoid", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sigmoid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sinh", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sinh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["slice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice1d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["slice1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["slice2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["slice3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice4d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["slice4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softmax", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["softmax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "softplus", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["softplus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spaceToBatchND", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["spaceToBatchND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fft", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["fft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ifft", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["ifft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "irfft", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["irfft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rfft", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["rfft"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "split", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["split"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sqrt", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sqrt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "square", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["square"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifference", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["squaredDifference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squeeze", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["squeeze"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stack", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["stack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "step", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["step"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stridedSlice", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["stridedSlice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tan", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tanh", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tensor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor1d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tensor1d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor2d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tensor2d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor3d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tensor3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor4d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tensor4d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor5d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tensor5d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tensor6d", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tensor6d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tile", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["tile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "topk", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["topk"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "truncatedNormal", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["truncatedNormal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unique", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["unique"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unsortedSegmentSum", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["unsortedSegmentSum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unstack", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["unstack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variable", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["variable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "where", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["where"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "whereAsync", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["whereAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zeros", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["zeros"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zerosLike", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["zerosLike"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "booleanMaskAsync", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["booleanMaskAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equalStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["equalStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterEqualStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["greaterEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "greaterStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["greaterStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessEqualStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["lessEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lessStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["lessStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqualStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["notEqualStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["addStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "divStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["divStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maximumStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["maximumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "minimumStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["minimumStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["modStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mulStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["mulStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "powStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["powStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squaredDifferenceStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["squaredDifferenceStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "subStrict", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["subStrict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["transpose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "norm", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["norm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "movingAverage", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["movingAverage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scatterND", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["scatterND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sparseToDense", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["sparseToDense"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gatherND", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["gatherND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dropout", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["dropout"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enclosingPowerOfTwo", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["enclosingPowerOfTwo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cosineWindow", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["cosineWindow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inTopKAsync", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["inTopKAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "op", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["op"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OP_SCOPE_SUFFIX", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["OP_SCOPE_SUFFIX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "image", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["image"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linalg", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["linalg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "losses", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["losses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spectral", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["spectral"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fused", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["fused"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "signal", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__["signal"]; });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * This file exports ops used by the converters executors. By default it
 * re-exports all ops. In a custom build this is aliased to a file that will
 * only exports ops for a given model.json.
 */

//# sourceMappingURL=ops_for_converter.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js ***!
  \**********************************************************************/
/*! exports provided: outerProduct */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerProduct", function() { return outerProduct; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");





/**
 * Computes the outer product of two vectors, `v1` and `v2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([3, 4, 5]);
 *
 * tf.outerProduct(a, b).print();
 * ```
 * @param v1 The first vector in the outer product operation.
 * @param v2 The second vector in the outer product operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function outerProduct_(v1, v2) {
    const $v1 = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(v1, 'v1', 'outerProduct');
    const $v2 = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(v2, 'v2', 'outerProduct');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +
        `${$v1.rank} and ${$v2.rank}.`);
    const v12D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($v1, [-1, 1]);
    const v22D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($v2, [1, -1]);
    return Object(_mat_mul__WEBPACK_IMPORTED_MODULE_2__["matMul"])(v12D, v22D);
}
const outerProduct = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ outerProduct_ });
//# sourceMappingURL=outer_product.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js ***!
  \************************************************************/
/*! exports provided: pad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pad", function() { return pad; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Pads a `tf.Tensor` with a given value and paddings.
 *
 * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,
 * refer to `tf.mirrorPad`
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `paddings` is of given length.
 *   - `tf.pad1d`
 *   - `tf.pad2d`
 *   - `tf.pad3d`
 *   - `tf.pad4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.pad([[1, 2]]).print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * @param constantValue The pad value to use. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function pad_(x, paddings, constantValue = 0) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'pad');
    if ($x.rank === 0) {
        throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
    }
    const forward = (backend, save) => {
        save([$x]);
        return backend.pad($x, paddings, constantValue);
    };
    const attrs = { paddings, constantValue };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["PadV2"], attrs);
}
const pad = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ pad_ });
//# sourceMappingURL=pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js ***!
  \**************************************************************/
/*! exports provided: pad1d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pad1d", function() { return pad1d; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
 */
function pad1d_(x, paddings, constantValue = 0) {
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');
    return Object(_pad__WEBPACK_IMPORTED_MODULE_2__["pad"])(x, [paddings], constantValue);
}
const pad1d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ pad1d_ });
//# sourceMappingURL=pad1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js ***!
  \**************************************************************/
/*! exports provided: pad2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pad2d", function() { return pad2d; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
 */
function pad2d_(x, paddings, constantValue = 0) {
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(paddings.length === 2 && paddings[0].length === 2 &&
        paddings[1].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
    return Object(_pad__WEBPACK_IMPORTED_MODULE_2__["pad"])(x, paddings, constantValue);
}
const pad2d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ pad2d_ });
//# sourceMappingURL=pad2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js ***!
  \**************************************************************/
/*! exports provided: pad3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pad3d", function() { return pad3d; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
 */
function pad3d_(x, paddings, constantValue = 0) {
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(paddings.length === 3 && paddings[0].length === 2 &&
        paddings[1].length === 2 && paddings[2].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
    return Object(_pad__WEBPACK_IMPORTED_MODULE_2__["pad"])(x, paddings, constantValue);
}
const pad3d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ pad3d_ });
//# sourceMappingURL=pad3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js ***!
  \**************************************************************/
/*! exports provided: pad4d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pad4d", function() { return pad4d; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
 */
function pad4d_(x, paddings, constantValue = 0) {
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(paddings.length === 4 && paddings[0].length === 2 &&
        paddings[1].length === 2 && paddings[2].length === 2 &&
        paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
    return Object(_pad__WEBPACK_IMPORTED_MODULE_2__["pad"])(x, paddings, constantValue);
}
const pad4d = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ pad4d_ });
//# sourceMappingURL=pad4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js ***!
  \*************************************************************/
/*! exports provided: pool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pool", function() { return pool; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _avg_pool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js");
/* harmony import */ var _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _max_pool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Performs an N-D pooling operation
 *
 * @param input The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param poolingType The type of pooling, either 'max' or 'avg'.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function pool_(input, windowShape, poolingType, pad, dilations, strides) {
    if (dilations == null) {
        dilations = [1, 1];
    }
    if (strides == null) {
        strides = 1;
    }
    if (pad === 0) {
        pad = 'valid';
    }
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(input, 'x', 'maxPool');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](_conv_util__WEBPACK_IMPORTED_MODULE_4__["eitherStridesOrDilationsAreOne"](strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_4__["computePool2DInfo"](x4D.shape, windowShape, strides, dilations, pad);
    const dilation = [convInfo.dilationHeight, convInfo.dilationWidth];
    // The following implementation does batchToSpace(pool(spaceToBatch(x)))
    // whenever dilation > 1 since the TF kernels do not support dilation > 1.
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037
    let basePadding;
    if (pad === 'same') {
        basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);
    }
    else {
        basePadding = [[0, 0], [0, 0]];
    }
    const isDilationOne = dilation[0] === 1 && dilation[1] === 1;
    const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);
    const convertedPad = isDilationOne ? pad : 'valid';
    const convertedX = isDilationOne ? x4D : Object(_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_8__["spaceToBatchND"])(x4D, dilation, adjustedPadding);
    const forwardOp = poolingType === 'avg' ?
        () => Object(_avg_pool__WEBPACK_IMPORTED_MODULE_2__["avgPool"])(convertedX, windowShape, strides, convertedPad) :
        () => Object(_max_pool__WEBPACK_IMPORTED_MODULE_5__["maxPool"])(convertedX, windowShape, strides, convertedPad);
    const y = forwardOp();
    const res = isDilationOne ? y : Object(_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_3__["batchToSpaceND"])(y, dilation, adjustedCrops);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
// Helper function to compute crops and paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184
function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
    const padStart = basePadding.map(b => b[0]);
    const origPadEnd = basePadding.map(b => b[1]);
    const fullInputShape = inputShape.concat(padStart, origPadEnd);
    const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);
    const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);
    const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);
    const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);
    return [paddings, crops];
}
// Helper function to compute base paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524
function withSpaceToBatchBasePaddings(filterShape, dilation) {
    // Spatial dimensions of the filters and the upsampled filters in which we
    // introduce (rate - 1) zeros between consecutive filter values.
    const dilatedFilterShape = filterShape.map((s, i) => {
        return s + (s - 1) * (dilation[i] - 1);
    });
    const padExtraShape = dilatedFilterShape.map(s => s - 1);
    // When padding is odd, we pad more at end, following the same
    // convention as conv2d.
    const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));
    const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);
    return padExtraShape.map((_, i) => {
        return [padExtraStart[i], padExtraEnd[i]];
    });
}
const pool = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ pool_ });
//# sourceMappingURL=pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js ***!
  \************************************************************/
/*! exports provided: pow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return pow; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function pow_(base, exp) {
    let $base = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(base, 'base', 'pow');
    let $exp = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(exp, 'exp', 'pow');
    [$base, $exp] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($base, $exp);
    const inputs = { a: $base, b: $exp };
    const forward = (backend, save) => {
        const y = backend.pow($base, $exp);
        save([$base, $exp, y]);
        return y;
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Pow"]);
}
const pow = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ pow_ });
//# sourceMappingURL=pow.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js ***!
  \**************************************************************/
/*! exports provided: prelu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prelu", function() { return prelu; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes leaky rectified linear element-wise with parametric alphas.
 *
 * `x < 0 ? alpha * x : f(x) = x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 * const alpha = tf.scalar(0.1);
 *
 * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
 * ```
 * @param x The input tensor.
 * @param alpha Scaling factor for negative values.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function prelu_(x, alpha) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'prelu');
    const $alpha = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(alpha, 'alpha', 'prelu');
    const forward = (backend, save) => {
        const res = backend.prelu($x, $alpha);
        save([$x, $alpha]);
        return res;
    };
    const inputs = { x: $x, alpha: $alpha };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Prelu"]);
}
const prelu = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ prelu_ });
//# sourceMappingURL=prelu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/print.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/print.js ***!
  \**************************************************************/
/*! exports provided: print */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "print", function() { return print; });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Prints information about the `tf.Tensor` including its data.
 *
 * ```js
 * const verbose = true;
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
 * ```
 * @param x The tensor to be printed.
 * @param verbose Whether to print verbose information about the ` Tensor`,
 * including dtype and size.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function print(x, verbose = false) {
    console.log(x.toString(verbose));
}
//# sourceMappingURL=print.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js ***!
  \*************************************************************/
/*! exports provided: prod */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prod", function() { return prod; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Computes the product of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.prod().print();  // or tf.prod(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.prod(axis).print();  // or tf.prod(x, axis)
 * ```
 *
 * @param x The input tensor to compute the product over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function prod_(x, axis = null, keepDims = false) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'prod');
    if ($x.dtype === 'bool') {
        // bool is not an allowed type for the underlying kernel.
        $x = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])($x, 'int32');
    }
    const forward = (backend) => {
        const axes = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape);
        const permutation = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"])(axes, $x.rank);
        let reductionAxes = axes;
        let permutedX = $x;
        if (permutation != null) {
            permutedX = Object(_transpose__WEBPACK_IMPORTED_MODULE_8__["transpose"])($x, permutation);
            reductionAxes = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"])(reductionAxes.length, $x.rank);
        }
        let value = backend.prod(permutedX, reductionAxes);
        if (keepDims) {
            const newShape = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["expandShapeToKeepDim"])(value.shape, axes);
            value = Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(value, newShape);
        }
        return value;
    };
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Prod"], attrs);
}
const prod = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ prod_ });
//# sourceMappingURL=prod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js ***!
  \*************************************************************/
/*! exports provided: rand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rand", function() { return rand; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a random number generator
 * function defined by the user.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param randFunction A random number generator function which is called
 * for each element in the output tensor.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 */
function rand_(shape, randFunction, dtype) {
    const size = Object(_util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"])(shape);
    let values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    }
    else if (dtype === 'int32') {
        values = new Int32Array(size);
    }
    else if (dtype === 'bool') {
        values = new Uint8Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
    for (let i = 0; i < size; i++) {
        values[i] = randFunction();
    }
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensor(values, shape, dtype);
}
const rand = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ rand_ });
//# sourceMappingURL=rand.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js ***!
  \******************************************************************/
/*! exports provided: MPRandGauss, RandGamma, UniformRandom, jarqueBeraNormalityTest, expectArrayInMeanStdRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MPRandGauss", function() { return MPRandGauss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RandGamma", function() { return RandGamma; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniformRandom", function() { return UniformRandom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jarqueBeraNormalityTest", function() { return jarqueBeraNormalityTest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectArrayInMeanStdRange", function() { return expectArrayInMeanStdRange; });
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! seedrandom */ "./node_modules/seedrandom/index.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _test_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../test_util */ "./node_modules/@tensorflow/tfjs-core/dist/test_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


// https://en.wikipedia.org/wiki/Marsaglia_polar_method
class MPRandGauss {
    constructor(mean, stdDeviation, dtype, truncated, seed) {
        this.mean = mean;
        this.stdDev = stdDeviation;
        this.dtype = dtype;
        this.nextVal = NaN;
        this.truncated = truncated;
        if (this.truncated) {
            this.upper = this.mean + this.stdDev * 2;
            this.lower = this.mean - this.stdDev * 2;
        }
        const seedValue = seed ? seed : Math.random();
        this.random = seedrandom__WEBPACK_IMPORTED_MODULE_0__["alea"](seedValue.toString());
    }
    /** Returns next sample from a Gaussian distribution. */
    nextValue() {
        if (!isNaN(this.nextVal)) {
            const value = this.nextVal;
            this.nextVal = NaN;
            return value;
        }
        let resultX, resultY;
        let isValid = false;
        while (!isValid) {
            let v1, v2, s;
            do {
                v1 = 2 * this.random() - 1;
                v2 = 2 * this.random() - 1;
                s = v1 * v1 + v2 * v2;
            } while (s >= 1 || s === 0);
            const mul = Math.sqrt(-2.0 * Math.log(s) / s);
            resultX = this.mean + this.stdDev * v1 * mul;
            resultY = this.mean + this.stdDev * v2 * mul;
            if (!this.truncated || this.isValidTruncated(resultX)) {
                isValid = true;
            }
        }
        if (!this.truncated || this.isValidTruncated(resultY)) {
            this.nextVal = this.convertValue(resultY);
        }
        return this.convertValue(resultX);
    }
    /** Handles proper rounding for non-floating-point numbers. */
    convertValue(value) {
        if (this.dtype == null || this.dtype === 'float32') {
            return value;
        }
        return Math.round(value);
    }
    /** Returns true if less than 2-standard-deviations from the mean. */
    isValidTruncated(value) {
        return value <= this.upper && value >= this.lower;
    }
}
// Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
// Gamma Variables."
class RandGamma {
    constructor(alpha, beta, dtype, seed) {
        this.alpha = alpha;
        this.beta = 1 / beta; // convert rate to scale parameter
        this.dtype = dtype;
        const seedValue = seed ? seed : Math.random();
        this.randu = seedrandom__WEBPACK_IMPORTED_MODULE_0__["alea"](seedValue.toString());
        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());
        if (alpha < 1) {
            this.d = alpha + (2 / 3);
        }
        else {
            this.d = alpha - (1 / 3);
        }
        this.c = 1 / Math.sqrt(9 * this.d);
    }
    /** Returns next sample from a gamma distribution. */
    nextValue() {
        let x2, v0, v1, x, u, v;
        while (true) {
            do {
                x = this.randn.nextValue();
                v = 1 + (this.c * x);
            } while (v <= 0);
            v *= v * v;
            x2 = x * x;
            v0 = 1 - (0.331 * x2 * x2);
            v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));
            u = this.randu();
            if (u < v0 || Math.log(u) < v1) {
                break;
            }
        }
        v = (1 / this.beta) * this.d * v;
        if (this.alpha < 1) {
            v *= Math.pow(this.randu(), 1 / this.alpha);
        }
        return this.convertValue(v);
    }
    /** Handles proper rounding for non-floating-point numbers. */
    convertValue(value) {
        if (this.dtype === 'float32') {
            return value;
        }
        return Math.round(value);
    }
}
class UniformRandom {
    constructor(min = 0, max = 1, dtype, seed) {
        /** Handles proper rounding for non floating point numbers. */
        this.canReturnFloat = () => (this.dtype == null || this.dtype === 'float32');
        this.min = min;
        this.range = max - min;
        this.dtype = dtype;
        if (seed == null) {
            seed = Math.random();
        }
        if (typeof seed === 'number') {
            seed = seed.toString();
        }
        if (!this.canReturnFloat() && this.range <= 1) {
            throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);
        }
        this.random = seedrandom__WEBPACK_IMPORTED_MODULE_0__["alea"](seed);
    }
    convertValue(value) {
        if (this.canReturnFloat()) {
            return value;
        }
        return Math.round(value);
    }
    nextValue() {
        return this.convertValue(this.min + this.range * this.random());
    }
}
function jarqueBeraNormalityTest(values) {
    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test
    const n = values.length;
    const s = skewness(values);
    const k = kurtosis(values);
    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));
    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:
    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm
    const CHI_SQUARE_2DEG = 5.991;
    if (jb > CHI_SQUARE_2DEG) {
        throw new Error(`Invalid p-value for JB: ${jb}`);
    }
}
function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {
    if (epsilon == null) {
        epsilon = Object(_test_util__WEBPACK_IMPORTED_MODULE_1__["testEpsilon"])();
    }
    const actualMean = mean(actual);
    Object(_test_util__WEBPACK_IMPORTED_MODULE_1__["expectNumbersClose"])(actualMean, expectedMean, epsilon);
    Object(_test_util__WEBPACK_IMPORTED_MODULE_1__["expectNumbersClose"])(standardDeviation(actual, actualMean), expectedStdDev, epsilon);
}
function mean(values) {
    let sum = 0;
    for (let i = 0; i < values.length; i++) {
        sum += values[i];
    }
    return sum / values.length;
}
function standardDeviation(values, mean) {
    let squareDiffSum = 0;
    for (let i = 0; i < values.length; i++) {
        const diff = values[i] - mean;
        squareDiffSum += diff * diff;
    }
    return Math.sqrt(squareDiffSum / values.length);
}
function kurtosis(values) {
    // https://en.wikipedia.org/wiki/Kurtosis
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum4 = 0;
    for (let i = 0; i < n; i++) {
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum4 += Math.pow(v, 4);
    }
    return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);
}
function skewness(values) {
    // https://en.wikipedia.org/wiki/Skewness
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum3 = 0;
    for (let i = 0; i < n; i++) {
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum3 += Math.pow(v, 3);
    }
    return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);
}
//# sourceMappingURL=rand_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js ***!
  \*********************************************************************/
/*! exports provided: randomGamma */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomGamma", function() { return randomGamma; });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a gamma distribution.
 *
 * ```js
 * tf.randomGamma([2, 2], 1).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param alpha The shape parameter of the gamma distribution.
 * @param beta The inverse scale parameter of the gamma distribution. Defaults
 *     to 1.
 * @param dtype The data type of the output. Defaults to float32.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomGamma_(shape, alpha, beta = 1, dtype = 'float32', seed) {
    if (beta == null) {
        beta = 1;
    }
    if (dtype == null) {
        dtype = 'float32';
    }
    if (dtype !== 'float32' && dtype !== 'int32') {
        throw new Error(`Unsupported data type ${dtype}`);
    }
    const rgamma = new _rand_util__WEBPACK_IMPORTED_MODULE_2__["RandGamma"](alpha, beta, dtype, seed);
    const res = Object(_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])(shape, dtype);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = rgamma.nextValue();
    }
    return res.toTensor();
}
const randomGamma = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ randomGamma_ });
//# sourceMappingURL=random_gamma.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js ***!
  \**********************************************************************/
/*! exports provided: randomNormal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomNormal", function() { return randomNormal; });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * ```js
 * tf.randomNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === 'bool') {
        throw new Error(`Unsupported data type ${dtype}`);
    }
    const randGauss = new _rand_util__WEBPACK_IMPORTED_MODULE_2__["MPRandGauss"](mean, stdDev, dtype, false /* truncated */, seed);
    const res = Object(_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])(shape, dtype);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = randGauss.nextValue();
    }
    return res.toTensor();
}
const randomNormal = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ randomNormal_ });
//# sourceMappingURL=random_normal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js ***!
  \***********************************************************************/
/*! exports provided: randomUniform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomUniform", function() { return randomUniform; });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a uniform distribution.
 *
 * The generated values follow a uniform distribution in the range [minval,
 * maxval). The lower bound minval is included in the range, while the upper
 * bound maxval is excluded.
 *
 * ```js
 * tf.randomUniform([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param minval The lower bound on the range of random values to generate.
 *   Defaults to 0.
 * @param maxval The upper bound on the range of random values to generate.
 *   Defaults to 1.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomUniform_(shape, minval = 0, maxval = 1, dtype = 'float32', seed) {
    const res = Object(_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])(shape, dtype);
    const random = new _rand_util__WEBPACK_IMPORTED_MODULE_2__["UniformRandom"](minval, maxval, null, seed);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = random.nextValue();
    }
    return res.toTensor();
}
const randomUniform = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ randomUniform_ });
//# sourceMappingURL=random_uniform.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/range.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/range.js ***!
  \**************************************************************/
/*! exports provided: range */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function() { return range; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
 *
 * The tensor is a is half-open interval meaning it includes start, but
 * excludes stop. Decrementing ranges and negative step values are also
 * supported.sv
 *
 *
 * ```js
 * tf.range(0, 9, 2).print();
 * ```
 *
 * @param start An integer start value
 * @param stop An integer stop value
 * @param step An integer increment (will default to 1 or -1)
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function range(start, stop, step = 1, dtype = 'float32') {
    if (step === 0) {
        throw new Error('Cannot have a step of zero');
    }
    const forward = () => {
        const sameStartStop = start === stop;
        const increasingRangeNegativeStep = start < stop && step < 0;
        const decreasingRangePositiveStep = stop < start && step > 1;
        if (sameStartStop || increasingRangeNegativeStep ||
            decreasingRangePositiveStep) {
            return Object(_zeros__WEBPACK_IMPORTED_MODULE_4__["zeros"])([0], dtype);
        }
        const numElements = Math.abs(Math.ceil((stop - start) / step));
        const values = Object(_util__WEBPACK_IMPORTED_MODULE_2__["makeZerosTypedArray"])(numElements, dtype);
        if (stop < start && step === 1) {
            // Auto adjust the step's sign if it hasn't been set
            // (or was set to 1)
            step = -1;
        }
        values[0] = start;
        for (let i = 1; i < values.length; i++) {
            values[i] = values[i - 1] + step;
        }
        return Object(_tensor1d__WEBPACK_IMPORTED_MODULE_3__["tensor1d"])(values, dtype);
    };
    const attrs = { start, stop, step, dtype };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, {} /* inputs */, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Range"], attrs);
}
//# sourceMappingURL=range.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/real.js ***!
  \*************************************************************/
/*! exports provided: real */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "real", function() { return real; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the real part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the real part of each element in input considered as a complex number.
 *
 * If the input is real, it simply makes a clone.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.real(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function real_(input) {
    const $input = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(input, 'input', 'real');
    const forward = (backend) => {
        return backend.real($input);
    };
    const inputs = { input: $input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Real"]);
}
const real = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ real_ });
//# sourceMappingURL=real.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js ***!
  \*******************************************************************/
/*! exports provided: reciprocal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reciprocal", function() { return reciprocal; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes reciprocal of x element-wise: `1 / x`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, 2]);
 *
 * x.reciprocal().print();  // or tf.reciprocal(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function reciprocal_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'reciprocal');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.reciprocal($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Reciprocal"]);
}
const reciprocal = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ reciprocal_ });
//# sourceMappingURL=reciprocal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js ***!
  \********************************************************************/
/*! exports provided: PARALLELIZE_THRESHOLD, computeOptimalWindowSize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PARALLELIZE_THRESHOLD", function() { return PARALLELIZE_THRESHOLD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeOptimalWindowSize", function() { return computeOptimalWindowSize; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Inputs of size above this threshold will be parallelized by calling multiple
 * shader programs.
 */

const PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(inSize) {
    if (inSize <= PARALLELIZE_THRESHOLD) {
        return inSize;
    }
    return Object(_util__WEBPACK_IMPORTED_MODULE_0__["nearestDivisor"])(inSize, Math.floor(Math.sqrt(inSize)));
}
//# sourceMappingURL=reduce_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js ***!
  \*************************************************************/
/*! exports provided: relu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "relu", function() { return relu; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes rectified linear element-wise: `max(x, 0)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.relu().print();  // or tf.relu(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'relu');
    const forward = (backend, save) => {
        save([$x]);
        if ($x.dtype === 'bool') {
            return Object(_cast__WEBPACK_IMPORTED_MODULE_4__["cast"])($x, 'int32');
        }
        return backend.relu($x);
    };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Relu"]);
}
const relu = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ relu_ });
//# sourceMappingURL=relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js ***!
  \**************************************************************/
/*! exports provided: relu6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "relu6", function() { return relu6; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 8]);
 *
 * x.relu6().print();  // or tf.relu6(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu6_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'relu6');
    const forward = (backend, save) => {
        save([$x]);
        if ($x.dtype === 'bool') {
            return Object(_cast__WEBPACK_IMPORTED_MODULE_3__["cast"])($x, 'int32');
        }
        return backend.relu6($x);
    };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Relu6"]);
}
const relu6 = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ relu6_ });
//# sourceMappingURL=relu6.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js ***!
  \****************************************************************/
/*! exports provided: reshape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reshape", function() { return reshape; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function reshape_(x, shape) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'reshape', null);
    const inputs = { x: $x };
    const attrs = { shape };
    const forward = (backend, save) => {
        shape = _util__WEBPACK_IMPORTED_MODULE_3__["inferFromImplicitShape"](shape, $x.size);
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.size === _util__WEBPACK_IMPORTED_MODULE_3__["sizeFromShape"](shape), () => 'new shape and old shape must have the same number of elements.');
        save([$x]);
        return backend.reshape($x, shape);
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Reshape"], attrs);
}
const reshape = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ reshape_ });
//# sourceMappingURL=reshape.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js ***!
  \****************************************************************/
/*! exports provided: reverse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return reverse; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Reverses a `tf.Tensor` along a specified axis.
 *
 * Also available are stricter rank-specific methods that assert that `x` is
 * of the given rank:
 *   - `tf.reverse1d`
 *   - `tf.reverse2d`
 *   - `tf.reverse3d`
 *   - `tf.reverse4d`
 *
 * Except `tf.reverse1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.reverse().print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.reverse(axis).print();
 * ```
 * @param x The input tensor to be reversed.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function reverse_(x, axis) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'reverse');
    const forward = (backend) => {
        const axes = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape);
        if ($x.rank === 0) {
            return Object(_clone__WEBPACK_IMPORTED_MODULE_4__["clone"])($x);
        }
        const res = backend.reverse($x, axes);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(res, $x.shape);
    };
    const inputs = { x: $x };
    const attrs = { dims: axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Reverse"], attrs);
}
const reverse = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ reverse_ });
//# sourceMappingURL=reverse.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js ***!
  \*******************************************************************/
/*! exports provided: reverse1d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse1d", function() { return reverse1d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor1D`.
 *
 * @param x The input tensor.
 */
function reverse1d_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);
    return Object(_reverse__WEBPACK_IMPORTED_MODULE_3__["reverse"])($x, 0);
}
const reverse1d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ reverse1d_ });
//# sourceMappingURL=reverse_1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js ***!
  \*******************************************************************/
/*! exports provided: reverse2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse2d", function() { return reverse2d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor2D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse2d_(x, axis) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);
    return Object(_reverse__WEBPACK_IMPORTED_MODULE_3__["reverse"])($x, axis);
}
const reverse2d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ reverse2d_ });
//# sourceMappingURL=reverse_2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js ***!
  \*******************************************************************/
/*! exports provided: reverse3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse3d", function() { return reverse3d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor3D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse3d_(x, axis) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);
    return Object(_reverse__WEBPACK_IMPORTED_MODULE_3__["reverse"])($x, axis);
}
const reverse3d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ reverse3d_ });
//# sourceMappingURL=reverse_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js ***!
  \*******************************************************************/
/*! exports provided: reverse4d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse4d", function() { return reverse4d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor4D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse4d_(x, axis) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);
    return Object(_reverse__WEBPACK_IMPORTED_MODULE_3__["reverse"])($x, axis);
}
const reverse4d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ reverse4d_ });
//# sourceMappingURL=reverse_4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js ***!
  \********************************************************************/
/*! exports provided: getImageCenter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getImageCenter", function() { return getImageCenter; });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns the image center in pixels.
function getImageCenter(center, imageHeight, imageWidth) {
    const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);
    const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);
    return [centerX, centerY];
}
//# sourceMappingURL=rotate_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/round.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/round.js ***!
  \**************************************************************/
/*! exports provided: round */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes round of input `tf.Tensor` element-wise: `round(x)`.
 * It implements banker's rounding.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.round().print();  // or tf.round(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function round_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'round');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend) => backend.round($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Round"]);
}
const round = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ round_ });
//# sourceMappingURL=round.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js ***!
  \**************************************************************/
/*! exports provided: rsqrt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rsqrt", function() { return rsqrt; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
 * `y = 1 / sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.rsqrt().print();  // or tf.rsqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function rsqrt_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'rsqrt');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.rsqrt($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Rsqrt"]);
}
const rsqrt = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ rsqrt_ });
//# sourceMappingURL=rsqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js ***!
  \***************************************************************/
/*! exports provided: scalar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scalar", function() { return scalar; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function scalar(value, dtype) {
    if (((Object(_util__WEBPACK_IMPORTED_MODULE_0__["isTypedArray"])(value) && dtype !== 'string') || Array.isArray(value)) &&
        dtype !== 'complex64') {
        throw new Error('Error creating a new Scalar: value must be a primitive ' +
            '(number|boolean|string)');
    }
    if (dtype === 'string' && Object(_util__WEBPACK_IMPORTED_MODULE_0__["isTypedArray"])(value) &&
        !(value instanceof Uint8Array)) {
        throw new Error('When making a scalar from encoded string, ' +
            'the value must be `Uint8Array`.');
    }
    const shape = [];
    const inferredShape = [];
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__["makeTensor"])(value, shape, inferredShape, dtype);
}
//# sourceMappingURL=scalar.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js ***!
  \*******************************************************************/
/*! exports provided: scatterND */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scatterND", function() { return scatterND; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scatter_nd_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scatter_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Creates a new tensor by applying sparse updates to individual
 * values or slices within a zero tensor of the given shape tensor according to
 * indices. This operator is the inverse of the `tf.gatherND` operator which
 * extracts values or slices from a given tensor.
 *
 * ```js
 * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
 * const updates = tf.tensor1d([9, 10, 11, 12]);
 * const shape = [8];
 * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
 * ```
 *
 * @param indices The tensor contains the indices into the output tensor.
 * @param updates The tensor contains the value for the indices.
 * @param shape: The shape of the output tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function scatterND_(indices, updates, shape) {
    const $indices = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(indices, 'indices', 'scatterND', 'int32');
    const $updates = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(updates, 'updates', 'scatterND');
    _scatter_nd_util__WEBPACK_IMPORTED_MODULE_4__["validateInput"]($updates, $indices, shape);
    const forward = (backend) => {
        return backend.scatterND($indices, $updates, shape);
    };
    const inputs = { indices: $indices, updates: $updates };
    const attrs = { shape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ScatterNd"], attrs);
}
const scatterND = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ scatterND_ });
//# sourceMappingURL=scatter_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js ***!
  \************************************************************************/
/*! exports provided: validateUpdateShape, validateInput, calculateShapes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateUpdateShape", function() { return validateUpdateShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateInput", function() { return validateInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateShapes", function() { return calculateShapes; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");

/**
 * Check whether updates.shape = indices.shape[:batchDim] +
 * shape[sliceDim:]
 *
 * @param x The input tensor.
 */
function validateUpdateShape(shape, indices, updates) {
    const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;
    const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;
    const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +
        `shape[sliceDim:], got updates.shape: ${updates.shape}` +
        `, indices.shape: ${indices.shape}, shape: ${shape}` +
        `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;
    if (updates.rank < batchDim) {
        throw new Error(shapeError + ` update.rank < ${batchDim}. `);
    }
    if (shape.length < sliceDim + (updates.rank - batchDim)) {
        throw new Error(shapeError +
            ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);
    }
    if (updates.rank !== batchDim + shape.length - sliceDim) {
        throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);
    }
    for (let d = 0; d < batchDim; ++d) {
        if (updates.shape[d] !== indices.shape[d]) {
            throw new Error(shapeError +
                ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);
        }
    }
    for (let d = 0; d < updates.rank - batchDim; ++d) {
        if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {
            throw new Error(shapeError +
                ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);
        }
    }
}
/**
 * Validate scatter nd inputs.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 */
function validateInput(updates, indices, shape) {
    if (indices.rank < 1) {
        throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' +
            ` but the rank was ${indices.rank}.`);
    }
    if (updates.rank < 1) {
        throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' +
            ` but the rank was ${updates.rank}.`);
    }
    if (indices.dtype !== 'int32') {
        throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);
    }
    if (shape.length < 1) {
        throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);
    }
    if (shape.length === 0) {
        if (indices.size === 0) {
            throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);
        }
        if (updates.size === 0) {
            throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);
        }
    }
    validateUpdateShape(shape, indices, updates);
}
/**
 * Calculate the shape information for the output.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 *
 * @returns ScatterShapeInfo
 */
function calculateShapes(updates, indices, shape) {
    // Calculate the number of dimensions in indices
    const indicesRank = indices.shape.length;
    const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;
    // Calculate the number of elements that make up each slice of our updated
    // tensor. This allows us to work with flattened tensors and copy over whole
    // slices at a time.
    const totalNd = shape.length;
    let sliceSize = 1;
    for (let i = sliceRank; i < totalNd; ++i) {
        sliceSize *= shape[i];
    }
    const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;
    const numUpdates = Object(_util__WEBPACK_IMPORTED_MODULE_0__["sizeFromShape"])(indices.shape) / safeSliceDim;
    const strides = [...Object(_util__WEBPACK_IMPORTED_MODULE_0__["computeStrides"])(shape.slice(0, sliceRank)), 1];
    const outputSize = Object(_util__WEBPACK_IMPORTED_MODULE_0__["sizeFromShape"])(shape);
    return { sliceRank, numUpdates, sliceSize, strides, outputSize };
}
//# sourceMappingURL=scatter_nd_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js ***!
  \*********************************************************************/
/*! exports provided: segOpComputeOptimalWindowSize, computeOutShape, collectGatherOpShapeInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "segOpComputeOptimalWindowSize", function() { return segOpComputeOptimalWindowSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeOutShape", function() { return computeOutShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "collectGatherOpShapeInfo", function() { return collectGatherOpShapeInfo; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _reduce_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reduce_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function segOpComputeOptimalWindowSize(inSize, numSegments) {
    let done = false;
    let res;
    if (inSize <= _reduce_util__WEBPACK_IMPORTED_MODULE_1__["PARALLELIZE_THRESHOLD"]) {
        res = inSize;
        done = true;
    }
    else {
        res = Object(_util__WEBPACK_IMPORTED_MODULE_0__["nearestDivisor"])(inSize, Math.floor(Math.sqrt(inSize)));
    }
    while (!done) {
        if (res > numSegments || res === inSize) {
            done = true;
        }
        else {
            res = Object(_util__WEBPACK_IMPORTED_MODULE_0__["nearestDivisor"])(inSize, res + 1);
        }
    }
    return res;
}
function computeOutShape(aShape, axis, numSegments) {
    const outShape = [];
    const rank = aShape.length;
    for (let dim = 0; dim < rank; dim++) {
        if (dim !== axis) {
            outShape.push(aShape[dim]);
        }
        else {
            outShape.push(numSegments);
        }
    }
    return outShape;
}
function collectGatherOpShapeInfo(x, indices, axis) {
    const dimSize = x.shape[axis];
    const outputShape = [];
    let batchSize = 1;
    let sliceSize = 1;
    for (let i = 0; i < axis; i++) {
        outputShape.push(x.shape[i]);
        batchSize *= x.shape[i];
    }
    for (let i = 0; i < indices.rank; i++) {
        outputShape.push(indices.shape[i]);
    }
    for (let i = axis + 1; i < x.rank; i++) {
        outputShape.push(x.shape[i]);
        sliceSize *= x.shape[i];
    }
    return { batchSize, sliceSize, dimSize, outputShape };
}
//# sourceMappingURL=segment_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js ***!
  \*************************************************************/
/*! exports provided: selu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selu", function() { return selu; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes scaled exponential linear element-wise.
 *
 * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.selu().print();  // or tf.selu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function selu_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'selu');
    const forward = (backend, save) => {
        const res = backend.selu($x);
        save([$x]);
        return res;
    };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Selu"]);
}
const selu = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ selu_ });
//# sourceMappingURL=selu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js ***!
  \******************************************************************/
/*! exports provided: SELU_SCALEALPHA, SELU_SCALE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELU_SCALEALPHA", function() { return SELU_SCALEALPHA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELU_SCALE", function() { return SELU_SCALE; });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SELU_SCALEALPHA = 1.7580993408473768599402175208123;
const SELU_SCALE = 1.0507009873554804934193349852946;
//# sourceMappingURL=selu_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js ***!
  \*************************************************************************/
/*! exports provided: separableConv2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "separableConv2d", function() { return separableConv2d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");






/**
 * 2-D convolution with separable filters.
 *
 * Performs a depthwise convolution that acts separately on channels followed
 * by a pointwise convolution that mixes channels. Note that this is
 * separability between dimensions [1, 2] and 3, not spatial separability
 * between dimensions 1 and 2.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
 *     the filter used in the first step.
 * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
 *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
 *     the filter used in the second step.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'separableConv2d');
    const $depthwiseFilter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');
    const $pointwiseFilter = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    if (dataFormat === 'NCHW') {
        throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +
            'NHWC is supported');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` +
        `rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +
        `got rank ${$depthwiseFilter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +
        `got rank ${$depthwiseFilter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` +
        ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` +
        `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);
    const inChannels = $depthwiseFilter.shape[2];
    const channelMultiplier = $depthwiseFilter.shape[3];
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` +
        `must be ${inChannels * channelMultiplier}, ` +
        `but got ${$pointwiseFilter.shape[2]}.`);
    const depthwise = Object(_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_3__["depthwiseConv2d"])(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
    const pointwiseStride = 1;
    const res = Object(_conv2d__WEBPACK_IMPORTED_MODULE_2__["conv2d"])(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);
    if (reshapedTo4D) {
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_5__["reshape"])(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const separableConv2d = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ separableConv2d_ });
//# sourceMappingURL=separable_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js ***!
  \************************************************************************/
/*! exports provided: setdiff1dAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setdiff1dAsync", function() { return setdiff1dAsync; });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Computes the difference between two lists of numbers.
 *
 * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
 * that represents all values that are in `x` but not in `y`. The returned
 * Tensor `out` is sorted in the same order that the numbers appear in `x`
 * (duplicates are preserved). This operation also returns a Tensor indices that
 * represents the position of each out element in `x`. In other words:
 *
 * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
 *
 * ```js
 * const x = [1, 2, 3, 4, 5, 6];
 * const y = [1, 3, 5];
 *
 * const [out, indices] = await tf.setdiff1dAsync(x, y);
 * out.print(); // [2, 4, 6]
 * indices.print(); // [1, 3, 5]
 * ```
 *
 * @param x 1-D Tensor. Values to keep.
 * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
 *     output.
 * @returns Promise of Tensor tuple [out, indices].
 *  out: Tensor with the same type as x.
 *  indices: A Tensor of type int32.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
async function setdiff1dAsync_(x, y) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(x, 'x', 'setdiff1d');
    const $y = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(y, 'y', 'setdiff1d');
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"]($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"]($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);
    _util__WEBPACK_IMPORTED_MODULE_2__["assert"]($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);
    const xVals = await $x.data();
    const yVals = await $y.data();
    const ySet = new Set(yVals);
    let outputSize = 0;
    for (let i = 0; i < xVals.length; i++) {
        if (!ySet.has(xVals[i])) {
            outputSize++;
        }
    }
    const buffer = new _tensor__WEBPACK_IMPORTED_MODULE_0__["TensorBuffer"]([outputSize], $x.dtype);
    const indices = new _tensor__WEBPACK_IMPORTED_MODULE_0__["TensorBuffer"]([outputSize], 'int32');
    for (let i = 0, p = 0; i < xVals.length; i++) {
        if (!ySet.has(xVals[i])) {
            buffer.values[p] = xVals[i];
            indices.values[p] = i;
            p++;
        }
    }
    return [buffer.toTensor(), indices.toTensor()];
}
const setdiff1dAsync = setdiff1dAsync_;
//# sourceMappingURL=setdiff1d_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js ***!
  \****************************************************************/
/*! exports provided: sigmoid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sigmoid", function() { return sigmoid; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
 *
 * ```js
 * const x = tf.tensor1d([0, -1, 2, -3]);
 *
 * x.sigmoid().print();  // or tf.sigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sigmoid_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'sigmoid');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.sigmoid($x);
        save([res]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Sigmoid"]);
}
const sigmoid = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ sigmoid_ });
//# sourceMappingURL=sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js ***!
  \*************************************************************/
/*! exports provided: sign */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return sign; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns an element-wise indication of the sign of a number.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
 *
 * x.sign().print();  // or tf.sign(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sign_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'sign');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.sign($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Sign"]);
}
const sign = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ sign_ });
//# sourceMappingURL=sign.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js ***!
  \*********************************************************************/
/*! exports provided: frame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frame", function() { return frame; });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _fill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fill */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _tensor2d__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tensor2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Expands input into frames of frameLength.
 * Slides a window size with frameStep.
 *
 * ```js
 * tf.signal.frame([1, 2, 3], 2, 1).print();
 * ```
 * @param signal The input tensor to be expanded
 * @param frameLength Length of each frame
 * @param frameStep The frame hop size in samples.
 * @param padEnd Whether to pad the end of signal with padValue.
 * @param padValue An number to use where the input signal does
 *     not exist when padEnd is True.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {
    let start = 0;
    const output = [];
    while (start + frameLength <= signal.size) {
        output.push(Object(_slice__WEBPACK_IMPORTED_MODULE_4__["slice"])(signal, start, frameLength));
        start += frameStep;
    }
    if (padEnd) {
        while (start < signal.size) {
            const padLen = (start + frameLength) - signal.size;
            const pad = Object(_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])([
                Object(_slice__WEBPACK_IMPORTED_MODULE_4__["slice"])(signal, start, frameLength - padLen), Object(_fill__WEBPACK_IMPORTED_MODULE_1__["fill"])([padLen], padValue)
            ]);
            output.push(pad);
            start += frameStep;
        }
    }
    if (output.length === 0) {
        return Object(_tensor2d__WEBPACK_IMPORTED_MODULE_5__["tensor2d"])([], [0, frameLength]);
    }
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])(Object(_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(output), [output.length, frameLength]);
}
const frame = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ frame_ });
//# sourceMappingURL=frame.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js ***!
  \******************************************************************************/
/*! exports provided: hammingWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hammingWindow", function() { return hammingWindow; });
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Generate a hamming window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hammingWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hammingWindow_(windowLength) {
    return Object(_signal_ops_util__WEBPACK_IMPORTED_MODULE_1__["cosineWindow"])(windowLength, 0.54, 0.46);
}
const hammingWindow = Object(_operation__WEBPACK_IMPORTED_MODULE_0__["op"])({ hammingWindow_ });
//# sourceMappingURL=hamming_window.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js ***!
  \***************************************************************************/
/*! exports provided: hannWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hannWindow", function() { return hannWindow; });
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Generate a Hann window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hannWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hannWindow_(windowLength) {
    return Object(_signal_ops_util__WEBPACK_IMPORTED_MODULE_1__["cosineWindow"])(windowLength, 0.5, 0.5);
}
const hannWindow = Object(_operation__WEBPACK_IMPORTED_MODULE_0__["op"])({ hannWindow_ });
//# sourceMappingURL=hann_window.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js ***!
  \********************************************************************/
/*! exports provided: stft */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stft", function() { return stft; });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _spectral_rfft__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../spectral/rfft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js");
/* harmony import */ var _frame__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./frame */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js");
/* harmony import */ var _hann_window__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hann_window */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the Short-time Fourier Transform of signals
 * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
 *
 * ```js
 * const input = tf.tensor1d([1, 1, 1, 1, 1])
 * tf.signal.stft(input, 3, 1).print();
 * ```
 * @param signal 1-dimensional real value tensor.
 * @param frameLength The window length of samples.
 * @param frameStep The number of samples to step.
 * @param fftLength The size of the FFT to apply.
 * @param windowFn A callable that takes a window length and returns 1-d tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function stft_(signal, frameLength, frameStep, fftLength, windowFn = _hann_window__WEBPACK_IMPORTED_MODULE_7__["hannWindow"]) {
    if (fftLength == null) {
        fftLength = Object(_signal_ops_util__WEBPACK_IMPORTED_MODULE_3__["enclosingPowerOfTwo"])(frameLength);
    }
    const framedSignal = Object(_frame__WEBPACK_IMPORTED_MODULE_6__["frame"])(signal, frameLength, frameStep);
    const windowedSignal = Object(_mul__WEBPACK_IMPORTED_MODULE_1__["mul"])(framedSignal, windowFn(frameLength));
    const output = [];
    for (let i = 0; i < framedSignal.shape[0]; i++) {
        output.push(Object(_spectral_rfft__WEBPACK_IMPORTED_MODULE_5__["rfft"])(Object(_slice__WEBPACK_IMPORTED_MODULE_4__["slice"])(windowedSignal, [i, 0], [1, frameLength]), fftLength));
    }
    return Object(_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(output);
}
const stft = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ stft_ });
//# sourceMappingURL=stft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js ***!
  \************************************************************************/
/*! exports provided: enclosingPowerOfTwo, cosineWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enclosingPowerOfTwo", function() { return enclosingPowerOfTwo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cosineWindow", function() { return cosineWindow; });
/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function enclosingPowerOfTwo(value) {
    // Return 2**N for integer N such that 2**N >= value.
    return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
}
function cosineWindow(windowLength, a, b) {
    const even = 1 - windowLength % 2;
    const newValues = new Float32Array(windowLength);
    for (let i = 0; i < windowLength; ++i) {
        const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);
        newValues[i] = a - b * Math.cos(cosArg);
    }
    return Object(_tensor1d__WEBPACK_IMPORTED_MODULE_0__["tensor1d"])(newValues, 'float32');
}
//# sourceMappingURL=signal_ops_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js ***!
  \************************************************************/
/*! exports provided: sin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return sin; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes sin of the input Tensor element-wise: `sin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.sin().print();  // or tf.sin(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sin_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'sin');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.sin($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Sin"]);
}
const sin = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ sin_ });
//# sourceMappingURL=sin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js ***!
  \*************************************************************/
/*! exports provided: sinh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sinh", function() { return sinh; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.sinh().print();  // or tf.sinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sinh_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'sinh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.sinh($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Sinh"]);
}
const sinh = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ sinh_ });
//# sourceMappingURL=sinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js ***!
  \**************************************************************/
/*! exports provided: slice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return slice; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
 * and is of size `size`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `x` is of the given rank:
 *   - `tf.slice1d`
 *   - `tf.slice2d`
 *   - `tf.slice3d`
 *   - `tf.slice4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.slice([1], [2]).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * x.slice([1, 0], [1, 2]).print();
 * ```
 * @param x The input `tf.Tensor` to slice from.
 * @param begin The coordinates to start the slice from. The length can be
 *     less than the rank of x - the rest of the axes will have implicit 0 as
 *     start. Can also be a single number, in which case it specifies the
 *     first axis.
 * @param size The size of the slice. The length can be less than the rank of
 *     x - the rest of the axes will have implicit -1. A value of -1 requests
 *     the rest of the dimensions in the axis. Can also be a single number,
 *     in which case it specifies the size of the first axis.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function slice_(x, begin, size) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'slice');
    if ($x.rank === 0) {
        throw new Error('Slicing scalar is not possible');
    }
    const forward = (backend, save) => {
        const [begin_, size_] = _slice_util__WEBPACK_IMPORTED_MODULE_4__["parseSliceParams"]($x, begin, size);
        _slice_util__WEBPACK_IMPORTED_MODULE_4__["assertParamsValid"]($x, begin_, size_);
        save([$x]);
        return backend.slice($x, begin_, size_);
    };
    const inputs = { x: $x };
    const attrs = { begin, size };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Slice"], attrs);
}
const slice = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ slice_ });
//# sourceMappingURL=slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js ***!
  \****************************************************************/
/*! exports provided: slice1d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice1d", function() { return slice1d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
 * of length `size`. See `slice` for details.
 */
function slice1d_(x, begin, size) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'slice1d');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);
    return Object(_slice__WEBPACK_IMPORTED_MODULE_3__["slice"])($x, [begin], [size]);
}
const slice1d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ slice1d_ });
//# sourceMappingURL=slice1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js ***!
  \****************************************************************/
/*! exports provided: slice2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice2d", function() { return slice2d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice2d_(x, begin, size) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'slice2d');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);
    return Object(_slice__WEBPACK_IMPORTED_MODULE_3__["slice"])($x, begin, size);
}
const slice2d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ slice2d_ });
//# sourceMappingURL=slice2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js ***!
  \****************************************************************/
/*! exports provided: slice3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice3d", function() { return slice3d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice3d_(x, begin, size) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'slice3d');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);
    return Object(_slice__WEBPACK_IMPORTED_MODULE_3__["slice"])($x, begin, size);
}
const slice3d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ slice3d_ });
//# sourceMappingURL=slice3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js ***!
  \****************************************************************/
/*! exports provided: slice4d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice4d", function() { return slice4d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice4d_(x, begin, size) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'slice4d');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($x.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);
    return Object(_slice__WEBPACK_IMPORTED_MODULE_3__["slice"])($x, begin, size);
}
const slice4d = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ slice4d_ });
//# sourceMappingURL=slice4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js ***!
  \*******************************************************************/
/*! exports provided: assertParamsValid, maskToAxes, computeOutShape, stridesWithElidedDims, getNormalizedAxes, startIndicesWithElidedDims, stopIndicesWithElidedDims, stridesForAxis, startForAxis, stopForAxis, isSliceContinous, computeFlatOffset, parseSliceParams */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertParamsValid", function() { return assertParamsValid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maskToAxes", function() { return maskToAxes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeOutShape", function() { return computeOutShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stridesWithElidedDims", function() { return stridesWithElidedDims; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNormalizedAxes", function() { return getNormalizedAxes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startIndicesWithElidedDims", function() { return startIndicesWithElidedDims; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopIndicesWithElidedDims", function() { return stopIndicesWithElidedDims; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stridesForAxis", function() { return stridesForAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startForAxis", function() { return startForAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopForAxis", function() { return stopForAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSliceContinous", function() { return isSliceContinous; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeFlatOffset", function() { return computeFlatOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseSliceParams", function() { return parseSliceParams; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function assertParamsValid(input, begin, size) {
    const inputRank = input.shape.length;
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +
        `match the rank of the array (${inputRank}).`);
    _util__WEBPACK_IMPORTED_MODULE_0__["assert"](inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must ` +
        `match the rank of the array (${inputRank}).`);
    for (let i = 0; i < inputRank; ++i) {
        _util__WEBPACK_IMPORTED_MODULE_0__["assert"](begin[i] + size[i] <= input.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +
            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);
    }
}
/** Converts a binary mask to an array of axes. Used in stridedSlice(). */
function maskToAxes(mask) {
    const axes = [];
    let axis = 0;
    while (mask > 0) {
        if (mask & 1) {
            axes.push(axis);
        }
        mask /= 2;
        axis++;
    }
    return axes;
}
/** Computes the output shape given the strided slice params. */
function computeOutShape(begin, end, strides) {
    const size = [];
    for (let axis = 0; axis < begin.length; axis++) {
        size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
    }
    return size;
}
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stride value. Otherwise, insert.
function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {
    const newStrides = [...strides];
    for (let i = newStrides.length; i < inputShape.length; i++) {
        newStrides.push(1);
    }
    for (let i = 0; i < numElidedAxes; i++) {
        if (i === 0) {
            newStrides[ellipsisInsertionIndex] = 1;
        }
        else {
            newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */, 1 /* element to add */);
            newStrides.pop();
        }
    }
    return newStrides;
}
function unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {
    if (normalizedAxis <= ellipsisInsertionIndex) {
        return normalizedAxis;
    }
    return normalizedAxis - (numElidedAxes - 1);
}
function getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {
    const elidedAxes = [];
    for (let i = 0; i < numElidedAxes; i++) {
        elidedAxes.push(ellipsisInsertionIndex + i);
    }
    return elidedAxes;
}
// Normalize the start, end and strides.
function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {
    const inputRank = inputShape.length;
    let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);
    if (ellipsisAxes.length && numInterpolatedAxes > 0) {
        const fullIndex = ellipsisAxes[0];
        // The ellipsis applies to the masked index as well as any dimensions
        // that are interpolated.
        const numElidedAxes = numInterpolatedAxes + 1;
        normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);
        normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);
        normalizedStrides =
            stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);
    }
    else {
        for (let axis = 0; axis < inputRank; axis++) {
            normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);
            normalizedEnd[axis] =
                stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);
            normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);
        }
    }
    return {
        begin: normalizedBegin,
        end: normalizedEnd,
        strides: normalizedStrides
    };
}
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current start value. Otherwise, insert.
function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {
    const newIndices = [...inputShape];
    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
    for (let axis = 0; axis < newIndices.length; axis++) {
        if (elidedAxes.indexOf(axis) > -1) {
            newIndices[axis] = 0;
        }
        else {
            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
            let originalValue = originalBegin[originalAxis];
            if (beginMask & 1 << originalAxis) {
                originalValue = 0;
            }
            newIndices[axis] = originalValue;
        }
    }
    return newIndices;
}
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stop value. Otherwise, insert.
function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {
    const newIndices = [...inputShape];
    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
    for (let axis = 0; axis < newIndices.length; axis++) {
        if (elidedAxes.indexOf(axis) > -1) {
            newIndices[axis] = Number.MAX_SAFE_INTEGER;
        }
        else {
            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
            let originalValue = originalEnd[originalAxis];
            if (endMask & 1 << originalAxis) {
                originalValue = Number.MAX_SAFE_INTEGER;
            }
            newIndices[axis] = originalValue;
        }
    }
    for (let i = 0; i < newIndices.length; i++) {
        // Handle negative indices
        const axisSize = inputShape[i];
        if (newIndices[i] < 0) {
            newIndices[i] += axisSize;
        }
        newIndices[i] = _util__WEBPACK_IMPORTED_MODULE_0__["clamp"](0, newIndices[i], inputShape[i]);
    }
    return newIndices;
}
function stridesForAxis(strides, axis, ellipsisMask) {
    let stride = strides[axis];
    if (ellipsisMask & (1 << axis) || stride == null) {
        stride = 1;
    }
    return stride;
}
function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {
    // Begin with the specified index
    let start = startIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of masked axes, or the begin index is not set
    // for the axis.
    if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {
        if (stride > 0) {
            // Forward iteration - use the first element. These values will get
            // clamped below (Note: We could have set them to 0 and axis_size-1, but
            // use lowest() and max() to maintain symmetry with StopForAxis())
            start = Number.MIN_SAFE_INTEGER;
        }
        else {
            // Backward iteration - use the last element.
            start = Number.MAX_SAFE_INTEGER;
        }
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (start < 0) {
        start += axisSize;
    }
    // Clamping
    start = _util__WEBPACK_IMPORTED_MODULE_0__["clamp"](0, start, axisSize - 1);
    return start;
}
function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {
    // Begin with the specified index
    let stop = stopIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of masked axes, or if the stop index is not
    // set for this axis.
    if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {
        if (stride > 0) {
            // Forward iteration - use the last element. These values will get
            // clamped below
            stop = Number.MAX_SAFE_INTEGER;
        }
        else {
            // Backward iteration - use the first element.
            stop = Number.MIN_SAFE_INTEGER;
        }
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (stop < 0) {
        stop += axisSize;
    }
    // Clamping
    // Because the end index points one past the last element, we need slightly
    // different clamping ranges depending on the direction.
    if (stride > 0) {
        // Forward iteration
        stop = _util__WEBPACK_IMPORTED_MODULE_0__["clamp"](0, stop, axisSize);
    }
    else {
        // Backward iteration
        stop = _util__WEBPACK_IMPORTED_MODULE_0__["clamp"](-1, stop, axisSize - 1);
    }
    return stop;
}
/**
 * Returns true if the slice occupies a continous set of elements in the
 * 'flat' space.
 */
function isSliceContinous(shape, begin, size) {
    // Index of the first axis that has size > 1.
    let firstNonOneAxis = size.length;
    for (let i = 0; i < size.length; i++) {
        if (size[i] > 1) {
            firstNonOneAxis = i;
            break;
        }
    }
    for (let i = firstNonOneAxis + 1; i < size.length; i++) {
        if (begin[i] > 0 || size[i] !== shape[i]) {
            return false;
        }
    }
    return true;
}
function computeFlatOffset(begin, strides) {
    let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;
    for (let i = 0; i < begin.length - 1; i++) {
        flatOffset += begin[i] * strides[i];
    }
    return flatOffset;
}
function parseSliceParams(x, begin, size) {
    // The following logic allows for more ergonomic calls.
    let begin_;
    const xRank = x.shape.length;
    if (typeof begin === 'number') {
        begin_ = [begin, ...new Array(xRank - 1).fill(0)];
    }
    else if (begin.length < xRank) {
        begin_ = begin.concat(new Array(xRank - begin.length).fill(0));
    }
    else {
        begin_ = begin.slice();
    }
    begin_.forEach(d => {
        _util__WEBPACK_IMPORTED_MODULE_0__["assert"](d !== -1, () => 'slice() does not support negative begin indexing.');
    });
    let size_;
    if (size == null) {
        size_ = new Array(xRank).fill(-1);
    }
    else if (typeof size === 'number') {
        size_ = [size, ...new Array(xRank - 1).fill(-1)];
    }
    else if (size.length < xRank) {
        size_ = size.concat(new Array(xRank - size.length).fill(-1));
    }
    else {
        size_ = size;
    }
    size_ = size_.map((d, i) => {
        if (d >= 0) {
            return d;
        }
        else {
            _util__WEBPACK_IMPORTED_MODULE_0__["assert"](d === -1, () => `Negative size values should be exactly -1 but got ` +
                `${d} for the slice() size at index ${i}.`);
            return x.shape[i] - begin_[i];
        }
    });
    return [begin_, size_];
}
//# sourceMappingURL=slice_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js ***!
  \****************************************************************/
/*! exports provided: softmax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "softmax", function() { return softmax; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the softmax normalized vector given the logits.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function softmax_(logits, dim = -1) {
    const $logits = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(logits, 'logits', 'softmax', 'float32');
    if (dim === -1) {
        dim = $logits.rank - 1;
    }
    if (dim !== $logits.rank - 1) {
        throw Error('Softmax along a non-last dimension is not yet supported. ' +
            `Logits was rank ${$logits.rank} and dim was ${dim}`);
    }
    const inputs = { logits: $logits };
    const attrs = { dim };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const y = backend.softmax($logits, dim);
        save([y]);
        return y;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Softmax"], attrs);
}
const softmax = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ softmax_ });
//# sourceMappingURL=softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js ***!
  \*****************************************************************/
/*! exports provided: softplus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "softplus", function() { return softplus; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.softplus().print();  // or tf.softplus(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function softplus_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'softplus');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.softplus($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Softplus"]);
}
const softplus = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ softplus_ });
//# sourceMappingURL=softplus.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js ***!
  \**************************************************************************/
/*! exports provided: spaceToBatchND */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spaceToBatchND", function() { return spaceToBatchND; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
 * a grid of blocks of shape `blockShape`, and interleaves these blocks with
 * the "batch" dimension (0) such that in the output, the spatial
 * dimensions `[1, ..., M]` correspond to the position within the grid,
 * and the batch dimension combines both the position within a spatial block
 * and the original batch position. Prior to division into blocks,
 * the spatial dimensions of the input are optionally zero padded
 * according to `paddings`. See below for a precise description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
 * const blockShape = [2, 2];
 * const paddings = [[0, 0], [0, 0]];
 *
 * x.spaceToBatchND(blockShape, paddings).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
 *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
 * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
 * is required that
 * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
 * according to `paddings` to produce `padded` of shape paddedShape.
 *
 * 2. Reshape `padded` to `reshapedPadded` of shape:
 * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
 *
 * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
 * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
 * batch dimension, producing an output tensor of shape:
 * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function spaceToBatchND_(x, blockShape, paddings) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'spaceToBatchND');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.shape.reduce((a, b, i) => {
        if (i > 0 && i <= blockShape.length) {
            return a &&
                ((b + paddings[i - 1][0] + paddings[i - 1][1]) %
                    blockShape[i - 1] ===
                    0);
        }
        return a;
    }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);
    const forward = backend => backend.spaceToBatchND($x, blockShape, paddings);
    const inputs = { x: $x };
    const attrs = { blockShape, paddings };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["SpaceToBatchND"], attrs);
}
const spaceToBatchND = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ spaceToBatchND_ });
//# sourceMappingURL=space_to_batch_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js ***!
  \************************************************************************/
/*! exports provided: sparseToDense */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sparseToDense", function() { return sparseToDense; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_sparse_to_dense_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sparse_to_dense_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Converts a sparse representation into a dense tensor.
 *
 * Builds an array dense with shape outputShape such that:
 *
 * // If sparseIndices is scalar
 * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
 *
 * // If sparseIndices is a vector, then for each i
 * dense[sparseIndices[i]] = sparseValues[i]
 *
 * // If sparseIndices is an n by d matrix, then for each i in [0, n)
 * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
 * All other values in dense are set to defaultValue. If sparseValues is a
 * scalar, all sparse indices are set to this single value.
 *
 * If indices are repeated the final value is summed over all values for those
 * indices.
 *
 * ```js
 * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
 * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
 * const shape = [8];
 * tf.sparseToDense(indices, values, shape).print();
 * ```
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape Shape of the dense output tensor. the type is inferred.
 * @param defaultValue Scalar. Value to set for indices not specified in
 * sparseIndices. Defaults to zero.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {
    const $sparseIndices = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');
    const $sparseValues = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(sparseValues, 'sparseValues', 'sparseToDense');
    const $defaultValue = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);
    _ops_sparse_to_dense_util__WEBPACK_IMPORTED_MODULE_2__["validateInput"]($sparseIndices, $sparseValues, outputShape, $defaultValue);
    const inputs = {
        sparseIndices: $sparseIndices,
        sparseValues: $sparseValues,
        defaultValue: $defaultValue
    };
    const attrs = { outputShape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.sparseToDense($sparseIndices, $sparseValues, outputShape, $defaultValue), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["SparseToDense"], attrs);
}
const sparseToDense = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ sparseToDense_ });
//# sourceMappingURL=sparse_to_dense.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js ***!
  \*****************************************************************************/
/*! exports provided: validateInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateInput", function() { return validateInput; });
/**
 * Validate sparseToDense inputs.
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape number[]. Shape of the dense output tensor.
 * @param validateIndices boolean. indice validation is not supported, error
 * will be thrown if it is set.
 */
function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {
    if (sparseIndices.dtype !== 'int32') {
        throw new Error('tf.sparseToDense() expects the indices to be int32 type,' +
            ` but the dtype was ${sparseIndices.dtype}.`);
    }
    if (sparseIndices.rank > 2) {
        throw new Error('sparseIndices should be a scalar, vector, or matrix,' +
            ` but got shape ${sparseIndices.shape}.`);
    }
    const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
    const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;
    if (outputShape.length !== numDims) {
        throw new Error('outputShape has incorrect number of elements:,' +
            ` ${outputShape.length}, should be: ${numDims}.`);
    }
    const numValues = sparseValues.size;
    if (!(sparseValues.rank === 0 ||
        sparseValues.rank === 1 && numValues === numElems)) {
        throw new Error('sparseValues has incorrect shape ' +
            `${sparseValues.shape}, should be [] or [${numElems}]`);
    }
    if (sparseValues.dtype !== defaultValues.dtype) {
        throw new Error('sparseValues.dtype must match defaultValues.dtype');
    }
}
//# sourceMappingURL=sparse_to_dense_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js ***!
  \*********************************************************************/
/*! exports provided: fft */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fft", function() { return fft; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the inner-most
 * dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.fft().print();  // tf.spectral.fft(x).print();
 * ```
 * @param input The complex input to compute an fft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function fft_(input) {
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` +
        `but got ${input.dtype}.`);
    const inputs = { input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => {
        // Collapse all outer dimensions to a single batch dimension.
        const innerDimensionSize = input.shape[input.shape.length - 1];
        const batch = input.size / innerDimensionSize;
        const input2D = input.as2D(batch, innerDimensionSize);
        const result = backend.fft(input2D);
        return result.reshape(input.shape);
    }, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["FFT"]);
}
const fft = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ fft_ });
//# sourceMappingURL=fft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js ***!
  \**********************************************************************/
/*! exports provided: ifft */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifft", function() { return ifft; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Inverse fast Fourier transform.
 *
 * Computes the inverse 1-dimensional discrete Fourier transform over the
 * inner-most dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.ifft().print();  // tf.spectral.ifft(x).print();
 * ```
 * @param input The complex input to compute an ifft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function ifft_(input) {
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` +
        `but got ${input.dtype}.`);
    const inputs = { input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => {
        // Collapse all outer dimensions to a single batch dimension.
        const innerDimensionSize = input.shape[input.shape.length - 1];
        const batch = input.size / innerDimensionSize;
        const input2D = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(input, [batch, innerDimensionSize]);
        const result = backend.ifft(input2D);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(result, input.shape);
    }, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["IFFT"]);
}
const ifft = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ ifft_ });
//# sourceMappingURL=ifft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js ***!
  \***********************************************************************/
/*! exports provided: irfft */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "irfft", function() { return irfft; });
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../imag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../real */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _ifft__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ifft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Inversed real value input fast Fourier transform.
 *
 * Computes the 1-dimensional inversed discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([0, 0, 0]);
 * const x = tf.complex(real, imag);
 *
 * x.irfft().print();
 * ```
 * @param input The real value input to compute an irfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function irfft_(input) {
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    let ret;
    if (innerDimensionSize <= 2) {
        const complexInput = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(input, [batch, innerDimensionSize]);
        ret = Object(_ifft__WEBPACK_IMPORTED_MODULE_10__["ifft"])(complexInput);
    }
    else {
        // The length of unique components of the DFT of a real-valued signal
        // is 2 * (input_len - 1)
        const outputShape = [batch, 2 * (innerDimensionSize - 1)];
        const realInput = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_real__WEBPACK_IMPORTED_MODULE_5__["real"])(input), [batch, innerDimensionSize]);
        const imagInput = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_imag__WEBPACK_IMPORTED_MODULE_2__["imag"])(input), [batch, innerDimensionSize]);
        const realConjugate = Object(_reverse__WEBPACK_IMPORTED_MODULE_7__["reverse"])(Object(_slice__WEBPACK_IMPORTED_MODULE_9__["slice"])(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);
        const imagConjugate = Object(_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(Object(_reverse__WEBPACK_IMPORTED_MODULE_7__["reverse"])(Object(_slice__WEBPACK_IMPORTED_MODULE_9__["slice"])(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), Object(_scalar__WEBPACK_IMPORTED_MODULE_8__["scalar"])(-1));
        const r = Object(_concat__WEBPACK_IMPORTED_MODULE_1__["concat"])([realInput, realConjugate], 1);
        const i = Object(_concat__WEBPACK_IMPORTED_MODULE_1__["concat"])([imagInput, imagConjugate], 1);
        const complexInput = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_complex__WEBPACK_IMPORTED_MODULE_0__["complex"])(r, i), [outputShape[0], outputShape[1]]);
        ret = Object(_ifft__WEBPACK_IMPORTED_MODULE_10__["ifft"])(complexInput);
    }
    ret = Object(_real__WEBPACK_IMPORTED_MODULE_5__["real"])(ret);
    // reshape the result if the input is 3D tensor.
    if (input.rank === 3 && input.shape[0] !== 0) {
        const temp = ret;
        const batch = input.shape[0];
        ret = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);
        temp.dispose();
    }
    return ret;
}
const irfft = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ irfft_ });
//# sourceMappingURL=irfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js ***!
  \**********************************************************************/
/*! exports provided: rfft */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rfft", function() { return rfft; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _imag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../imag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../real */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _fft__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












/**
 * Real value input fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 *
 * real.rfft().print();
 * ```
 * @param input The real value input to compute an rfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function rfft_(input, fftLength) {
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);
    let innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    let adjustedInput;
    if (fftLength != null && fftLength < innerDimensionSize) {
        // Need to crop
        const begin = input.shape.map(v => 0);
        const size = input.shape.map(v => v);
        size[input.shape.length - 1] = fftLength;
        adjustedInput = Object(_slice__WEBPACK_IMPORTED_MODULE_7__["slice"])(input, begin, size);
        innerDimensionSize = fftLength;
    }
    else if (fftLength != null && fftLength > innerDimensionSize) {
        // Need to pad with zeros
        const zerosShape = input.shape.map(v => v);
        zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
        adjustedInput = Object(_concat__WEBPACK_IMPORTED_MODULE_2__["concat"])([input, Object(_zeros__WEBPACK_IMPORTED_MODULE_9__["zeros"])(zerosShape)], input.shape.length - 1);
        innerDimensionSize = fftLength;
    }
    else {
        adjustedInput = input;
    }
    // Complement the input with zero imaginary numbers.
    const zerosInput = Object(_zeros_like__WEBPACK_IMPORTED_MODULE_10__["zerosLike"])(adjustedInput);
    const complexInput = Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_complex__WEBPACK_IMPORTED_MODULE_1__["complex"])(adjustedInput, zerosInput), [batch, innerDimensionSize]);
    const ret = Object(_fft__WEBPACK_IMPORTED_MODULE_11__["fft"])(complexInput);
    // Exclude complex conjugations. These conjugations are put symmetrically.
    const half = Math.floor(innerDimensionSize / 2) + 1;
    const realValues = Object(_real__WEBPACK_IMPORTED_MODULE_5__["real"])(ret);
    const imagValues = Object(_imag__WEBPACK_IMPORTED_MODULE_3__["imag"])(ret);
    const realComplexConjugate = Object(_split__WEBPACK_IMPORTED_MODULE_8__["split"])(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);
    const imagComplexConjugate = Object(_split__WEBPACK_IMPORTED_MODULE_8__["split"])(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);
    const outputShape = adjustedInput.shape.slice();
    outputShape[adjustedInput.shape.length - 1] = half;
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_6__["reshape"])(Object(_complex__WEBPACK_IMPORTED_MODULE_1__["complex"])(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);
}
const rfft = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ rfft_ });
//# sourceMappingURL=rfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/split.js ***!
  \**************************************************************/
/*! exports provided: split */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "split", function() { return split; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _split_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./split_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Splits a `tf.Tensor` into sub tensors.
 *
 * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
 * into `numOrSizeSplits` smaller tensors.
 * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
 *
 * If `numOrSizeSplits` is a number array, splits `x` into
 * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
 * same size as `x` except along dimension `axis` where the size is
 * `numOrSizeSplits[i]`.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
 * const [a, b] = tf.split(x, 2, 1);
 * a.print();
 * b.print();
 *
 * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
 * c.print();
 * d.print();
 * e.print();
 * ```
 *
 * @param x The input tensor to split.
 * @param numOrSizeSplits Either an integer indicating the number of
 * splits along the axis or an array of integers containing the sizes of
 * each output tensor along the axis. If a number then it must evenly divide
 * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
 * Can contain one -1 indicating that dimension is to be inferred.
 * @param axis The dimension along which to split. Defaults to 0 (the first
 * dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function split_(x, numOrSizeSplits, axis = 0) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'split');
    const forward = (backend, _) => {
        const $axis = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape)[0];
        const splitSizes = Object(_split_util__WEBPACK_IMPORTED_MODULE_5__["prepareSplitSize"])($x, numOrSizeSplits, $axis);
        return backend.split($x, splitSizes, $axis);
    };
    const inputs = { x: $x };
    const attr = { numOrSizeSplits, axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["SplitV"], attr);
}
const split = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ split_ });
//# sourceMappingURL=split.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js ***!
  \*******************************************************************/
/*! exports provided: prepareSplitSize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepareSplitSize", function() { return prepareSplitSize; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");

/**
 * Prepare the split size array. When the input is a number, the axis is evenly
 * divided among the split size. When the input contains the negative value, the
 * rest of the axis is allocated toward that.
 */
function prepareSplitSize(x, numOrSizeSplits, axis = 0) {
    let splitSizes = [];
    if (typeof (numOrSizeSplits) === 'number') {
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');
        splitSizes =
            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
    }
    else {
        const numOfNegs = numOrSizeSplits.reduce((count, value) => {
            if (value === -1) {
                count += 1;
            }
            return count;
        }, 0);
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(numOfNegs <= 1, () => 'There should be only one negative value in split array.');
        const negIndex = numOrSizeSplits.indexOf(-1);
        // Allow the number of split array to be -1, which indicates the rest
        // of dimension is allocated to that split.
        if (negIndex !== -1) {
            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);
            numOrSizeSplits[negIndex] = x.shape[axis] - total;
        }
        Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');
        splitSizes = numOrSizeSplits;
    }
    return splitSizes;
}
//# sourceMappingURL=split_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js ***!
  \*************************************************************/
/*! exports provided: sqrt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrt", function() { return sqrt; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sqrt_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'sqrt');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.sqrt($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Sqrt"]);
}
const sqrt = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ sqrt_ });
//# sourceMappingURL=sqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/square.js ***!
  \***************************************************************/
/*! exports provided: square */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "square", function() { return square; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function square_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(x, 'x', 'square');
    const attrs = {};
    const inputsToSave = [$x];
    const outputsToSave = [];
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        save([$x]);
        return backend.square($x);
    }, { x: $x }, null /* grad */, 'Square', attrs, inputsToSave, outputsToSave);
}
const square = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ square_ });
//# sourceMappingURL=square.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js ***!
  \***************************************************************************/
/*! exports provided: squaredDifference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDifference", function() { return squaredDifference; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns (a - b) * (a - b) element-wise.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * ```js
 * // Broadcast squared difference  a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function squaredDifference_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'squaredDifference');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'squaredDifference');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_4__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const forward = (backend, save) => {
        const res = backend.squaredDifference($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    const attrs = {};
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["SquaredDifference"], attrs);
}
const squaredDifference = Object(_operation__WEBPACK_IMPORTED_MODULE_5__["op"])({ squaredDifference_ });
//# sourceMappingURL=squared_difference.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js ***!
  \****************************************************************/
/*! exports provided: squeeze */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squeeze", function() { return squeeze; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function squeeze_(x, axis) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensor"])(x, 'x', 'squeeze');
    return Object(_reshape__WEBPACK_IMPORTED_MODULE_3__["reshape"])($x, Object(_util__WEBPACK_IMPORTED_MODULE_1__["squeezeShape"])($x.shape, axis).newShape);
}
const squeeze = Object(_operation__WEBPACK_IMPORTED_MODULE_2__["op"])({ squeeze_ });
//# sourceMappingURL=squeeze.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js ***!
  \**************************************************************/
/*! exports provided: stack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stack", function() { return stack; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.stack([a, b, c]).print();
 * ```
 *
 * @param tensors A list of tensor objects with the same shape and dtype.
 * @param axis The axis to stack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function stack_(tensors, axis = 0) {
    const $tensors = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["convertToTensorArray"])(tensors, 'tensors', 'stack');
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"]($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');
    if ($tensors.length === 1) {
        return Object(_expand_dims__WEBPACK_IMPORTED_MODULE_3__["expandDims"])($tensors[0], axis);
    }
    const rank = $tensors[0].rank;
    const shape = $tensors[0].shape;
    const dtype = $tensors[0].dtype;
    _util__WEBPACK_IMPORTED_MODULE_1__["assert"](axis <= rank, () => 'Axis must be <= rank of the tensor');
    $tensors.forEach(t => {
        _util__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"](shape, t.shape, 'All tensors passed to stack must have matching shapes');
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"](dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');
    });
    const expandedTensors = $tensors.map(t => Object(_expand_dims__WEBPACK_IMPORTED_MODULE_3__["expandDims"])(t, axis));
    // Stack exists in the TensorFlow C++ API
    // (https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/stack) but not
    // in
    // https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/core/ops/ops.pbtxt.
    // Therefore we are treating it like a high-level op rather than
    // creating a dedicated stack kernel.
    return Object(_concat__WEBPACK_IMPORTED_MODULE_2__["concat"])(expandedTensors, axis);
}
const stack = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ stack_ });
//# sourceMappingURL=stack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/step.js ***!
  \*************************************************************/
/*! exports provided: step */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "step", function() { return step; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
 *
 * ```js
 * const x = tf.tensor1d([0, 2, -1, -3]);
 *
 * x.step(.5).print();  // or tf.step(x, .5)
 * ```
 * @param x The input tensor.
 * @param alpha The gradient when input is negative.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function step_(x, alpha = 0.0) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'step');
    const inputs = { x: $x };
    const attrs = { alpha };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.step($x, alpha), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Step"], attrs);
}
const step = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ step_ });
//# sourceMappingURL=step.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js ***!
  \**********************************************************************/
/*! exports provided: stridedSlice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stridedSlice", function() { return stridedSlice; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _slice_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Extracts a strided slice of a tensor.
 *
 * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
 * the given input tensor (x). Starting at the location specified by begin the
 * slice continues by adding stride to the index until all dimensions are not
 * less than end. Note that a stride can be negative, which causes a reverse
 * slice.
 *
 * ```js
 * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
 *    [3, 2, 3]);
 * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
 * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
 *                                                     // [4, 4, 4]]]
 * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
 *                                                     // [3, 3, 3]]]
 * ```
 *
 * @param x The tensor to stride slice.
 * @param begin The coordinates to start the slice from.
 * @param end: The coordinates to end the slice at.
 * @param strides: The size of the slice.
 * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param endMask: If the ith bit of endMask is set, end[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param shrinkAxisMask: a bitmask where bit i implies that
 * the ith specification should shrink the dimensionality. begin and end must
 * imply a slice of size 1 in the dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'stridedSlice');
    const forward = (backend) => {
        if (strides == null) {
            strides = new Array(begin.length);
        }
        const ellipsisAxes = Object(_slice_util__WEBPACK_IMPORTED_MODULE_6__["maskToAxes"])(ellipsisMask);
        if (ellipsisAxes.length > 1) {
            throw new Error('Multiple ellipses in slice is not allowed.');
        }
        if (ellipsisMask !== 0 && newAxisMask !== 0) {
            throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');
        }
        if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {
            throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');
        }
        const numInterpolatedAxes = $x.rank - begin.length;
        // Expand the dims of x based on the newAxisMask.
        const expandAxes = Object(_slice_util__WEBPACK_IMPORTED_MODULE_6__["maskToAxes"])(newAxisMask);
        const newShape = $x.shape.slice();
        expandAxes.forEach(axis => {
            begin[axis] = 0;
            end[axis] = 1;
            newShape.splice(axis, 0, 1);
        });
        $x = Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])($x, newShape);
        const { begin: normalizedBegin, end: normalizedEnd, strides: normalizedStrides } = Object(_slice_util__WEBPACK_IMPORTED_MODULE_6__["getNormalizedAxes"])($x.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask);
        begin = normalizedBegin;
        end = normalizedEnd;
        strides = normalizedStrides;
        const shrinkAxes = Object(_slice_util__WEBPACK_IMPORTED_MODULE_6__["maskToAxes"])(shrinkAxisMask);
        // Adjust the ends based on the shrink mask.
        shrinkAxes.forEach(axis => {
            end[axis] = begin[axis] + 1;
            strides[axis] = 1;
        });
        // Figure out the output shape.
        const size = Object(_slice_util__WEBPACK_IMPORTED_MODULE_6__["computeOutShape"])(begin, end, strides);
        // Remove the axes based on shrinkMask.
        const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);
        const nonStrided = strides.every(v => v === 1);
        if (nonStrided) {
            return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(Object(_slice__WEBPACK_IMPORTED_MODULE_5__["slice"])($x, begin, size), outShape);
        }
        const res = backend.stridedSlice($x, begin, end, strides);
        return Object(_reshape__WEBPACK_IMPORTED_MODULE_4__["reshape"])(res, outShape);
    };
    const inputs = { x: $x };
    const attrs = {
        begin,
        end,
        strides,
        beginMask,
        endMask,
        ellipsisMask,
        newAxisMask,
        shrinkAxisMask
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["StridedSlice"], attrs);
}
const stridedSlice = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ stridedSlice_ });
//# sourceMappingURL=strided_slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js ***!
  \************************************************************/
/*! exports provided: sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 *
 * ```js
 * // Broadcast subtract a with b.
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.scalar(5);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 * @param a The first `tf.Tensor` to subtract from.
 * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function sub_(a, b) {
    let $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(a, 'a', 'sub');
    let $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_3__["convertToTensor"])(b, 'b', 'sub');
    [$a, $b] = Object(_tensor_util__WEBPACK_IMPORTED_MODULE_2__["makeTypesMatch"])($a, $b);
    const forward = (backend, save) => {
        const res = backend.subtract($a, $b);
        save([$a, $b]);
        return res;
    };
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Sub"]);
}
const sub = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ sub_ });
//# sourceMappingURL=sub.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js ***!
  \************************************************************/
/*! exports provided: sum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return sum; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function sum_(x, axis = null, keepDims = false) {
    let $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'sum');
    if ($x.dtype === 'bool') {
        $x = Object(_cast__WEBPACK_IMPORTED_MODULE_5__["cast"])($x, 'int32');
    }
    const forward = (backend, save) => {
        save([$x]);
        const axes = Object(_util__WEBPACK_IMPORTED_MODULE_3__["parseAxisParam"])(axis, $x.shape);
        const permutation = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getAxesPermutation"])(axes, $x.rank);
        let reductionAxes = axes;
        let permutedX = $x;
        if (permutation != null) {
            permutedX = Object(_transpose__WEBPACK_IMPORTED_MODULE_8__["transpose"])($x, permutation);
            reductionAxes = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["getInnerMostAxes"])(reductionAxes.length, $x.rank);
        }
        let value = backend.sum(permutedX, reductionAxes);
        if (keepDims) {
            const newShape = Object(_axis_util__WEBPACK_IMPORTED_MODULE_4__["expandShapeToKeepDim"])(value.shape, axes);
            value = Object(_reshape__WEBPACK_IMPORTED_MODULE_7__["reshape"])(value, newShape);
        }
        return value;
    };
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Sum"], attrs);
}
const sum = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ sum_ });
//# sourceMappingURL=sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js ***!
  \************************************************************/
/*! exports provided: tan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tan", function() { return tan; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.tan().print();  // or tf.tan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tan_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'tan');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const res = backend.tan($x);
        save([$x]);
        return res;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Tan"]);
}
const tan = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ tan_ });
//# sourceMappingURL=tan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js ***!
  \*************************************************************/
/*! exports provided: tanh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tanh", function() { return tanh; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, 70]);
 *
 * x.tanh().print();  // or tf.tanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tanh_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'tanh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc((backend, save) => {
        const y = backend.tanh($x);
        save([y]);
        return y;
    }, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Tanh"]);
}
const tanh = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ tanh_ });
//# sourceMappingURL=tanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js ***!
  \***************************************************************/
/*! exports provided: tensor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensor", function() { return tensor; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates a `tf.Tensor` with the provided values, shape and dtype.
 *
 * ```js
 * // Pass an array of values to create a vector.
 * tf.tensor([1, 2, 3, 4]).print();
 * ```
 *
 * ```js
 * // Pass a nested array of values to make a matrix or a higher
 * // dimensional tensor.
 * tf.tensor([[1, 2], [3, 4]]).print();
 * ```
 *
 * ```js
 * // Pass a flat array and specify a shape yourself.
 * tf.tensor([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`. If the values are strings,
 *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor(values, shape, dtype) {
    const inferredShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["inferShape"])(values, dtype);
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__["makeTensor"])(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js ***!
  \*****************************************************************/
/*! exports provided: tensor1d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensor1d", function() { return tensor1d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor1d` as it makes the code more readable.
 *
 * ```js
 * tf.tensor1d([1, 2, 3]).print();
 * ```
 *
 * @param values The values of the tensor. Can be array of numbers,
 *     or a `TypedArray`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor1d(values, dtype) {
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertNonNull"])(values);
    const inferredShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["inferShape"])(values, dtype);
    if (inferredShape.length !== 1) {
        throw new Error('tensor1d() requires values to be a flat/TypedArray');
    }
    const shape = null;
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__["makeTensor"])(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js ***!
  \*****************************************************************/
/*! exports provided: tensor2d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensor2d", function() { return tensor2d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor2d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor2d([[1, 2], [3, 4]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided, it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor2d(values, shape, dtype) {
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertNonNull"])(values);
    if (shape != null && shape.length !== 2) {
        throw new Error('tensor2d() requires shape to have two numbers');
    }
    const inferredShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["inferShape"])(values, dtype);
    if (inferredShape.length !== 2 && inferredShape.length !== 1) {
        throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor2d() requires shape to be provided when `values` ' +
            'are a flat/TypedArray');
    }
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__["makeTensor"])(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js ***!
  \*****************************************************************/
/*! exports provided: tensor3d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensor3d", function() { return tensor3d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor3d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided,  it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor3d(values, shape, dtype) {
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertNonNull"])(values);
    if (shape != null && shape.length !== 3) {
        throw new Error('tensor3d() requires shape to have three numbers');
    }
    const inferredShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["inferShape"])(values, dtype);
    if (inferredShape.length !== 3 && inferredShape.length !== 1) {
        throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor3d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__["makeTensor"])(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js ***!
  \*****************************************************************/
/*! exports provided: tensor4d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensor4d", function() { return tensor4d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor4d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor4d(values, shape, dtype) {
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertNonNull"])(values);
    if (shape != null && shape.length !== 4) {
        throw new Error('tensor4d() requires shape to have four numbers');
    }
    const inferredShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["inferShape"])(values, dtype);
    if (inferredShape.length !== 4 && inferredShape.length !== 1) {
        throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor4d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__["makeTensor"])(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js ***!
  \*****************************************************************/
/*! exports provided: tensor5d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensor5d", function() { return tensor5d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor5d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor5d(values, shape, dtype) {
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertNonNull"])(values);
    if (shape != null && shape.length !== 5) {
        throw new Error('tensor5d() requires shape to have five numbers');
    }
    const inferredShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["inferShape"])(values, dtype);
    if (inferredShape.length !== 5 && inferredShape.length !== 1) {
        throw new Error('tensor5d() requires values to be ' +
            'number[][][][][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor5d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__["makeTensor"])(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor5d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js ***!
  \*****************************************************************/
/*! exports provided: tensor6d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensor6d", function() { return tensor6d; });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor6d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor6d(values, shape, dtype) {
    Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertNonNull"])(values);
    if (shape != null && shape.length !== 6) {
        throw new Error('tensor6d() requires shape to have six numbers');
    }
    const inferredShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__["inferShape"])(values, dtype);
    if (inferredShape.length !== 6 && inferredShape.length !== 1) {
        throw new Error('tensor6d() requires values to be number[][][][][][] or ' +
            'flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor6d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    shape = shape ||
        inferredShape;
    return Object(_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__["makeTensor"])(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor6d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js ***!
  \************************************************************************/
/*! exports provided: makeTensor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeTensor", function() { return makeTensor; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/** This is shared code across all tensor creation methods. */
function makeTensor(values, shape, inferredShape, dtype) {
    if (dtype == null) {
        dtype = Object(_util__WEBPACK_IMPORTED_MODULE_1__["inferDtype"])(values);
    }
    if (dtype === 'complex64') {
        throw new Error(`Cannot construct a complex64 tensor directly. ` +
            `Please use tf.complex(real, imag).`);
    }
    if (!Object(_util__WEBPACK_IMPORTED_MODULE_1__["isTypedArray"])(values) && !Array.isArray(values) &&
        typeof values !== 'number' && typeof values !== 'boolean' &&
        typeof values !== 'string') {
        throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +
            'an array of numbers/booleans/strings, or a TypedArray');
    }
    if (shape != null) {
        Object(_util__WEBPACK_IMPORTED_MODULE_1__["assertNonNegativeIntegerDimensions"])(shape);
        const providedSize = Object(_util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"])(shape);
        const inferredSize = Object(_util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"])(inferredShape);
        Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` +
            `${providedSize} values but has ${inferredSize}`);
        for (let i = 0; i < inferredShape.length; ++i) {
            const inferred = inferredShape[i];
            const flatDimsDontMatch = i === inferredShape.length - 1 ?
                inferred !== Object(_util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"])(shape.slice(i)) :
                true;
            Object(_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` +
                `(${inferredShape}) does not match the provided ` +
                `shape (${shape}). `);
        }
    }
    if (!Object(_util__WEBPACK_IMPORTED_MODULE_1__["isTypedArray"])(values) && !Array.isArray(values)) {
        values = [values];
    }
    shape = shape || inferredShape;
    values = dtype !== 'string' ?
        Object(_util__WEBPACK_IMPORTED_MODULE_1__["toTypedArray"])(values, dtype) :
        Object(_util__WEBPACK_IMPORTED_MODULE_1__["flatten"])(values, [], true);
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensor(values, shape, dtype);
}
//# sourceMappingURL=tensor_ops_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js ***!
  \*************************************************************/
/*! exports provided: tile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tile", function() { return tile; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Construct a tensor by repeating it the number of times given by reps.
 *
 * This operation creates a new tensor by replicating `input` `reps`
 * times. The output tensor's i'th dimension has `input.shape[i] *
 * reps[i]` elements, and the values of `input` are replicated
 * `reps[i]` times along the i'th dimension. For example, tiling
 * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 *
 * a.tile([2]).print();    // or a.tile([2])
 * ```
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.tile([1, 2]).print();  // or a.tile([1, 2])
 * ```
 * @param x The tensor to tile.
 * @param reps Determines the number of replications per dimension.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function tile_(x, reps) {
    const parseAs = null;
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'tile', parseAs);
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` +
        `must match length of reps ${reps}.`);
    const forward = (backend, save) => {
        const res = backend.tile($x, reps);
        save([$x]);
        return res;
    };
    const inputsToSave = [$x];
    const inputs = { x: $x };
    const attrs = { reps };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Tile"], attrs, inputsToSave);
}
const tile = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ tile_ });
//# sourceMappingURL=tile.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js ***!
  \*************************************************************/
/*! exports provided: topk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "topk", function() { return topk; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Finds the values and indices of the `k` largest entries along the last
 * dimension.
 *
 * If the input is a vector (rank=1), finds the k largest entries in the vector
 * and outputs their values and indices as vectors. Thus values[j] is the j-th
 * largest entry in input, and its index is indices[j].
 * For higher rank inputs, computes the top k entries along the last dimension.
 *
 * If two elements are equal, the lower-index element appears first.
 *
 * ```js
 * const a = tf.tensor2d([[1, 5], [4, 3]]);
 * const {values, indices} = tf.topk(a);
 * values.print();
 * indices.print();
 * ```
 * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
 * @param k Number of top elements to look for along the last dimension.
 * @param sorted If true, the resulting `k` elements will be sorted by the
 *     values in descending order.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function topk_(x, k = 1, sorted = true) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'topk');
    if ($x.rank === 0) {
        throw new Error('topk() expects the input to be of rank 1 or higher');
    }
    const lastDim = $x.shape[$x.shape.length - 1];
    if (k > lastDim) {
        throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` +
            `but got ${k}`);
    }
    const inputs = { x: $x };
    const attrs = { k, sorted };
    const [values, indices] = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(b => b.topk($x, k, sorted), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["TopK"], attrs);
    return { values, indices };
}
const topk = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ topk_ });
//# sourceMappingURL=topk.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js ***!
  \******************************************************************/
/*! exports provided: transpose */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
 *
 * The returned `tf.Tensor`'s dimension `i` will correspond to the input
 * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
 * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
 * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
 *
 * a.transpose().print();  // or tf.transpose(a)
 * ```
 *
 * @param x The tensor to transpose.
 * @param perm The permutation of the dimensions of a.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function transpose_(x, perm) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'transpose');
    if (perm == null) {
        perm = $x.shape.map((s, i) => i).reverse();
    }
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"]($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +
        `must match length of perm ${perm}.`);
    perm.forEach(axis => {
        _util__WEBPACK_IMPORTED_MODULE_3__["assert"](axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +
            ` but got ${perm}`);
    });
    if ($x.rank <= 1) {
        return $x.clone();
    }
    const inputs = { x: $x };
    const attrs = { perm };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.transpose($x, perm), inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Transpose"], attrs);
}
const transpose = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ transpose_ });
//# sourceMappingURL=transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js ***!
  \*************************************************************************/
/*! exports provided: truncatedNormal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "truncatedNormal", function() { return truncatedNormal; });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a truncated normal
 * distribution.
 *
 * ```js
 * tf.truncatedNormal([2, 2]).print();
 * ```
 *
 * The generated values follow a normal distribution with specified mean and
 * standard deviation, except that values whose magnitude is more than 2
 * standard deviations from the mean are dropped and re-picked.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output tensor.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === 'bool') {
        throw new Error(`Unsupported data type $ { dtype }`);
    }
    const randGauss = new _rand_util__WEBPACK_IMPORTED_MODULE_2__["MPRandGauss"](mean, stdDev, dtype, true /* truncated */, seed);
    const res = Object(_buffer__WEBPACK_IMPORTED_MODULE_0__["buffer"])(shape, dtype);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = randGauss.nextValue();
    }
    return res.toTensor();
}
const truncatedNormal = Object(_operation__WEBPACK_IMPORTED_MODULE_1__["op"])({ truncatedNormal_ });
//# sourceMappingURL=truncated_normal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js ***!
  \***************************************************************/
/*! exports provided: unique */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unique", function() { return unique; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Finds unique elements along an axis of a tensor.
 *
 * It returns a tensor `values` containing all of the unique elements along the
 * `axis` of the given tensor `x` in the same order that they occur along the
 * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor
 * `indices` the same size as the number of the elements in `x` along the `axis`
 * dimension. It contains the index in the unique output `values`.
 *
 * ```js
 * // A 1-D tensor
 * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);
 * const {values, indices} = tf.unique(a);
 * values.print();   // [1, 2, 4, 7, 8,]
 * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=0
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 0)
 * values.print();   // [[1, 0, 0],
 *                   //  [2, 0, 0]]
 * indices.print();  // [0, 0, 1]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=1
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 1)
 * values.print();   // [[1, 0],
 *                   //  [1, 0],
 *                   //  [2, 0]]
 * indices.print();  // [0, 1, 1]
 * ```
 * @param x A tensor (int32, string, bool).
 * @param axis The axis of the tensor to find the unique elements.
 * @returns [uniqueElements, indices] (see above for details)
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function unique_(x, axis = 0) {
    // x can be of any dtype, thus null as the last argument.
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'unique', null);
    Object(_util__WEBPACK_IMPORTED_MODULE_3__["assert"])($x.rank > 0, () => 'The input tensor must be at least 1D');
    const inputs = { x: $x };
    const attrs = { axis };
    const [values, indices] = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__["Unique"], inputs, attrs);
    return { values, indices };
}
const unique = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ unique_ });
//# sourceMappingURL=unique.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js ***!
  \*****************************************************************************/
/*! exports provided: unsortedSegmentSum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsortedSegmentSum", function() { return unsortedSegmentSum; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the sum along segments of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
 * const numSegments = 3;
 *
 * x.unsortedSegmentSum(segmentIds, numSegments).print()
 * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
 * ```
 * @param x The `tf.Tensor` that will be summed along its segments.
 * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
 * dimension along the `axis`.  Maps each element of `x` to a segment.
 * @param numSegments The number of distinct `segmentIds`.
 *
 * @doc {heading: 'Operations', subheading: 'Segment'}
 */
function unsortedSegmentSum_(x, segmentIds, numSegments) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'unsortedSegmentSum');
    const $segmentIds = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');
    Object(_util__WEBPACK_IMPORTED_MODULE_3__["assert"])(Object(_util__WEBPACK_IMPORTED_MODULE_3__["isInt"])(numSegments), () => 'numSegments must be of dtype int');
    const inputs = { x: $x, segmentIds: $segmentIds };
    const attrs = { numSegments };
    const forward = (backend, save) => {
        const res = backend.unsortedSegmentSum($x, $segmentIds, numSegments);
        save([$segmentIds]);
        return res;
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["UnsortedSegmentSum"], attrs);
}
const unsortedSegmentSum = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ unsortedSegmentSum_ });
//# sourceMappingURL=unsorted_segment_sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js ***!
  \****************************************************************/
/*! exports provided: unstack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unstack", function() { return unstack; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * tf.unstack(a).forEach(tensor => tensor.print());
 * ```
 *
 * @param x A tensor object.
 * @param axis The axis to unstack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function unstack_(x, axis = 0) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'unstack');
    _util__WEBPACK_IMPORTED_MODULE_3__["assert"](axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);
    if (axis < 0) {
        axis += $x.shape.length;
    }
    const inputs = { value: $x };
    const attrs = { axis };
    const forward = (backend) => backend.unstack($x, axis);
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["Unpack"], attrs);
}
const unstack = Object(_operation__WEBPACK_IMPORTED_MODULE_4__["op"])({ unstack_ });
//# sourceMappingURL=unstack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/variable.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/variable.js ***!
  \*****************************************************************/
/*! exports provided: variable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "variable", function() { return variable; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new variable with the provided initial value.
 * ```js
 * const x = tf.variable(tf.tensor([1, 2, 3]));
 * x.assign(tf.tensor([4, 5, 6]));
 *
 * x.print();
 * ```
 *
 * @param initialValue Initial value for the tensor.
 * @param trainable If true, optimizers are allowed to update it.
 * @param name Name of the variable. Defaults to a unique id.
 * @param dtype If set, initialValue will be converted to the given type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function variable(initialValue, trainable = true, name, dtype) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeVariable(initialValue, trainable, name, dtype);
}
//# sourceMappingURL=variable.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/where.js ***!
  \**************************************************************/
/*! exports provided: where */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "where", function() { return where; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _broadcast_to__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the elements, either `a` or `b` depending on the `condition`.
 *
 * If the condition is true, select from `a`, otherwise select from `b`.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const a = tf.tensor1d([1 , 2, 3]);
 * const b = tf.tensor1d([-1, -2, -3]);
 *
 * a.where(cond, b).print();
 * ```
 *
 * @param condition The input condition. Must be of dtype bool.
 * @param a If `condition` is rank 1, `a` may have a higher rank but
 *     its first dimension must match the size of `condition`.
 * @param b A tensor with the same dtype as `a` and with shape that is
 *     compatible with `a`.
 * @return A tensor with same dtype as `a` and `b`, and shape that is
 *     broadcastable from `a` and `b`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function where_(condition, a, b) {
    const $a = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(a, 'a', 'where');
    const $b = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(b, 'b', 'where');
    const $condition = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(condition, 'condition', 'where', 'bool');
    // TODO: move this logic to forward function when the broadcastTo op is
    // implemented in WASM.
    // Find the broadcastable shape for $a and $b.
    const broadcastShape = Object(_broadcast_util__WEBPACK_IMPORTED_MODULE_5__["assertAndGetBroadcastShape"])($a.shape, $b.shape);
    const $broadcastedA = Object(_broadcast_to__WEBPACK_IMPORTED_MODULE_4__["broadcastTo"])($a, broadcastShape);
    const $broadcastedB = Object(_broadcast_to__WEBPACK_IMPORTED_MODULE_4__["broadcastTo"])($b, broadcastShape);
    if ($condition.rank === 1) {
        // If condition rank is 1, then the first dimension must match the size of
        // condition.
        Object(_util__WEBPACK_IMPORTED_MODULE_3__["assert"])($condition.shape[0] === $a.shape[0], () => 'The first dimension of `a` must match the size of `condition`.');
    }
    if ($condition.rank !== 1) {
        // A must have the same shape as condition.
        Object(_util__WEBPACK_IMPORTED_MODULE_3__["assertShapesMatch"])($condition.shape, $broadcastedB.shape, 'Error in where: ');
    }
    const forward = (backend, save) => {
        const res = backend.select($condition, $broadcastedA, $broadcastedB);
        save([$condition]);
        return res;
    };
    const inputs = {
        condition: $condition,
        t: $broadcastedA,
        e: $broadcastedB
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(forward, inputs, null /* gradient */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["SelectV2"]);
}
const where = Object(_operation__WEBPACK_IMPORTED_MODULE_6__["op"])({ where_ });
//# sourceMappingURL=where.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js ***!
  \********************************************************************/
/*! exports provided: whereAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whereAsync", function() { return whereAsync; });
/* harmony import */ var _backends_where_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../backends/where_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Returns the coordinates of true elements of condition.
 *
 * The coordinates are returned in a 2-D tensor where the first dimension (rows)
 * represents the number of true elements, and the second dimension (columns)
 * represents the coordinates of the true elements. Keep in mind, the shape of
 * the output tensor can vary depending on how many true values there are in
 * input. Indices are output in row-major order. The resulting tensor has the
 * shape `[numTrueElems, condition.rank]`.
 *
 * This is analogous to calling the python `tf.where(cond)` without an x or y.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const result = await tf.whereAsync(cond);
 * result.print();
 * ```
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
async function whereAsync_(condition) {
    const $condition = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["convertToTensor"])(condition, 'condition', 'whereAsync', 'bool');
    const vals = await $condition.data();
    const res = Object(_backends_where_impl__WEBPACK_IMPORTED_MODULE_0__["whereImpl"])($condition.shape, vals);
    if (condition !== $condition) {
        $condition.dispose();
    }
    return res;
}
const whereAsync = whereAsync_;
//# sourceMappingURL=where_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js ***!
  \**************************************************************/
/*! exports provided: zeros */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zeros", function() { return zeros; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with all elements set to 0.
 *
 * ```js
 * tf.zeros([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Can
 *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zeros(shape, dtype = 'float32') {
    if (dtype === 'complex64') {
        const real = zeros(shape, 'float32');
        const imag = zeros(shape, 'float32');
        return Object(_complex__WEBPACK_IMPORTED_MODULE_2__["complex"])(real, imag);
    }
    const values = Object(_util__WEBPACK_IMPORTED_MODULE_1__["makeZerosTypedArray"])(Object(_util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"])(shape), dtype);
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensor(values, shape, dtype);
}
//# sourceMappingURL=zeros.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js ***!
  \*******************************************************************/
/*! exports provided: zerosLike */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zerosLike", function() { return zerosLike; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.zerosLike(x).print();
 * ```
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zerosLike_(x) {
    const $x = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__["convertToTensor"])(x, 'x', 'zerosLike');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].runKernelFunc(backend => backend.zerosLike($x), inputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_1__["ZerosLike"]);
}
const zerosLike = Object(_operation__WEBPACK_IMPORTED_MODULE_3__["op"])({ zerosLike_ });
//# sourceMappingURL=zeros_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js ***!
  \**********************************************************************************/
/*! exports provided: AdadeltaOptimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdadeltaOptimizer", function() { return AdadeltaOptimizer; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/** @doclink Optimizer */
class AdadeltaOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_9__["Optimizer"] {
    constructor(learningRate, rho, epsilon = null) {
        super();
        this.learningRate = learningRate;
        this.rho = rho;
        this.epsilon = epsilon;
        this.accumulatedGrads = [];
        this.accumulatedUpdates = [];
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backend.epsilon();
        }
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[name];
            const trainable = false;
            if (this.accumulatedGrads[i] == null) {
                this.accumulatedGrads[i] = {
                    originalName: `${name}/accum_grad`,
                    variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_7__["zerosLike"])(value).variable(trainable))
                };
            }
            if (this.accumulatedUpdates[i] == null) {
                this.accumulatedUpdates[i] = {
                    originalName: `${name}/accum_var`,
                    variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_7__["zerosLike"])(value).variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            const accumulatedUpdate = this.accumulatedUpdates[i].variable;
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
                const newAccumulatedGrad = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(accumulatedGrad, this.rho), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_6__["square"])(gradient), 1 - this.rho));
                const updates = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(Object(_ops_ops__WEBPACK_IMPORTED_MODULE_5__["sqrt"])(Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(accumulatedUpdate, this.epsilon)), Object(_ops_ops__WEBPACK_IMPORTED_MODULE_5__["sqrt"])(Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(accumulatedGrad, this.epsilon))), gradient);
                const newAccumulatedUpdate = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(accumulatedUpdate, this.rho), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_6__["square"])(updates), 1 - this.rho));
                accumulatedGrad.assign(newAccumulatedGrad);
                accumulatedUpdate.assign(newAccumulatedUpdate);
                const newValue = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(updates, -this.learningRate), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedUpdates != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedGrads.map(v => v.variable));
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedUpdates.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];
        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedGrads =
            weightValues.slice(0, variableCount).map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedUpdates =
            weightValues.slice(variableCount, variableCount * 2)
                .map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'rho': this.rho,
            'epsilon': this.epsilon
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['rho'], config['epsilon']);
    }
}
/** @nocollapse */
AdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.
Object(_serialization__WEBPACK_IMPORTED_MODULE_8__["registerClass"])(AdadeltaOptimizer);
//# sourceMappingURL=adadelta_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js ***!
  \*********************************************************************************/
/*! exports provided: AdagradOptimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdagradOptimizer", function() { return AdagradOptimizer; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_fill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/fill */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/** @doclink Optimizer */
class AdagradOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_9__["Optimizer"] {
    constructor(learningRate, initialAccumulatorValue = 0.1) {
        super();
        this.learningRate = learningRate;
        this.initialAccumulatorValue = initialAccumulatorValue;
        this.accumulatedGrads = [];
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[name];
            if (this.accumulatedGrads[i] == null) {
                const trainable = false;
                this.accumulatedGrads[i] = {
                    originalName: `${name}/accumulator`,
                    variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_fill__WEBPACK_IMPORTED_MODULE_4__["fill"])(value.shape, this.initialAccumulatorValue)
                        .variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
                const newAccumulatedGrad = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(accumulatedGrad, Object(_ops_square__WEBPACK_IMPORTED_MODULE_7__["square"])(gradient));
                accumulatedGrad.assign(newAccumulatedGrad);
                const newValue = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_5__["mul"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(gradient, Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_6__["sqrt"])(Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(newAccumulatedGrad, _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backend.epsilon()))), -this.learningRate), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedGrads != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedGrads.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'initialAccumulatorValue': this.initialAccumulatorValue,
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['initialAccumulatorValue']);
    }
}
/** @nocollapse */
AdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.
Object(_serialization__WEBPACK_IMPORTED_MODULE_8__["registerClass"])(AdagradOptimizer);
//# sourceMappingURL=adagrad_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js ***!
  \******************************************************************************/
/*! exports provided: AdamOptimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdamOptimizer", function() { return AdamOptimizer; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













class AdamOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_12__["Optimizer"] {
    constructor(learningRate, beta1, beta2, epsilon = null) {
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.accumulatedFirstMoment = [];
        this.accumulatedSecondMoment = [];
        Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
            // accB* will be updated by batch.
            this.accBeta1 = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(beta1).variable();
            this.accBeta2 = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_6__["scalar"])(beta2).variable();
        });
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backend.epsilon();
        }
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ?
            variableGradients.map(v => v.name) :
            Object.keys(variableGradients);
        Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
            const oneMinusAccBeta1 = Object(_ops_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(1, this.accBeta1);
            const oneMinusAccBeta2 = Object(_ops_sub__WEBPACK_IMPORTED_MODULE_9__["sub"])(1, this.accBeta2);
            varNames.forEach((name, i) => {
                const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) {
                    this.accumulatedFirstMoment[i] = {
                        originalName: `${name}/m`,
                        variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_10__["zerosLike"])(value).variable(trainable))
                    };
                }
                if (this.accumulatedSecondMoment[i] == null) {
                    this.accumulatedSecondMoment[i] = {
                        originalName: `${name}/v`,
                        variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_10__["zerosLike"])(value).variable(trainable))
                    };
                }
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const secondMoment = this.accumulatedSecondMoment[i].variable;
                const newFirstMoment = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(firstMoment, this.beta1), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(gradient, 1 - this.beta1));
                const newSecondMoment = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(secondMoment, this.beta2), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_8__["square"])(gradient), 1 - this.beta2));
                const biasCorrectedFirstMoment = Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(newFirstMoment, oneMinusAccBeta1);
                const biasCorrectedSecondMoment = Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(newSecondMoment, oneMinusAccBeta2);
                firstMoment.assign(newFirstMoment);
                secondMoment.assign(newSecondMoment);
                const newValue = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(biasCorrectedFirstMoment, Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_7__["sqrt"])(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);
                value.assign(newValue);
            });
            this.accBeta1.assign(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(this.accBeta1, this.beta1));
            this.accBeta2.assign(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(this.accBeta2, this.beta2));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.accBeta2.dispose();
        if (this.accumulatedFirstMoment != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedFirstMoment.map(v => v.variable));
        }
        if (this.accumulatedSecondMoment != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedSecondMoment.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
            this.accBeta1.assign(Object(_ops_pow__WEBPACK_IMPORTED_MODULE_5__["pow"])(this.beta1, this.iterations_ + 1));
            this.accBeta2.assign(Object(_ops_pow__WEBPACK_IMPORTED_MODULE_5__["pow"])(this.beta2, this.iterations_ + 1));
        });
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedFirstMoment =
            weightValues.slice(0, variableCount).map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedSecondMoment =
            weightValues.slice(variableCount, variableCount * 2)
                .map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'beta1': this.beta1,
            'beta2': this.beta2,
            'epsilon': this.epsilon,
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);
    }
}
/** @nocollapse */
AdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.
Object(_serialization__WEBPACK_IMPORTED_MODULE_11__["registerClass"])(AdamOptimizer);
//# sourceMappingURL=adam_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js ***!
  \********************************************************************************/
/*! exports provided: AdamaxOptimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdamaxOptimizer", function() { return AdamaxOptimizer; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_abs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












class AdamaxOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_11__["Optimizer"] {
    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.decay = decay;
        this.accumulatedFirstMoment = [];
        this.accumulatedWeightedInfNorm = [];
        Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
            this.iteration = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_7__["scalar"])(0).variable();
            this.accBeta1 = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_7__["scalar"])(beta1).variable();
        });
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backend.epsilon();
        }
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
            const oneMinusAccBeta1 = Object(_ops_sub__WEBPACK_IMPORTED_MODULE_8__["sub"])(1, this.accBeta1);
            const lr = Object(_ops_div__WEBPACK_IMPORTED_MODULE_4__["div"])(-this.learningRate, Object(_ops_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(this.iteration, this.decay), 1));
            variableNames.forEach((name, i) => {
                const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) {
                    this.accumulatedFirstMoment[i] = {
                        originalName: `${name}/m`,
                        variable: Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_9__["zerosLike"])(value).variable(trainable)
                    };
                }
                if (this.accumulatedWeightedInfNorm[i] == null) {
                    this.accumulatedWeightedInfNorm[i] = {
                        originalName: `${name}/v`,
                        variable: Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_9__["zerosLike"])(value).variable(trainable)
                    };
                }
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;
                const newFirstMoment = Object(_ops_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(firstMoment, this.beta1), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(gradient, 1 - this.beta1));
                const ut0 = Object(_ops_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(weightedInfNorm, this.beta2);
                const ut1 = Object(_ops_abs__WEBPACK_IMPORTED_MODULE_2__["abs"])(gradient);
                const newWeightedInfNorm = Object(_ops_maximum__WEBPACK_IMPORTED_MODULE_5__["maximum"])(ut0, ut1);
                firstMoment.assign(newFirstMoment);
                weightedInfNorm.assign(newWeightedInfNorm);
                const newValue = Object(_ops_add__WEBPACK_IMPORTED_MODULE_3__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(Object(_ops_div__WEBPACK_IMPORTED_MODULE_4__["div"])(lr, oneMinusAccBeta1), Object(_ops_div__WEBPACK_IMPORTED_MODULE_4__["div"])(newFirstMoment, Object(_ops_add__WEBPACK_IMPORTED_MODULE_3__["add"])(newWeightedInfNorm, this.epsilon))), value);
                value.assign(newValue);
            });
            this.iteration.assign(Object(_ops_add__WEBPACK_IMPORTED_MODULE_3__["add"])(this.iteration, 1));
            this.accBeta1.assign(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_6__["mul"])(this.accBeta1, this.beta1));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.iteration.dispose();
        if (this.accumulatedFirstMoment != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedFirstMoment.map(v => v.variable));
        }
        if (this.accumulatedWeightedInfNorm != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedWeightedInfNorm.map(v => v.variable));
        }
    }
    async getWeights() {
        throw new Error('getWeights() is not implemented for Adamax yet.');
    }
    async setWeights(weightValues) {
        throw new Error('setWeights() is not implemented for Adamax yet.');
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'beta1': this.beta1,
            'beta2': this.beta2,
            'epsilon': this.epsilon,
            'decay': this.decay
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);
    }
}
/** @nocollapse */
AdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.
Object(_serialization__WEBPACK_IMPORTED_MODULE_10__["registerClass"])(AdamaxOptimizer);
//# sourceMappingURL=adamax_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js ***!
  \**********************************************************************************/
/*! exports provided: MomentumOptimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MomentumOptimizer", function() { return MomentumOptimizer; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _sgd_optimizer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/** @doclink Optimizer */
class MomentumOptimizer extends _sgd_optimizer__WEBPACK_IMPORTED_MODULE_7__["SGDOptimizer"] {
    constructor(learningRate, momentum, useNesterov = false) {
        super(learningRate);
        this.learningRate = learningRate;
        this.momentum = momentum;
        this.useNesterov = useNesterov;
        this.accumulations = [];
        this.m = Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_4__["scalar"])(this.momentum);
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[name];
            if (this.accumulations[i] == null) {
                const trainable = false;
                this.accumulations[i] = {
                    originalName: `${name}/momentum`,
                    variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__["zerosLike"])(value).variable(trainable))
                };
            }
            const accumulation = this.accumulations[i].variable;
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
                let newValue;
                const newAccumulation = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(this.m, accumulation), gradient);
                if (this.useNesterov) {
                    newValue = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(this.c, Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(gradient, Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(newAccumulation, this.m))), value);
                }
                else {
                    newValue = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(this.c, newAccumulation), value);
                }
                accumulation.assign(newAccumulation);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        this.m.dispose();
        if (this.accumulations != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulations.map(v => v.variable));
        }
    }
    /**
     * Sets the momentum of the optimizer.
     *
     * @param momentum
     */
    setMomentum(momentum) {
        this.momentum = momentum;
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [await this.saveIterations()].concat(this.accumulations.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulations = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'momentum': this.momentum,
            'useNesterov': this.useNesterov
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['momentum'], config['useNesterov']);
    }
}
/** @nocollapse */
MomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.
Object(_serialization__WEBPACK_IMPORTED_MODULE_6__["registerClass"])(MomentumOptimizer);
//# sourceMappingURL=momentum_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js ***!
  \*************************************************************************/
/*! exports provided: Optimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Optimizer", function() { return Optimizer; });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */
class Optimizer extends _serialization__WEBPACK_IMPORTED_MODULE_3__["Serializable"] {
    /**
     * Executes `f()` and minimizes the scalar output of `f()` by computing
     * gradients of y with respect to the list of trainable variables provided by
     * `varList`. If no list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to minimize.
     * @param returnCost Whether to return the scalar cost value produced by
     * executing `f()`.
     * @param varList An optional list of variables to update. If specified, only
     * the trainable variables in varList will be updated by minimize. Defaults to
     * all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */
    minimize(f, returnCost = false, varList) {
        const { value, grads } = this.computeGradients(f, varList);
        if (varList != null) {
            const gradArray = varList.map(v => ({ name: v.name, tensor: grads[v.name] }));
            this.applyGradients(gradArray);
        }
        else {
            this.applyGradients(grads);
        }
        // Dispose gradients.
        Object(_globals__WEBPACK_IMPORTED_MODULE_0__["dispose"])(grads);
        if (returnCost) {
            return value;
        }
        else {
            value.dispose();
            return null;
        }
    }
    /**
     * The number of iterations that this optimizer instance has been invoked for.
     */
    get iterations() {
        if (this.iterations_ == null) {
            this.iterations_ = 0;
        }
        return this.iterations_;
    }
    incrementIterations() {
        this.iterations_ = this.iterations + 1;
    }
    /**
     * Executes f() and computes the gradient of the scalar output of f() with
     * respect to the list of trainable variables provided by `varList`. If no
     * list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to use for computing
     * gradients with respect to variables.
     * @param varList An optional list of variables to compute gradients with
     * respect to. If specified, only the trainable variables in varList will have
     * gradients computed with respect to. Defaults to all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */
    computeGradients(f, varList) {
        return Object(_gradients__WEBPACK_IMPORTED_MODULE_1__["variableGrads"])(f, varList);
    }
    /**
     * Dispose the variables (if any) owned by this optimizer instance.
     */
    dispose() {
        if (this.iterations_ != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_0__["dispose"])(this.iterations_);
        }
    }
    async saveIterations() {
        if (this.iterations_ == null) {
            this.iterations_ = 0;
        }
        return {
            name: 'iter',
            // TODO(cais): Use 'int64' type when available.
            tensor: Object(_ops_ops__WEBPACK_IMPORTED_MODULE_2__["scalar"])(this.iterations_, 'int32')
        };
    }
    async getWeights() {
        throw new Error('getWeights() is not implemented for this optimizer yet.');
    }
    async setWeights(weightValues) {
        throw new Error(`setWeights() is not implemented for this optimizer class ` +
            `${this.getClassName()}`);
    }
    /**
     * Extract the first element of the weight values and set it
     * as the iterations counter variable of this instance of optimizer.
     *
     * @param weightValues
     * @returns Weight values with the first element consumed and excluded.
     */
    async extractIterations(weightValues) {
        this.iterations_ = (await weightValues[0].tensor.data())[0];
        return weightValues.slice(1);
    }
}
Object.defineProperty(Optimizer, Symbol.hasInstance, {
    value: (instance) => {
        return instance.minimize != null && instance.computeGradients != null &&
            instance.applyGradients != null;
    }
});
//# sourceMappingURL=optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js ***!
  \**************************************************************************************/
/*! exports provided: OptimizerConstructors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptimizerConstructors", function() { return OptimizerConstructors; });
/* harmony import */ var _adadelta_optimizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adadelta_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js");
/* harmony import */ var _adagrad_optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adagrad_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js");
/* harmony import */ var _adam_optimizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adam_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js");
/* harmony import */ var _adamax_optimizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adamax_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js");
/* harmony import */ var _momentum_optimizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./momentum_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js");
/* harmony import */ var _rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rmsprop_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js");
/* harmony import */ var _sgd_optimizer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







class OptimizerConstructors {
    /**
     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
     *
     * ```js
     * // Fit a quadratic function by learning the coefficients a, b, c.
     * const xs = tf.tensor1d([0, 1, 2, 3]);
     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
     *
     * const a = tf.scalar(Math.random()).variable();
     * const b = tf.scalar(Math.random()).variable();
     * const c = tf.scalar(Math.random()).variable();
     *
     * // y = a * x^2 + b * x + c.
     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
     * const loss = (pred, label) => pred.sub(label).square().mean();
     *
     * const learningRate = 0.01;
     * const optimizer = tf.train.sgd(learningRate);
     *
     * // Train the model.
     * for (let i = 0; i < 10; i++) {
     *   optimizer.minimize(() => loss(f(xs), ys));
     * }
     *
     * // Make predictions.
     * console.log(
     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
     * const preds = f(xs).dataSync();
     * preds.forEach((pred, i) => {
     *   console.log(`x: ${i}, pred: ${pred}`);
     * });
     * ```
     *
     * @param learningRate The learning rate to use for the SGD algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static sgd(learningRate) {
        return new _sgd_optimizer__WEBPACK_IMPORTED_MODULE_6__["SGDOptimizer"](learningRate);
    }
    /**
     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
     * descent.
     *
     * See
     * [http://proceedings.mlr.press/v28/sutskever13.pdf](
     * http://proceedings.mlr.press/v28/sutskever13.pdf)
     *
     * @param learningRate The learning rate to use for the Momentum gradient
     * descent algorithm.
     * @param momentum The momentum to use for the momentum gradient descent
     * algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static momentum(learningRate, momentum, useNesterov = false) {
        return new _momentum_optimizer__WEBPACK_IMPORTED_MODULE_4__["MomentumOptimizer"](learningRate, momentum, useNesterov);
    }
    /**
     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
     * descent. This implementation uses plain momentum and is not centered
     * version of RMSProp.
     *
     * See
     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
     *
     * @param learningRate The learning rate to use for the RMSProp gradient
     * descent algorithm.
     * @param decay The discounting factor for the history/coming gradient.
     * @param momentum The momentum to use for the RMSProp gradient descent
     * algorithm.
     * @param epsilon Small value to avoid zero denominator.
     * @param centered If true, gradients are normalized by the estimated
     * variance of the gradient.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {
        return new _rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_5__["RMSPropOptimizer"](learningRate, decay, momentum, epsilon, centered);
    }
    /**
     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adam gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {
        return new _adam_optimizer__WEBPACK_IMPORTED_MODULE_2__["AdamOptimizer"](learningRate, beta1, beta2, epsilon);
    }
    /**
     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
     *
     * @param learningRate The learning rate to use for the Adadelta gradient
     * descent algorithm.
     * @param rho The learning rate decay over each update.
     * @param epsilon A constant epsilon used to better condition the grad
     * update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adadelta(learningRate = .001, rho = .95, epsilon = null) {
        return new _adadelta_optimizer__WEBPACK_IMPORTED_MODULE_0__["AdadeltaOptimizer"](learningRate, rho, epsilon);
    }
    /**
     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adamax gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     * @param decay The learning rate decay over each update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {
        return new _adamax_optimizer__WEBPACK_IMPORTED_MODULE_3__["AdamaxOptimizer"](learningRate, beta1, beta2, epsilon, decay);
    }
    /**
     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
     * See
     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
     * or
     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
     *
     * @param learningRate The learning rate to use for the Adagrad gradient
     * descent algorithm.
     * @param initialAccumulatorValue Starting value for the accumulators, must be
     * positive.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adagrad(learningRate, initialAccumulatorValue = 0.1) {
        return new _adagrad_optimizer__WEBPACK_IMPORTED_MODULE_1__["AdagradOptimizer"](learningRate, initialAccumulatorValue);
    }
}
//# sourceMappingURL=optimizer_constructors.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js ***!
  \*********************************************************************************/
/*! exports provided: RMSPropOptimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RMSPropOptimizer", function() { return RMSPropOptimizer; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/** @doclink Optimizer */
class RMSPropOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_10__["Optimizer"] {
    constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {
        super();
        this.learningRate = learningRate;
        this.decay = decay;
        this.momentum = momentum;
        this.epsilon = epsilon;
        this.accumulatedMeanSquares = [];
        this.accumulatedMoments = [];
        this.accumulatedMeanGrads = [];
        this.centered = centered;
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backend.epsilon();
        }
        if (learningRate == null) {
            throw new Error(`learningRate for RMSPropOptimizer must be defined.`);
        }
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[name];
            const trainable = false;
            if (this.accumulatedMeanSquares[i] == null) {
                this.accumulatedMeanSquares[i] = {
                    originalName: `${name}/rms`,
                    variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_8__["zerosLike"])(value).variable(trainable))
                };
            }
            if (this.accumulatedMoments[i] == null) {
                this.accumulatedMoments[i] = {
                    originalName: `${name}/momentum`,
                    variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_8__["zerosLike"])(value).variable(trainable))
                };
            }
            if (this.accumulatedMeanGrads[i] == null && this.centered) {
                this.accumulatedMeanGrads[i] = {
                    originalName: `${name}/mg`,
                    variable: Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => Object(_ops_zeros_like__WEBPACK_IMPORTED_MODULE_8__["zerosLike"])(value).variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;
            const accumulatedMoments = this.accumulatedMoments[i].variable;
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
                const newAccumulatedMeanSquare = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(accumulatedMeanSquare, this.decay), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_6__["square"])(gradient), 1 - this.decay));
                if (this.centered) {
                    const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;
                    // Centered gradient
                    const newAccumulatedMeanGrad = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(accumulatedMeanGrad, this.decay), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(gradient, 1 - this.decay));
                    const gradContribution = Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(gradient, this.learningRate), Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_5__["sqrt"])(Object(_ops_sub__WEBPACK_IMPORTED_MODULE_7__["sub"])(newAccumulatedMeanSquare, Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_6__["square"])(newAccumulatedMeanGrad), this.epsilon))));
                    const newAccumulatedMoments = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(accumulatedMoments, this.momentum), gradContribution);
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                    accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
                    accumulatedMoments.assign(newAccumulatedMoments);
                    const newValue = Object(_ops_sub__WEBPACK_IMPORTED_MODULE_7__["sub"])(value, newAccumulatedMoments);
                    value.assign(newValue);
                }
                else {
                    // Plain gradient
                    const newAccumulatedMeanSquare = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(accumulatedMeanSquare, this.decay), Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(Object(_ops_square__WEBPACK_IMPORTED_MODULE_6__["square"])(gradient), 1 - this.decay));
                    const newAccumulatedMoments = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(accumulatedMoments, this.momentum), Object(_ops_div__WEBPACK_IMPORTED_MODULE_3__["div"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_4__["mul"])(gradient, this.learningRate), Object(_ops_sqrt__WEBPACK_IMPORTED_MODULE_5__["sqrt"])(Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(newAccumulatedMeanSquare, this.epsilon))));
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                    accumulatedMoments.assign(newAccumulatedMoments);
                    const newValue = Object(_ops_sub__WEBPACK_IMPORTED_MODULE_7__["sub"])(value, newAccumulatedMoments);
                    value.assign(newValue);
                }
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedMeanSquares != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedMeanSquares.map(v => v.variable));
        }
        if (this.accumulatedMeanGrads != null && this.centered) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedMeanGrads.map(v => v.variable));
        }
        if (this.accumulatedMoments != null) {
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["dispose"])(this.accumulatedMoments.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
        if (this.centered) {
            variables.push(...this.accumulatedMeanGrads);
        }
        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
        const trainable = false;
        this.accumulatedMeanSquares =
            weightValues.slice(0, variableCount).map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedMoments =
            weightValues.slice(variableCount, variableCount * 2)
                .map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        if (this.centered) {
            this.accumulatedMeanGrads =
                weightValues.slice(variableCount * 2, variableCount * 3)
                    .map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
        }
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'decay': this.decay,
            'momentum': this.momentum,
            'epsilon': this.epsilon,
            'centered': this.centered
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);
    }
}
/** @nocollapse */
RMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.
Object(_serialization__WEBPACK_IMPORTED_MODULE_9__["registerClass"])(RMSPropOptimizer);
//# sourceMappingURL=rmsprop_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js ***!
  \*****************************************************************************/
/*! exports provided: SGDOptimizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SGDOptimizer", function() { return SGDOptimizer; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/** @doclink Optimizer */
class SGDOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_6__["Optimizer"] {
    constructor(learningRate) {
        super();
        this.learningRate = learningRate;
        this.setLearningRate(learningRate);
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ?
            variableGradients.map(v => v.name) :
            Object.keys(variableGradients);
        varNames.forEach((name, i) => {
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].registeredVariables[name];
            Object(_globals__WEBPACK_IMPORTED_MODULE_1__["tidy"])(() => {
                const newValue = Object(_ops_add__WEBPACK_IMPORTED_MODULE_2__["add"])(Object(_ops_mul__WEBPACK_IMPORTED_MODULE_3__["mul"])(this.c, gradient), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    /**
     * Sets the learning rate of the optimizer.
     */
    setLearningRate(learningRate) {
        this.learningRate = learningRate;
        if (this.c != null) {
            this.c.dispose();
        }
        this.c = Object(_globals__WEBPACK_IMPORTED_MODULE_1__["keep"])(Object(_ops_scalar__WEBPACK_IMPORTED_MODULE_4__["scalar"])(-learningRate));
    }
    dispose() {
        this.c.dispose();
    }
    async getWeights() {
        return [await this.saveIterations()];
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        if (weightValues.length !== 0) {
            throw new Error('SGD optimizer does not have settable weights.');
        }
    }
    getConfig() {
        return { 'learningRate': this.learningRate };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate']);
    }
}
/** @nocollapse */
SGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.
Object(_serialization__WEBPACK_IMPORTED_MODULE_5__["registerClass"])(SGDOptimizer);
//# sourceMappingURL=sgd_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js ***!
  \*******************************************************************************/
/*! exports provided: PlatformBrowser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformBrowser", function() { return PlatformBrowser; });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _io_indexed_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../io/indexed_db */ "./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js");
/* harmony import */ var _io_local_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../io/local_storage */ "./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js");
/* harmony import */ var _io_model_management__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../io/model_management */ "./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





class PlatformBrowser {
    fetch(path, init) {
        return fetch(path, init);
    }
    now() {
        return performance.now();
    }
    encode(text, encoding) {
        if (encoding !== 'utf-8' && encoding !== 'utf8') {
            throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);
        }
        if (this.textEncoder == null) {
            this.textEncoder = new TextEncoder();
        }
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        return new TextDecoder(encoding).decode(bytes);
    }
}
if (Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().get('IS_BROWSER')) {
    Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().setPlatform('browser', new PlatformBrowser());
    // Register LocalStorage IOHandler
    try {
        _io_model_management__WEBPACK_IMPORTED_MODULE_4__["ModelStoreManagerRegistry"].registerManager(_io_local_storage__WEBPACK_IMPORTED_MODULE_3__["BrowserLocalStorage"].URL_SCHEME, new _io_local_storage__WEBPACK_IMPORTED_MODULE_3__["BrowserLocalStorageManager"]());
    }
    catch (err) {
    }
    // Register IndexedDB IOHandler
    try {
        _io_model_management__WEBPACK_IMPORTED_MODULE_4__["ModelStoreManagerRegistry"].registerManager(_io_indexed_db__WEBPACK_IMPORTED_MODULE_2__["BrowserIndexedDB"].URL_SCHEME, new _io_indexed_db__WEBPACK_IMPORTED_MODULE_2__["BrowserIndexedDBManager"]());
    }
    catch (err) {
    }
}
//# sourceMappingURL=platform_browser.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js ***!
  \****************************************************************************/
/*! exports provided: getNodeFetch, resetSystemFetch, setSystemFetch, getSystemFetch, PlatformNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodeFetch", function() { return getNodeFetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetSystemFetch", function() { return resetSystemFetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSystemFetch", function() { return setSystemFetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSystemFetch", function() { return getSystemFetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformNode", function() { return PlatformNode; });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// We are wrapping this within an object so it can be stubbed by Jasmine.
const getNodeFetch = {
    // tslint:disable-next-line:no-require-imports
    importFetch: () => __webpack_require__(/*! node-fetch */ 3)
};
let systemFetch;
// These getters and setters are for testing so we don't export a mutable
// variable.
function resetSystemFetch() {
    systemFetch = null;
}
function setSystemFetch(fetchFn) {
    systemFetch = fetchFn;
}
function getSystemFetch() {
    return systemFetch;
}
class PlatformNode {
    constructor() {
        // tslint:disable-next-line:no-require-imports
        this.util = __webpack_require__(/*! util */ 4);
        // According to the spec, the built-in encoder can do only UTF-8 encoding.
        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
        this.textEncoder = new this.util.TextEncoder();
    }
    fetch(path, requestInits) {
        if (Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().global.fetch != null) {
            return Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().global.fetch(path, requestInits);
        }
        if (systemFetch == null) {
            systemFetch = getNodeFetch.importFetch();
        }
        return systemFetch(path, requestInits);
    }
    now() {
        const time = process.hrtime();
        return time[0] * 1000 + time[1] / 1000000;
    }
    encode(text, encoding) {
        if (encoding !== 'utf-8' && encoding !== 'utf8') {
            throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);
        }
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        if (bytes.length === 0) {
            return '';
        }
        return new this.util.TextDecoder(encoding).decode(bytes);
    }
}
if (Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().get('IS_NODE')) {
    Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().setPlatform('node', new PlatformNode());
}
//# sourceMappingURL=platform_node.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/profiler.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/profiler.js ***!
  \*************************************************************/
/*! exports provided: Profiler, checkComputationForErrors, Logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Profiler", function() { return Profiler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkComputationForErrors", function() { return checkComputationForErrors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class Profiler {
    constructor(backendTimer, logger) {
        this.backendTimer = backendTimer;
        this.logger = logger;
        if (logger == null) {
            this.logger = new Logger();
        }
    }
    profileKernel(kernelName, inputs, f) {
        let outputs;
        const holdResultWrapperFn = () => {
            outputs = f();
        };
        const timer = this.backendTimer.time(holdResultWrapperFn);
        for (let i = 0; i < outputs.length; i++) {
            const output = outputs[i];
            // Dangling promise here because we don't want to propagate up
            // asynchronicity.
            output.data().then(tensorVals => {
                checkComputationForErrors(tensorVals, output.dtype, kernelName);
            });
        }
        const kernelProfile = {
            kernelName,
            outputs,
            inputs,
            timeMs: timer.then(timing => timing.kernelMs),
            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?
                timing.getExtraProfileInfo() :
                '')
        };
        return kernelProfile;
    }
    logKernelProfile(kernelProfile) {
        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;
        outputs.forEach(result => {
            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {
                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
            });
        });
    }
}
function checkComputationForErrors(vals, dtype, kernelName) {
    if (dtype !== 'float32') {
        // Only floating point computations will generate NaN values
        return false;
    }
    for (let i = 0; i < vals.length; i++) {
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            // Throwing custom exception so behavior is testable.
            console.warn(`Found ${num} in the result of '${kernelName}'`);
            return true;
        }
    }
    return false;
}
class Logger {
    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
        const time = typeof timeMs === 'number' ? _util__WEBPACK_IMPORTED_MODULE_0__["rightPad"](`${timeMs}ms`, 9) :
            timeMs['error'];
        const paddedName = _util__WEBPACK_IMPORTED_MODULE_0__["rightPad"](name, 25);
        const rank = result.rank;
        const size = result.size;
        const shape = _util__WEBPACK_IMPORTED_MODULE_0__["rightPad"](result.shape.toString(), 14);
        let inputShapesDescription = '';
        for (const name in inputs) {
            const input = inputs[name];
            if (input != null) {
                // The input might be a non-tensor (e.g HTMLImageElement), in which case
                // we claim the output shape as input shape.
                const inputShape = input.shape || result.shape;
                const inputRank = inputShape.length;
                inputShapesDescription +=
                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;
            }
        }
        console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');
    }
}
//# sourceMappingURL=profiler.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.abs = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["abs"])(this);
};
//# sourceMappingURL=abs.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.acos = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["acos"])(this);
};
//# sourceMappingURL=acos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.acosh = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["acosh"])(this);
};
//# sourceMappingURL=acosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.add = function (b) {
    this.throwIfDisposed();
    return Object(_ops_add__WEBPACK_IMPORTED_MODULE_0__["add"])(this, b);
};
//# sourceMappingURL=add.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.addStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["addStrict"])(this, x);
};
//# sourceMappingURL=add_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_all__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/all */ "./node_modules/@tensorflow/tfjs-core/dist/ops/all.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.all = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_all__WEBPACK_IMPORTED_MODULE_0__["all"])(this, axis, keepDims);
};
//# sourceMappingURL=all.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_any__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/any */ "./node_modules/@tensorflow/tfjs-core/dist/ops/any.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.any = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_any__WEBPACK_IMPORTED_MODULE_0__["any"])(this, axis, keepDims);
};
//# sourceMappingURL=any.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_arg_max__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/arg_max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.argMax = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_arg_max__WEBPACK_IMPORTED_MODULE_0__["argMax"])(this, axis);
};
//# sourceMappingURL=arg_max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_arg_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/arg_min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.argMin = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_arg_min__WEBPACK_IMPORTED_MODULE_0__["argMin"])(this, axis);
};
//# sourceMappingURL=arg_min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/** Converts a `tf.Tensor` to a `tf.Tensor1D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.as1D = function () {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, [this.size]);
};
//# sourceMappingURL=as1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor2D`.
 *
 * @param rows Number of rows in `tf.Tensor2D`.
 * @param columns Number of columns in `tf.Tensor2D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.as2D = function (rows, columns) {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, [rows, columns]);
};
//# sourceMappingURL=as2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor3D`.
 *
 * @param rows Number of rows in `tf.Tensor3D`.
 * @param columns Number of columns in `tf.Tensor3D`.
 * @param depth Depth of `tf.Tensor3D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.as3D = function (rows, columns, depth) {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, [rows, columns, depth]);
};
//# sourceMappingURL=as3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor4D`.
 *
 * @param rows Number of rows in `tf.Tensor4D`.
 * @param columns Number of columns in `tf.Tensor4D`.
 * @param depth Depth of `tf.Tensor4D`.
 * @param depth2 4th dimension of `tf.Tensor4D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.as4D = function (rows, columns, depth, depth2) {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, [rows, columns, depth, depth2]);
};
//# sourceMappingURL=as4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor5D`.
 *
 * @param rows Number of rows in `tf.Tensor5D`.
 * @param columns Number of columns in `tf.Tensor5D`.
 * @param depth Depth of `tf.Tensor5D`.
 * @param depth2 4th dimension of `tf.Tensor5D`.
 * @param depth3 5th dimension of 'tf.Tensor5D'
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.as5D = function (rows, columns, depth, depth2, depth3) {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, [rows, columns, depth, depth2, depth3]);
};
//# sourceMappingURL=as5d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/** Converts a size-1 `tf.Tensor` to a `tf.Scalar`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.asScalar = function () {
    this.throwIfDisposed();
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(this.size === 1, () => 'The array must have only 1 element.');
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, []);
};
//# sourceMappingURL=as_scalar.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * Casts a `tf.Tensor` to a specified dtype.
 *
 * @param dtype Data-type to cast the tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.asType = function (dtype) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["cast"])(this, dtype);
};
//# sourceMappingURL=as_type.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.asin = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["asin"])(this);
};
//# sourceMappingURL=asin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.asinh = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["asinh"])(this);
};
//# sourceMappingURL=asinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.atan = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["atan"])(this);
};
//# sourceMappingURL=atan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_atan2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/atan2 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.atan2 = function (b) {
    this.throwIfDisposed();
    return Object(_ops_atan2__WEBPACK_IMPORTED_MODULE_0__["atan2"])(this, b);
};
//# sourceMappingURL=atan2.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.atanh = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["atanh"])(this);
};
//# sourceMappingURL=atanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_avg_pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {
    this.throwIfDisposed();
    return Object(_ops_avg_pool__WEBPACK_IMPORTED_MODULE_0__["avgPool"])(this, filterSize, strides, pad, dimRoundingMode);
};
//# sourceMappingURL=avg_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js ***!
  \*****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.batchToSpaceND = function (blockShape, crops) {
    this.throwIfDisposed();
    return Object(_ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_0__["batchToSpaceND"])(this, blockShape, crops);
};
//# sourceMappingURL=batch_to_space_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_batchnorm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.batchNorm = function (mean, variance, offset, scale, varianceEpsilon) {
    this.throwIfDisposed();
    return Object(_ops_batchnorm__WEBPACK_IMPORTED_MODULE_0__["batchNorm"])(this, mean, variance, offset, scale, varianceEpsilon);
};
//# sourceMappingURL=batchnorm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js ***!
  \************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_broadcast_to__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.broadcastTo = function (shape) {
    this.throwIfDisposed();
    return Object(_ops_broadcast_to__WEBPACK_IMPORTED_MODULE_0__["broadcastTo"])(this, shape);
};
//# sourceMappingURL=broadcast_to.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.cast = function (dtype) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["cast"])(this, dtype);
};
//# sourceMappingURL=cast.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.ceil = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["ceil"])(this);
};
//# sourceMappingURL=ceil.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js ***!
  \*************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.clipByValue = function (min, max) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["clipByValue"])(this, min, max);
};
//# sourceMappingURL=clip_by_value.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.concat = function (x, axis) {
    this.throwIfDisposed();
    if (x instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"]) {
        x = [x];
    }
    return Object(_ops_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])([this, ...x], axis);
};
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv1d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/conv1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
    this.throwIfDisposed();
    return Object(_ops_conv1d__WEBPACK_IMPORTED_MODULE_0__["conv1d"])(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
};
//# sourceMappingURL=conv1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    this.throwIfDisposed();
    return Object(_ops_conv2d__WEBPACK_IMPORTED_MODULE_0__["conv2d"])(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
//# sourceMappingURL=conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js ***!
  \****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv2d_transpose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/conv2d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {
    this.throwIfDisposed();
    return Object(_ops_conv2d_transpose__WEBPACK_IMPORTED_MODULE_0__["conv2dTranspose"])(this, filter, outputShape, strides, pad, dimRoundingMode);
};
//# sourceMappingURL=conv2d_transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.cos = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["cos"])(this);
};
//# sourceMappingURL=cos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.cosh = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["cosh"])(this);
};
//# sourceMappingURL=cosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_cumsum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.cumsum = function (axis, exclusive, reverse) {
    this.throwIfDisposed();
    return Object(_ops_cumsum__WEBPACK_IMPORTED_MODULE_0__["cumsum"])(this, axis, exclusive, reverse);
};
//# sourceMappingURL=cumsum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js ***!
  \**************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_depth_to_space__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/depth_to_space */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.depthToSpace = function (blockSize, dataFormat) {
    this.throwIfDisposed();
    return Object(_ops_depth_to_space__WEBPACK_IMPORTED_MODULE_0__["depthToSpace"])(this, blockSize, dataFormat);
};
//# sourceMappingURL=depth_to_space.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js ***!
  \***************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * @deprecated Use `depthwiseConv2d` instead.
 */
_tensor__WEBPACK_IMPORTED_MODULE_2__["Tensor"].prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    Object(_globals__WEBPACK_IMPORTED_MODULE_0__["deprecationWarn"])('depthwiseConv2D is deprecated, use depthwiseConv2d instead');
    this.throwIfDisposed();
    return Object(_ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__["depthwiseConv2d"])(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
//# sourceMappingURL=depthwise_conv2D_deprecated.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js ***!
  \****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.depthwiseConv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    this.throwIfDisposed();
    return Object(_ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_0__["depthwiseConv2d"])(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
//# sourceMappingURL=depthwise_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_dilation2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/dilation2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.dilation2d = function (filter, strides, pad, dilations, dataFormat) {
    this.throwIfDisposed();
    return Object(_ops_dilation2d__WEBPACK_IMPORTED_MODULE_0__["dilation2d"])(this, filter, strides, pad, dilations, dataFormat);
};
//# sourceMappingURL=dilation2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.div = function (b) {
    this.throwIfDisposed();
    return Object(_ops_div__WEBPACK_IMPORTED_MODULE_0__["div"])(this, b);
};
//# sourceMappingURL=div.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_div_no_nan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/div_no_nan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.divNoNan = function (b) {
    this.throwIfDisposed();
    return Object(_ops_div_no_nan__WEBPACK_IMPORTED_MODULE_0__["divNoNan"])(this, b);
};
//# sourceMappingURL=div_no_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.divStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["divStrict"])(this, x);
};
//# sourceMappingURL=div_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_dot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/dot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.dot = function (b) {
    this.throwIfDisposed();
    return Object(_ops_dot__WEBPACK_IMPORTED_MODULE_0__["dot"])(this, b);
};
//# sourceMappingURL=dot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_elu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/elu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.elu = function () {
    this.throwIfDisposed();
    return Object(_ops_elu__WEBPACK_IMPORTED_MODULE_0__["elu"])(this);
};
//# sourceMappingURL=elu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.equal = function (b) {
    this.throwIfDisposed();
    return Object(_ops_equal__WEBPACK_IMPORTED_MODULE_0__["equal"])(this, b);
};
//# sourceMappingURL=equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js ***!
  \************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.equalStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["equalStrict"])(this, x);
};
//# sourceMappingURL=equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.erf = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["erf"])(this);
};
//# sourceMappingURL=erf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.exp = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["exp"])(this);
};
//# sourceMappingURL=exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_expand_dims__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.expandDims = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_expand_dims__WEBPACK_IMPORTED_MODULE_0__["expandDims"])(this, axis);
};
//# sourceMappingURL=expand_dims.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.expm1 = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["expm1"])(this);
};
//# sourceMappingURL=expm1.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.fft = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["fft"])(this);
};
//# sourceMappingURL=fft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/** Flatten a Tensor to a 1D array.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.flatten = function () {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, [this.size]);
};
//# sourceMappingURL=flatten.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.floor = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["floor"])(this);
};
//# sourceMappingURL=floor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_floorDiv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.floorDiv = function (b) {
    this.throwIfDisposed();
    return Object(_ops_floorDiv__WEBPACK_IMPORTED_MODULE_0__["floorDiv"])(this, b);
};
//# sourceMappingURL=floorDiv.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_gather__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.gather = function (indices, axis) {
    this.throwIfDisposed();
    return Object(_ops_gather__WEBPACK_IMPORTED_MODULE_0__["gather"])(this, indices, axis);
};
//# sourceMappingURL=gather.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.greater = function (b) {
    this.throwIfDisposed();
    return Object(_ops_greater__WEBPACK_IMPORTED_MODULE_0__["greater"])(this, b);
};
//# sourceMappingURL=greater.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js ***!
  \*************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.greaterEqual = function (b) {
    this.throwIfDisposed();
    return Object(_ops_greater_equal__WEBPACK_IMPORTED_MODULE_0__["greaterEqual"])(this, b);
};
//# sourceMappingURL=greater_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js ***!
  \********************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.greaterEqualStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["greaterEqualStrict"])(this, x);
};
//# sourceMappingURL=greater_equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js ***!
  \**************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.greaterStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["greaterStrict"])(this, x);
};
//# sourceMappingURL=greater_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.ifft = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["ifft"])(this);
};
//# sourceMappingURL=ifft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.irfft = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["irfft"])(this);
};
//# sourceMappingURL=irfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.isFinite = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["isFinite"])(this);
};
//# sourceMappingURL=is_finite.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.isInf = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["isInf"])(this);
};
//# sourceMappingURL=is_inf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.isNaN = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["isNaN"])(this);
};
//# sourceMappingURL=is_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_leaky_relu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/leaky_relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.leakyRelu = function (alpha) {
    this.throwIfDisposed();
    return Object(_ops_leaky_relu__WEBPACK_IMPORTED_MODULE_0__["leakyRelu"])(this, alpha);
};
//# sourceMappingURL=leaky_relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_less__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.less = function (b) {
    this.throwIfDisposed();
    return Object(_ops_less__WEBPACK_IMPORTED_MODULE_0__["less"])(this, b);
};
//# sourceMappingURL=less.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.lessEqual = function (b) {
    this.throwIfDisposed();
    return Object(_ops_less_equal__WEBPACK_IMPORTED_MODULE_0__["lessEqual"])(this, b);
};
//# sourceMappingURL=less_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js ***!
  \*****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.lessEqualStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["lessEqualStrict"])(this, x);
};
//# sourceMappingURL=less_equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.lessStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["lessStrict"])(this, x);
};
//# sourceMappingURL=less_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js ***!
  \****************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_local_response_normalization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/local_response_normalization */ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.localResponseNormalization = function (depthRadius, bias, alpha, beta) {
    this.throwIfDisposed();
    return Object(_ops_local_response_normalization__WEBPACK_IMPORTED_MODULE_0__["localResponseNormalization"])(this, depthRadius, bias, alpha, beta);
};
//# sourceMappingURL=local_response_normalization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.log = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["log"])(this);
};
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.log1p = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["log1p"])(this);
};
//# sourceMappingURL=log1p.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.logSigmoid = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["logSigmoid"])(this);
};
//# sourceMappingURL=log_sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.logSoftmax = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["logSoftmax"])(this, axis);
};
//# sourceMappingURL=log_softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_log_sum_exp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.logSumExp = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_log_sum_exp__WEBPACK_IMPORTED_MODULE_0__["logSumExp"])(this, axis, keepDims);
};
//# sourceMappingURL=log_sum_exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.logicalAnd = function (b) {
    this.throwIfDisposed();
    return Object(_ops_logical_and__WEBPACK_IMPORTED_MODULE_0__["logicalAnd"])(this, b);
};
//# sourceMappingURL=logical_and.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_not__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.logicalNot = function () {
    this.throwIfDisposed();
    return Object(_ops_logical_not__WEBPACK_IMPORTED_MODULE_0__["logicalNot"])(this);
};
//# sourceMappingURL=logical_not.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_or__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.logicalOr = function (b) {
    this.throwIfDisposed();
    return Object(_ops_logical_or__WEBPACK_IMPORTED_MODULE_0__["logicalOr"])(this, b);
};
//# sourceMappingURL=logical_or.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js ***!
  \***********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_xor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/logical_xor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.logicalXor = function (b) {
    this.throwIfDisposed();
    return Object(_ops_logical_xor__WEBPACK_IMPORTED_MODULE_0__["logicalXor"])(this, b);
};
//# sourceMappingURL=logical_xor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mat_mul__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.matMul = function (b, transposeA, transposeB) {
    this.throwIfDisposed();
    return Object(_ops_mat_mul__WEBPACK_IMPORTED_MODULE_0__["matMul"])(this, b, transposeA, transposeB);
};
//# sourceMappingURL=mat_mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_max__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.max = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_max__WEBPACK_IMPORTED_MODULE_0__["max"])(this, axis, keepDims);
};
//# sourceMappingURL=max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_max_pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {
    this.throwIfDisposed();
    return Object(_ops_max_pool__WEBPACK_IMPORTED_MODULE_0__["maxPool"])(this, filterSize, strides, pad, dimRoundingMode);
};
//# sourceMappingURL=max_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.maximum = function (b) {
    this.throwIfDisposed();
    return Object(_ops_maximum__WEBPACK_IMPORTED_MODULE_0__["maximum"])(this, b);
};
//# sourceMappingURL=maximum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js ***!
  \**************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.maximumStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["maximumStrict"])(this, x);
};
//# sourceMappingURL=maximum_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.mean = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_mean__WEBPACK_IMPORTED_MODULE_0__["mean"])(this, axis, keepDims);
};
//# sourceMappingURL=mean.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.min = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_min__WEBPACK_IMPORTED_MODULE_0__["min"])(this, axis, keepDims);
};
//# sourceMappingURL=min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_minimum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.minimum = function (b) {
    this.throwIfDisposed();
    return Object(_ops_minimum__WEBPACK_IMPORTED_MODULE_0__["minimum"])(this, b);
};
//# sourceMappingURL=minimum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js ***!
  \**************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.minimumStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["minimumStrict"])(this, x);
};
//# sourceMappingURL=minimum_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mirror_pad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/mirror_pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.mirrorPad = function (paddings, mode) {
    this.throwIfDisposed();
    return Object(_ops_mirror_pad__WEBPACK_IMPORTED_MODULE_0__["mirrorPad"])(this, paddings, mode);
};
//# sourceMappingURL=mirror_pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/mod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.mod = function (b) {
    this.throwIfDisposed();
    return Object(_ops_mod__WEBPACK_IMPORTED_MODULE_0__["mod"])(this, b);
};
//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.modStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["modStrict"])(this, x);
};
//# sourceMappingURL=mod_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.mul = function (b) {
    this.throwIfDisposed();
    return Object(_ops_mul__WEBPACK_IMPORTED_MODULE_0__["mul"])(this, b);
};
//# sourceMappingURL=mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.mulStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["mulStrict"])(this, x);
};
//# sourceMappingURL=mul_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.neg = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["neg"])(this);
};
//# sourceMappingURL=neg.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.norm = function (ord, axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["norm"])(this, ord, axis, keepDims);
};
//# sourceMappingURL=norm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_not_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.notEqual = function (b) {
    this.throwIfDisposed();
    return Object(_ops_not_equal__WEBPACK_IMPORTED_MODULE_0__["notEqual"])(this, b);
};
//# sourceMappingURL=not_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js ***!
  \****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.notEqualStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["notEqualStrict"])(this, x);
};
//# sourceMappingURL=not_equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_one_hot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.oneHot = function (depth, onValue = 1, offValue = 0) {
    this.throwIfDisposed();
    return Object(_ops_one_hot__WEBPACK_IMPORTED_MODULE_0__["oneHot"])(this, depth, onValue, offValue);
};
//# sourceMappingURL=one_hot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.onesLike = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["onesLike"])(this);
};
//# sourceMappingURL=ones_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.pad = function (paddings, constantValue) {
    this.throwIfDisposed();
    return Object(_ops_pad__WEBPACK_IMPORTED_MODULE_0__["pad"])(this, paddings, constantValue);
};
//# sourceMappingURL=pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.pool = function (windowShape, poolingType, padding, dilationRate, strides) {
    this.throwIfDisposed();
    return Object(_ops_pool__WEBPACK_IMPORTED_MODULE_0__["pool"])(this, windowShape, poolingType, padding, dilationRate, strides);
};
//# sourceMappingURL=pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.pow = function (exp) {
    this.throwIfDisposed();
    return Object(_ops_pow__WEBPACK_IMPORTED_MODULE_0__["pow"])(this, exp);
};
//# sourceMappingURL=pow.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.powStrict = function (exp) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["powStrict"])(this, exp);
};
//# sourceMappingURL=pow_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_prelu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/prelu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.prelu = function (alpha) {
    this.throwIfDisposed();
    return Object(_ops_prelu__WEBPACK_IMPORTED_MODULE_0__["prelu"])(this, alpha);
};
//# sourceMappingURL=prelu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_prod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/prod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.prod = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_prod__WEBPACK_IMPORTED_MODULE_0__["prod"])(this, axis, keepDims);
};
//# sourceMappingURL=prod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.reciprocal = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["reciprocal"])(this);
};
//# sourceMappingURL=reciprocal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js ***!
  \************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js");
/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acos */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js");
/* harmony import */ var _acosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acosh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js");
/* harmony import */ var _add_strict__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js");
/* harmony import */ var _all__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./all */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js");
/* harmony import */ var _any__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./any */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js");
/* harmony import */ var _arg_max__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./arg_max */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js");
/* harmony import */ var _arg_min__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./arg_min */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js");
/* harmony import */ var _as_scalar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./as_scalar */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js");
/* harmony import */ var _as_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./as_type */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js");
/* harmony import */ var _as1d__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./as1d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js");
/* harmony import */ var _as2d__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./as2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js");
/* harmony import */ var _as3d__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./as3d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js");
/* harmony import */ var _as4d__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./as4d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js");
/* harmony import */ var _as5d__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./as5d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js");
/* harmony import */ var _asin__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./asin */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js");
/* harmony import */ var _asinh__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./asinh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js");
/* harmony import */ var _atan__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./atan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js");
/* harmony import */ var _atan2__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./atan2 */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js");
/* harmony import */ var _atanh__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./atanh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js");
/* harmony import */ var _avg_pool__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js");
/* harmony import */ var _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js");
/* harmony import */ var _broadcast_to__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js");
/* harmony import */ var _ceil__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./ceil */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js");
/* harmony import */ var _clip_by_value__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./clip_by_value */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js");
/* harmony import */ var _conv1d__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./conv1d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js");
/* harmony import */ var _conv2d_transpose__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./conv2d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js");
/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./cos */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js");
/* harmony import */ var _cosh__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./cosh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js");
/* harmony import */ var _cumsum__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js");
/* harmony import */ var _depth_to_space__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./depth_to_space */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js");
/* harmony import */ var _depthwise_conv2D_deprecated__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./depthwise_conv2D_deprecated */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js");
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js");
/* harmony import */ var _dilation2d__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./dilation2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js");
/* harmony import */ var _div_no_nan__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./div_no_nan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js");
/* harmony import */ var _div_strict__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./div_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./dot */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js");
/* harmony import */ var _elu__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./elu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js");
/* harmony import */ var _equal_strict__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js");
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js");
/* harmony import */ var _erf__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./erf */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js");
/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js");
/* harmony import */ var _expm1__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./expm1 */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js");
/* harmony import */ var _fft__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./fft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js");
/* harmony import */ var _flatten__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./flatten */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js");
/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./floor */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js");
/* harmony import */ var _floorDiv__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js");
/* harmony import */ var _gather__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./gather */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js");
/* harmony import */ var _greater_equal_strict__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./greater_equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js");
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js");
/* harmony import */ var _greater_strict__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./greater_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js");
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./greater */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js");
/* harmony import */ var _ifft__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./ifft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js");
/* harmony import */ var _irfft__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./irfft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js");
/* harmony import */ var _is_finite__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./is_finite */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js");
/* harmony import */ var _is_inf__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./is_inf */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js");
/* harmony import */ var _is_nan__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./is_nan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js");
/* harmony import */ var _leaky_relu__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./leaky_relu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js");
/* harmony import */ var _less_equal_strict__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./less_equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js");
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js");
/* harmony import */ var _less_strict__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./less_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js");
/* harmony import */ var _less__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./less */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js");
/* harmony import */ var _local_response_normalization__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./local_response_normalization */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js");
/* harmony import */ var _log_sigmoid__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./log_sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js");
/* harmony import */ var _log_softmax__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./log_softmax */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js");
/* harmony import */ var _log_sum_exp__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js");
/* harmony import */ var _log1p__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./log1p */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js");
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js");
/* harmony import */ var _logical_not__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js");
/* harmony import */ var _logical_or__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js");
/* harmony import */ var _logical_xor__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./logical_xor */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js");
/* harmony import */ var _max_pool__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js");
/* harmony import */ var _maximum_strict__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./maximum_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js");
/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./maximum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js");
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./mean */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js");
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./min */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js");
/* harmony import */ var _minimum_strict__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./minimum_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js");
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./minimum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js");
/* harmony import */ var _mirror_pad__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./mirror_pad */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js");
/* harmony import */ var _mod_strict__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./mod_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js");
/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./mod */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js");
/* harmony import */ var _mul_strict__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./mul_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./neg */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js");
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./norm */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js");
/* harmony import */ var _not_equal_strict__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./not_equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js");
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js");
/* harmony import */ var _one_hot__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js");
/* harmony import */ var _ones_like__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./ones_like */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js");
/* harmony import */ var _pool__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./pool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js");
/* harmony import */ var _pow_strict__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./pow_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js");
/* harmony import */ var _prelu__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./prelu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js");
/* harmony import */ var _prod__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./prod */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js");
/* harmony import */ var _reciprocal__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./reciprocal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./relu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js");
/* harmony import */ var _relu6__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js");
/* harmony import */ var _reshape_as__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./reshape_as */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js");
/* harmony import */ var _resize_bilinear__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./resize_bilinear */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js");
/* harmony import */ var _resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./resize_nearest_neighbor */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js");
/* harmony import */ var _rfft__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./rfft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js");
/* harmony import */ var _round__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./round */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js");
/* harmony import */ var _rsqrt__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./rsqrt */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js");
/* harmony import */ var _selu__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./selu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js");
/* harmony import */ var _separable_conv2d__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./separable_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js");
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js");
/* harmony import */ var _sign__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./sign */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js");
/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./sin */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js");
/* harmony import */ var _sinh__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./sinh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js");
/* harmony import */ var _softmax__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./softmax */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js");
/* harmony import */ var _softplus__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./softplus */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js");
/* harmony import */ var _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js");
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./split */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js");
/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js");
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js");
/* harmony import */ var _squared_difference_strict__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./squared_difference_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js");
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./stack */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./step */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js");
/* harmony import */ var _strided_slice__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./strided_slice */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js");
/* harmony import */ var _sub_strict__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./sub_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js");
/* harmony import */ var _tan__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./tan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js");
/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./tanh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js");
/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./tile */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js");
/* harmony import */ var _to_bool__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./to_bool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js");
/* harmony import */ var _to_float__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./to_float */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js");
/* harmony import */ var _to_int__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./to_int */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js");
/* harmony import */ var _topk__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./topk */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js");
/* harmony import */ var _unique__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./unique */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js");
/* harmony import */ var _unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js");
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./unstack */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./where */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */























































































































































//# sourceMappingURL=register_all_chained_ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_relu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.relu = function () {
    this.throwIfDisposed();
    return Object(_ops_relu__WEBPACK_IMPORTED_MODULE_0__["relu"])(this);
};
//# sourceMappingURL=relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_relu6__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.relu6 = function () {
    this.throwIfDisposed();
    return Object(_ops_relu6__WEBPACK_IMPORTED_MODULE_0__["relu6"])(this);
};
//# sourceMappingURL=relu6.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.reshape = function (shape) {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, shape);
};
//# sourceMappingURL=reshape.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Reshapes the tensor into the shape of the provided tensor.
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.reshapeAs = function (x) {
    this.throwIfDisposed();
    return Object(_ops_reshape__WEBPACK_IMPORTED_MODULE_0__["reshape"])(this, x.shape);
};
//# sourceMappingURL=reshape_as.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js ***!
  \***************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_image_resize_bilinear__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/image/resize_bilinear */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.resizeBilinear = function (newShape2D, alignCorners) {
    this.throwIfDisposed();
    return Object(_ops_image_resize_bilinear__WEBPACK_IMPORTED_MODULE_0__["resizeBilinear"])(this, newShape2D, alignCorners);
};
//# sourceMappingURL=resize_bilinear.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js ***!
  \***********************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/image/resize_nearest_neighbor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.resizeNearestNeighbor = function (newShape2D, alignCorners) {
    this.throwIfDisposed();
    return Object(_ops_image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_0__["resizeNearestNeighbor"])(this, newShape2D, alignCorners);
};
//# sourceMappingURL=resize_nearest_neighbor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reverse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.reverse = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_reverse__WEBPACK_IMPORTED_MODULE_0__["reverse"])(this, axis);
};
//# sourceMappingURL=reverse.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.rfft = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["rfft"])(this);
};
//# sourceMappingURL=rfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.round = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["round"])(this);
};
//# sourceMappingURL=round.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.rsqrt = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["rsqrt"])(this);
};
//# sourceMappingURL=rsqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_selu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/selu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.selu = function () {
    this.throwIfDisposed();
    return Object(_ops_selu__WEBPACK_IMPORTED_MODULE_0__["selu"])(this);
};
//# sourceMappingURL=selu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js ***!
  \****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_separable_conv2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/separable_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.separableConv2d = function (depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
    this.throwIfDisposed();
    return Object(_ops_separable_conv2d__WEBPACK_IMPORTED_MODULE_0__["separableConv2d"])(this, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat);
};
//# sourceMappingURL=separable_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.sigmoid = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["sigmoid"])(this);
};
//# sourceMappingURL=sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.sign = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["sign"])(this);
};
//# sourceMappingURL=sign.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.sin = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["sin"])(this);
};
//# sourceMappingURL=sin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.sinh = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["sinh"])(this);
};
//# sourceMappingURL=sinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.slice = function (begin, size) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["slice"])(this, begin, size);
};
//# sourceMappingURL=slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.softmax = function (dim) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["softmax"])(this, dim);
};
//# sourceMappingURL=softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.softplus = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["softplus"])(this);
};
//# sourceMappingURL=softplus.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js ***!
  \*****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.spaceToBatchND = function (blockShape, paddings) {
    this.throwIfDisposed();
    return Object(_ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_0__["spaceToBatchND"])(this, blockShape, paddings);
};
//# sourceMappingURL=space_to_batch_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_split__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.split = function (numOrSizeSplits, axis) {
    this.throwIfDisposed();
    return Object(_ops_split__WEBPACK_IMPORTED_MODULE_0__["split"])(this, numOrSizeSplits, axis);
};
//# sourceMappingURL=split.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.sqrt = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["sqrt"])(this);
};
//# sourceMappingURL=sqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.square = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["square"])(this);
};
//# sourceMappingURL=square.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js ***!
  \******************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_squared_difference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.squaredDifference = function (b) {
    this.throwIfDisposed();
    return Object(_ops_squared_difference__WEBPACK_IMPORTED_MODULE_0__["squaredDifference"])(this, b);
};
//# sourceMappingURL=squared_difference.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js ***!
  \*************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.squaredDifferenceStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["squaredDifferenceStrict"])(this, x);
};
//# sourceMappingURL=squared_difference_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_squeeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.squeeze = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_squeeze__WEBPACK_IMPORTED_MODULE_0__["squeeze"])(this, axis);
};
//# sourceMappingURL=squeeze.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.stack = function (x, axis) {
    this.throwIfDisposed();
    const tensorsToBeStacked = x instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"] ? [this, x] : [this, ...x];
    return Object(_ops_stack__WEBPACK_IMPORTED_MODULE_0__["stack"])(tensorsToBeStacked, axis);
};
//# sourceMappingURL=stack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.step = function (alpha) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["step"])(this, alpha);
};
//# sourceMappingURL=step.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js ***!
  \*************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.stridedSlice = function (begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["stridedSlice"])(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
};
//# sourceMappingURL=strided_slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.sub = function (b) {
    this.throwIfDisposed();
    return Object(_ops_sub__WEBPACK_IMPORTED_MODULE_0__["sub"])(this, b);
};
//# sourceMappingURL=sub.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.subStrict = function (x) {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["subStrict"])(this, x);
};
//# sourceMappingURL=sub_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.sum = function (axis, keepDims) {
    this.throwIfDisposed();
    return Object(_ops_sum__WEBPACK_IMPORTED_MODULE_0__["sum"])(this, axis, keepDims);
};
//# sourceMappingURL=sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.tan = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["tan"])(this);
};
//# sourceMappingURL=tan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.tanh = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["tanh"])(this);
};
//# sourceMappingURL=tanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_tile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.tile = function (reps) {
    this.throwIfDisposed();
    return Object(_ops_tile__WEBPACK_IMPORTED_MODULE_0__["tile"])(this, reps);
};
//# sourceMappingURL=tile.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/** Casts the array to type `bool`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.toBool = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["cast"])(this, 'bool');
};
//# sourceMappingURL=to_bool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/** Casts the array to type `float32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.toFloat = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["cast"])(this, 'float32');
};
//# sourceMappingURL=to_float.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/** Casts the array to type `int32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.toInt = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["cast"])(this, 'int32');
};
//# sourceMappingURL=to_int.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_topk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/topk */ "./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.topk = function (k, sorted) {
    this.throwIfDisposed();
    return Object(_ops_topk__WEBPACK_IMPORTED_MODULE_0__["topk"])(this, k, sorted);
};
//# sourceMappingURL=topk.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.transpose = function (perm) {
    this.throwIfDisposed();
    return Object(_ops_transpose__WEBPACK_IMPORTED_MODULE_0__["transpose"])(this, perm);
};
//# sourceMappingURL=transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unique__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/unique */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.unique = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_unique__WEBPACK_IMPORTED_MODULE_0__["unique"])(this, axis);
};
//# sourceMappingURL=unique.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js ***!
  \********************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.unsortedSegmentSum = function (segmentIds, numSegments) {
    this.throwIfDisposed();
    return Object(_ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_0__["unsortedSegmentSum"])(this, segmentIds, numSegments);
};
//# sourceMappingURL=unsorted_segment_sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unstack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.unstack = function (axis) {
    this.throwIfDisposed();
    return Object(_ops_unstack__WEBPACK_IMPORTED_MODULE_0__["unstack"])(this, axis);
};
//# sourceMappingURL=unstack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.where = function (condition, x) {
    this.throwIfDisposed();
    return Object(_ops_where__WEBPACK_IMPORTED_MODULE_0__["where"])(condition, this, x);
};
//# sourceMappingURL=where.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_1__["Tensor"].prototype.zerosLike = function () {
    this.throwIfDisposed();
    return Object(_ops_ops__WEBPACK_IMPORTED_MODULE_0__["zerosLike"])(this);
};
//# sourceMappingURL=zeros_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js ***!
  \***************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _gradients_Abs_grad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gradients/Abs_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js");
/* harmony import */ var _gradients_Acos_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gradients/Acos_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js");
/* harmony import */ var _gradients_Acosh_grad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gradients/Acosh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js");
/* harmony import */ var _gradients_Add_grad__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gradients/Add_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js");
/* harmony import */ var _gradients_AddN_grad__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gradients/AddN_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js");
/* harmony import */ var _gradients_ArgMax_grad__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gradients/ArgMax_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js");
/* harmony import */ var _gradients_ArgMin_grad__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gradients/ArgMin_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js");
/* harmony import */ var _gradients_Asin_grad__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gradients/Asin_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js");
/* harmony import */ var _gradients_Asinh_grad__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./gradients/Asinh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js");
/* harmony import */ var _gradients_Atan2_grad__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./gradients/Atan2_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js");
/* harmony import */ var _gradients_Atan_grad__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./gradients/Atan_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js");
/* harmony import */ var _gradients_Atanh_grad__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./gradients/Atanh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js");
/* harmony import */ var _gradients_AvgPool3D_grad__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./gradients/AvgPool3D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js");
/* harmony import */ var _gradients_AvgPool_grad__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./gradients/AvgPool_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js");
/* harmony import */ var _gradients_BatchMatMul_grad__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./gradients/BatchMatMul_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js");
/* harmony import */ var _gradients_BatchToSpaceND_grad__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./gradients/BatchToSpaceND_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js");
/* harmony import */ var _gradients_BroadcastTo_grad__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./gradients/BroadcastTo_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js");
/* harmony import */ var _gradients_Cast_grad__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./gradients/Cast_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js");
/* harmony import */ var _gradients_Ceil_grad__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./gradients/Ceil_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js");
/* harmony import */ var _gradients_ClipByValue_grad__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./gradients/ClipByValue_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js");
/* harmony import */ var _gradients_Concat_grad__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./gradients/Concat_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js");
/* harmony import */ var _gradients_Conv2D_grad__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./gradients/Conv2D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js");
/* harmony import */ var _gradients_Conv2DBackpropInput_grad__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./gradients/Conv2DBackpropInput_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js");
/* harmony import */ var _gradients_Conv3D_grad__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./gradients/Conv3D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js");
/* harmony import */ var _gradients_Cos_grad__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./gradients/Cos_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js");
/* harmony import */ var _gradients_Cosh_grad__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./gradients/Cosh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js");
/* harmony import */ var _gradients_Cumsum_grad__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./gradients/Cumsum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js");
/* harmony import */ var _gradients_DepthwiseConv2dNative_grad__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./gradients/DepthwiseConv2dNative_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js");
/* harmony import */ var _gradients_Dilation2D_grad__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./gradients/Dilation2D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js");
/* harmony import */ var _gradients_Div_grad__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./gradients/Div_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Div_grad.js");
/* harmony import */ var _gradients_Elu_grad__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./gradients/Elu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js");
/* harmony import */ var _gradients_Erf_grad__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./gradients/Erf_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js");
/* harmony import */ var _gradients_Exp_grad__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./gradients/Exp_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js");
/* harmony import */ var _gradients_Expm1_grad__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./gradients/Expm1_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js");
/* harmony import */ var _gradients_Floor_grad__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./gradients/Floor_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js");
/* harmony import */ var _gradients_FloorDiv_grad__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./gradients/FloorDiv_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js");
/* harmony import */ var _gradients_FusedBatchNorm_grad__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./gradients/FusedBatchNorm_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js");
/* harmony import */ var _gradients_GatherV2_grad__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./gradients/GatherV2_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js");
/* harmony import */ var _gradients_GreaterEqual_grad__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./gradients/GreaterEqual_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js");
/* harmony import */ var _gradients_Identity_grad__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./gradients/Identity_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js");
/* harmony import */ var _gradients_IsFinite_grad__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./gradients/IsFinite_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js");
/* harmony import */ var _gradients_IsInf_grad__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./gradients/IsInf_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js");
/* harmony import */ var _gradients_IsNan_grad__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./gradients/IsNan_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js");
/* harmony import */ var _gradients_Log1p_grad__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./gradients/Log1p_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js");
/* harmony import */ var _gradients_Log_grad__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./gradients/Log_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js");
/* harmony import */ var _gradients_LogSoftmax_grad__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./gradients/LogSoftmax_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js");
/* harmony import */ var _gradients_LRN_grad__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./gradients/LRN_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js");
/* harmony import */ var _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./gradients/Max_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js");
/* harmony import */ var _gradients_Maximum_grad__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./gradients/Maximum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js");
/* harmony import */ var _gradients_MaxPool3D_grad__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./gradients/MaxPool3D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js");
/* harmony import */ var _gradients_MaxPool_grad__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./gradients/MaxPool_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js");
/* harmony import */ var _gradients_Min_grad__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./gradients/Min_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js");
/* harmony import */ var _gradients_Minimum_grad__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./gradients/Minimum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js");
/* harmony import */ var _gradients_MirrorPad_grad__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./gradients/MirrorPad_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js");
/* harmony import */ var _gradients_Mod_grad__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./gradients/Mod_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js");
/* harmony import */ var _gradients_Multiply_grad__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./gradients/Multiply_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js");
/* harmony import */ var _gradients_Negate_grad__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./gradients/Negate_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Negate_grad.js");
/* harmony import */ var _gradients_OneHot_grad__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./gradients/OneHot_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js");
/* harmony import */ var _gradients_OnesLike_grad__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./gradients/OnesLike_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js");
/* harmony import */ var _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./gradients/PadV2_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js");
/* harmony import */ var _gradients_Pow_grad__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./gradients/Pow_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js");
/* harmony import */ var _gradients_Prelu_grad__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./gradients/Prelu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js");
/* harmony import */ var _gradients_Reciprocal_grad__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./gradients/Reciprocal_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js");
/* harmony import */ var _gradients_Relu6_grad__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./gradients/Relu6_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js");
/* harmony import */ var _gradients_Relu_grad__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./gradients/Relu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js");
/* harmony import */ var _gradients_Reshape_grad__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./gradients/Reshape_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js");
/* harmony import */ var _gradients_ResizeBilinear_grad__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./gradients/ResizeBilinear_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js");
/* harmony import */ var _gradients_ResizeNearestNeighbor_grad__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./gradients/ResizeNearestNeighbor_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js");
/* harmony import */ var _gradients_Reverse_grad__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./gradients/Reverse_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js");
/* harmony import */ var _gradients_Round_grad__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./gradients/Round_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js");
/* harmony import */ var _gradients_Rsqrt_grad__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./gradients/Rsqrt_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js");
/* harmony import */ var _gradients_SelectV2_grad__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./gradients/SelectV2_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SelectV2_grad.js");
/* harmony import */ var _gradients_Selu_grad__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./gradients/Selu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js");
/* harmony import */ var _gradients_Sigmoid_grad__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./gradients/Sigmoid_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js");
/* harmony import */ var _gradients_Sign_grad__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./gradients/Sign_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js");
/* harmony import */ var _gradients_Sin_grad__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./gradients/Sin_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js");
/* harmony import */ var _gradients_Sinh_grad__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./gradients/Sinh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js");
/* harmony import */ var _gradients_Slice_grad__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./gradients/Slice_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js");
/* harmony import */ var _gradients_Softmax_grad__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./gradients/Softmax_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js");
/* harmony import */ var _gradients_Softplus_grad__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./gradients/Softplus_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js");
/* harmony import */ var _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./gradients/SpaceToBatchND_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js");
/* harmony import */ var _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./gradients/SplitV_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js");
/* harmony import */ var _gradients_Sqrt_grad__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./gradients/Sqrt_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js");
/* harmony import */ var _gradients_Square_grad__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./gradients/Square_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js");
/* harmony import */ var _gradients_SquaredDifference_grad__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./gradients/SquaredDifference_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js");
/* harmony import */ var _gradients_Step_grad__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./gradients/Step_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js");
/* harmony import */ var _gradients_Sub_grad__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./gradients/Sub_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js");
/* harmony import */ var _gradients_Sum_grad__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./gradients/Sum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js");
/* harmony import */ var _gradients_Tan_grad__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./gradients/Tan_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js");
/* harmony import */ var _gradients_Tanh_grad__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./gradients/Tanh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js");
/* harmony import */ var _gradients_Tile_grad__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./gradients/Tile_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js");
/* harmony import */ var _gradients_Transpose_grad__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./gradients/Transpose_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js");
/* harmony import */ var _gradients_Unpack_grad__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./gradients/Unpack_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js");
/* harmony import */ var _gradients_UnsortedSegmentSum_grad__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./gradients/UnsortedSegmentSum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js");
/* harmony import */ var _gradients_ZerosLike_grad__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./gradients/ZerosLike_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js");
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
































































































// Export all kernel configs here so that the package can auto register them
const gradConfigs = [
    _gradients_Abs_grad__WEBPACK_IMPORTED_MODULE_0__["absGradConfig"],
    _gradients_Acos_grad__WEBPACK_IMPORTED_MODULE_1__["acosGradConfig"],
    _gradients_Acosh_grad__WEBPACK_IMPORTED_MODULE_2__["acoshGradConfig"],
    _gradients_Add_grad__WEBPACK_IMPORTED_MODULE_3__["addGradConfig"],
    _gradients_AddN_grad__WEBPACK_IMPORTED_MODULE_4__["addNGradConfig"],
    _gradients_ArgMax_grad__WEBPACK_IMPORTED_MODULE_5__["argMaxGradConfig"],
    _gradients_ArgMin_grad__WEBPACK_IMPORTED_MODULE_6__["argMinGradConfig"],
    _gradients_Asin_grad__WEBPACK_IMPORTED_MODULE_7__["asinGradConfig"],
    _gradients_Asinh_grad__WEBPACK_IMPORTED_MODULE_8__["asinhGradConfig"],
    _gradients_Atan2_grad__WEBPACK_IMPORTED_MODULE_9__["atan2GradConfig"],
    _gradients_Atan_grad__WEBPACK_IMPORTED_MODULE_10__["atanGradConfig"],
    _gradients_Atanh_grad__WEBPACK_IMPORTED_MODULE_11__["atanhGradConfig"],
    _gradients_AvgPool3D_grad__WEBPACK_IMPORTED_MODULE_12__["avgPool3DGradConfig"],
    _gradients_AvgPool_grad__WEBPACK_IMPORTED_MODULE_13__["avgPoolGradConfig"],
    _gradients_BatchMatMul_grad__WEBPACK_IMPORTED_MODULE_14__["batchMatMulGradConfig"],
    _gradients_BatchToSpaceND_grad__WEBPACK_IMPORTED_MODULE_15__["batchToSpaceNDGradConfig"],
    _gradients_BroadcastTo_grad__WEBPACK_IMPORTED_MODULE_16__["broadcastToGradConfig"],
    _gradients_Cast_grad__WEBPACK_IMPORTED_MODULE_17__["castGradConfig"],
    _gradients_Ceil_grad__WEBPACK_IMPORTED_MODULE_18__["ceilGradConfig"],
    _gradients_ClipByValue_grad__WEBPACK_IMPORTED_MODULE_19__["clipByValueGradConfig"],
    _gradients_Concat_grad__WEBPACK_IMPORTED_MODULE_20__["concatGradConfig"],
    _gradients_Conv2DBackpropInput_grad__WEBPACK_IMPORTED_MODULE_22__["conv2DBackpropInputGradConfig"],
    _gradients_Conv2D_grad__WEBPACK_IMPORTED_MODULE_21__["conv2DGradConfig"],
    _gradients_Conv3D_grad__WEBPACK_IMPORTED_MODULE_23__["conv3DGradConfig"],
    _gradients_Cos_grad__WEBPACK_IMPORTED_MODULE_24__["cosGradConfig"],
    _gradients_Cosh_grad__WEBPACK_IMPORTED_MODULE_25__["coshGradConfig"],
    _gradients_Cumsum_grad__WEBPACK_IMPORTED_MODULE_26__["cumsumGradConfig"],
    _gradients_DepthwiseConv2dNative_grad__WEBPACK_IMPORTED_MODULE_27__["depthwiseConv2dNativeGradConfig"],
    _gradients_Dilation2D_grad__WEBPACK_IMPORTED_MODULE_28__["dilation2dGradConfig"],
    _gradients_Div_grad__WEBPACK_IMPORTED_MODULE_29__["divGradConfig"],
    _gradients_Elu_grad__WEBPACK_IMPORTED_MODULE_30__["eluGradConfig"],
    _gradients_Erf_grad__WEBPACK_IMPORTED_MODULE_31__["erfGradConfig"],
    _gradients_Exp_grad__WEBPACK_IMPORTED_MODULE_32__["expGradConfig"],
    _gradients_Expm1_grad__WEBPACK_IMPORTED_MODULE_33__["expm1GradConfig"],
    _gradients_FloorDiv_grad__WEBPACK_IMPORTED_MODULE_35__["floorDivGradConfig"],
    _gradients_Floor_grad__WEBPACK_IMPORTED_MODULE_34__["floorGradConfig"],
    _gradients_FusedBatchNorm_grad__WEBPACK_IMPORTED_MODULE_36__["fusedBatchNormGradConfig"],
    _gradients_GatherV2_grad__WEBPACK_IMPORTED_MODULE_37__["gatherGradConfig"],
    _gradients_GreaterEqual_grad__WEBPACK_IMPORTED_MODULE_38__["greaterEqualGradConfig"],
    _gradients_Identity_grad__WEBPACK_IMPORTED_MODULE_39__["identityGradConfig"],
    _gradients_IsFinite_grad__WEBPACK_IMPORTED_MODULE_40__["isFiniteGradConfig"],
    _gradients_IsInf_grad__WEBPACK_IMPORTED_MODULE_41__["isInfGradConfig"],
    _gradients_IsNan_grad__WEBPACK_IMPORTED_MODULE_42__["isNanGradConfig"],
    _gradients_Log1p_grad__WEBPACK_IMPORTED_MODULE_43__["log1pGradConfig"],
    _gradients_Log_grad__WEBPACK_IMPORTED_MODULE_44__["logGradConfig"],
    _gradients_LogSoftmax_grad__WEBPACK_IMPORTED_MODULE_45__["logSoftmaxGradConfig"],
    _gradients_LRN_grad__WEBPACK_IMPORTED_MODULE_46__["lrnGradConfig"],
    _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_47__["maxGradConfig"],
    _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_47__["maxGradConfig"],
    _gradients_Maximum_grad__WEBPACK_IMPORTED_MODULE_48__["maximumGradConfig"],
    _gradients_MaxPool3D_grad__WEBPACK_IMPORTED_MODULE_49__["maxPool3DGradConfig"],
    _gradients_MaxPool_grad__WEBPACK_IMPORTED_MODULE_50__["maxPoolGradConfig"],
    _gradients_Min_grad__WEBPACK_IMPORTED_MODULE_51__["minGradConfig"],
    _gradients_Minimum_grad__WEBPACK_IMPORTED_MODULE_52__["minimumGradConfig"],
    _gradients_MirrorPad_grad__WEBPACK_IMPORTED_MODULE_53__["mirrorPadGradConfig"],
    _gradients_Mod_grad__WEBPACK_IMPORTED_MODULE_54__["modGradConfig"],
    _gradients_Multiply_grad__WEBPACK_IMPORTED_MODULE_55__["multiplyGradConfig"],
    _gradients_Negate_grad__WEBPACK_IMPORTED_MODULE_56__["negateGradConfig"],
    _gradients_OneHot_grad__WEBPACK_IMPORTED_MODULE_57__["oneHotGradConfig"],
    _gradients_OnesLike_grad__WEBPACK_IMPORTED_MODULE_58__["onesLikeGradConfig"],
    _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_59__["padV2GradConfig"],
    _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_59__["padV2GradConfig"],
    _gradients_Pow_grad__WEBPACK_IMPORTED_MODULE_60__["powGradConfig"],
    _gradients_Prelu_grad__WEBPACK_IMPORTED_MODULE_61__["preluGradConfig"],
    _gradients_Reciprocal_grad__WEBPACK_IMPORTED_MODULE_62__["reciprocalGradConfig"],
    _gradients_Relu6_grad__WEBPACK_IMPORTED_MODULE_63__["relu6GradConfig"],
    _gradients_Relu_grad__WEBPACK_IMPORTED_MODULE_64__["reluGradConfig"],
    _gradients_Reshape_grad__WEBPACK_IMPORTED_MODULE_65__["reshapeGradConfig"],
    _gradients_ResizeBilinear_grad__WEBPACK_IMPORTED_MODULE_66__["resizeBilinearGradConfig"],
    _gradients_ResizeNearestNeighbor_grad__WEBPACK_IMPORTED_MODULE_67__["resizeNearestNeighborGradConfig"],
    _gradients_Reverse_grad__WEBPACK_IMPORTED_MODULE_68__["reverseGradConfig"],
    _gradients_Round_grad__WEBPACK_IMPORTED_MODULE_69__["roundGradConfig"],
    _gradients_Rsqrt_grad__WEBPACK_IMPORTED_MODULE_70__["rsqrtGradConfig"],
    _gradients_SelectV2_grad__WEBPACK_IMPORTED_MODULE_71__["selectV2PoolGradConfig"],
    _gradients_Selu_grad__WEBPACK_IMPORTED_MODULE_72__["seluGradConfig"],
    _gradients_Sigmoid_grad__WEBPACK_IMPORTED_MODULE_73__["sigmoidGradConfig"],
    _gradients_Sign_grad__WEBPACK_IMPORTED_MODULE_74__["signGradConfig"],
    _gradients_Sin_grad__WEBPACK_IMPORTED_MODULE_75__["sinGradConfig"],
    _gradients_Sinh_grad__WEBPACK_IMPORTED_MODULE_76__["sinhGradConfig"],
    _gradients_Slice_grad__WEBPACK_IMPORTED_MODULE_77__["sliceGradConfig"],
    _gradients_Softmax_grad__WEBPACK_IMPORTED_MODULE_78__["softmaxGradConfig"],
    _gradients_Softplus_grad__WEBPACK_IMPORTED_MODULE_79__["softplusGradConfig"],
    _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_80__["spaceToBatchNDGradConfig"],
    _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_80__["spaceToBatchNDGradConfig"],
    _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_81__["splitVGradConfig"],
    _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_81__["splitVGradConfig"],
    _gradients_Sqrt_grad__WEBPACK_IMPORTED_MODULE_82__["sqrtGradConfig"],
    _gradients_SquaredDifference_grad__WEBPACK_IMPORTED_MODULE_84__["squaredDifferenceGradConfig"],
    _gradients_Square_grad__WEBPACK_IMPORTED_MODULE_83__["squareGradConfig"],
    _gradients_Step_grad__WEBPACK_IMPORTED_MODULE_85__["stepGradConfig"],
    _gradients_Sub_grad__WEBPACK_IMPORTED_MODULE_86__["subGradConfig"],
    _gradients_Sum_grad__WEBPACK_IMPORTED_MODULE_87__["sumGradConfig"],
    _gradients_Tan_grad__WEBPACK_IMPORTED_MODULE_88__["tanGradConfig"],
    _gradients_Tanh_grad__WEBPACK_IMPORTED_MODULE_89__["tanhGradConfig"],
    _gradients_Tile_grad__WEBPACK_IMPORTED_MODULE_90__["tileGradConfig"],
    _gradients_Transpose_grad__WEBPACK_IMPORTED_MODULE_91__["transposeGradConfig"],
    _gradients_Unpack_grad__WEBPACK_IMPORTED_MODULE_92__["unpackGradConfig"],
    _gradients_UnsortedSegmentSum_grad__WEBPACK_IMPORTED_MODULE_93__["unsortedSegmentSumGradConfig"],
    _gradients_ZerosLike_grad__WEBPACK_IMPORTED_MODULE_94__["zerosLikeGradConfig"]
];
for (const gradientConfig of gradConfigs) {
    Object(_kernel_registry__WEBPACK_IMPORTED_MODULE_95__["registerGradient"])(gradientConfig);
}
//# sourceMappingURL=register_all_gradients.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/serialization.js ***!
  \******************************************************************/
/*! exports provided: Serializable, SerializationMap, registerClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Serializable", function() { return Serializable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SerializationMap", function() { return SerializationMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerClass", function() { return registerClass; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Serializable defines the serialization contract.
 *
 * TFJS requires serializable classes to return their className when asked
 * to avoid issues with minification.
 */
class Serializable {
    /**
     * Return the class name for this class to use in serialization contexts.
     *
     * Generally speaking this will be the same thing that constructor.name
     * would have returned.  However, the class name needs to be robust
     * against minification for serialization/deserialization to work properly.
     *
     * There's also places such as initializers.VarianceScaling, where
     * implementation details between different languages led to different
     * class hierarchies and a non-leaf node is used for serialization purposes.
     */
    getClassName() {
        return this.constructor
            .className;
    }
    /**
     * Creates an instance of T from a ConfigDict.
     *
     * This works for most descendants of serializable.  A few need to
     * provide special handling.
     * @param cls A Constructor for the class to instantiate.
     * @param config The Configuration for the object.
     */
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config);
    }
}
/**
 * Maps string keys to class constructors.
 *
 * Used during (de)serialization from the cross-language JSON format, which
 * requires the class name in the serialization format matches the class
 * names as used in Python, should it exist.
 */
class SerializationMap {
    constructor() {
        this.classNameMap = {};
    }
    /**
     * Returns the singleton instance of the map.
     */
    static getMap() {
        if (SerializationMap.instance == null) {
            SerializationMap.instance = new SerializationMap();
        }
        return SerializationMap.instance;
    }
    /**
     * Registers the class as serializable.
     */
    static register(cls) {
        SerializationMap.getMap().classNameMap[cls.className] =
            [cls, cls.fromConfig];
    }
}
/**
 * Register a class with the serialization map of TensorFlow.js.
 *
 * This is often used for registering custom Layers, so they can be
 * serialized and deserialized.
 *
 * Example:
 *
 * ```js
 * class MyCustomLayer extends tf.layers.Layer {
 *   static className = 'MyCustomLayer';
 *
 *   constructor(config) {
 *     super(config);
 *   }
 * }
 * tf.serialization.registerClass(MyCustomLayer);
 * ```
 *
 * @param cls The class to be registered. It must have a public static member
 *   called `className` defined and the value must be a non-empty string.
 *
 * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}
 */
function registerClass(cls) {
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(cls.className != null, () => `Class being registered does not have the static className ` +
        `property defined.`);
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(typeof cls.className === 'string', () => `className is required to be a string, but got type ` +
        typeof cls.className);
    Object(_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` +
        `which is disallowed.`);
    SerializationMap.register(cls);
}
//# sourceMappingURL=serialization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tape.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tape.js ***!
  \*********************************************************/
/*! exports provided: getFilteredNodesXToY, backpropagateGradients */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFilteredNodesXToY", function() { return getFilteredNodesXToY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "backpropagateGradients", function() { return backpropagateGradients; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */
function getFilteredNodesXToY(tape, xs, y) {
    // Forward pass to compute all the nodes and Tensors that are transitively a
    // function of x.
    const tensorsFromX = {};
    const nodesFromX = {};
    for (let i = 0; i < xs.length; i++) {
        tensorsFromX[xs[i].id] = true;
    }
    for (let i = 0; i < tape.length; i++) {
        const node = tape[i];
        const nodeInputs = node.inputs;
        for (const inputName in nodeInputs) {
            const input = nodeInputs[inputName];
            let anyInputFromX = false;
            for (let j = 0; j < xs.length; j++) {
                if (tensorsFromX[input.id]) {
                    node.outputs.forEach(output => tensorsFromX[output.id] = true);
                    anyInputFromX = true;
                    nodesFromX[node.id] = true;
                    break;
                }
            }
            if (anyInputFromX) {
                break;
            }
        }
    }
    // Backward pass to find all of the nodes and Tensors that lead to y.
    const tensorsLeadToY = {};
    tensorsLeadToY[y.id] = true;
    const nodesToY = {};
    for (let i = tape.length - 1; i >= 0; i--) {
        const node = tape[i];
        const nodeInputs = node.inputs;
        // If any of the outputs lead to y, mark all of the inputs as leading to y.
        for (let j = 0; j < node.outputs.length; j++) {
            if (tensorsLeadToY[node.outputs[j].id]) {
                for (const inputName in nodeInputs) {
                    tensorsLeadToY[nodeInputs[inputName].id] = true;
                    nodesToY[node.id] = true;
                }
                break;
            }
        }
    }
    // Return the paths that come from x and lead to y.
    const filteredTape = [];
    for (let i = 0; i < tape.length; i++) {
        const node = tape[i];
        if (nodesFromX[node.id] && nodesToY[node.id]) {
            // Prune the inputs from the node that aren't a function of x.
            const prunedInputs = {};
            for (const inputName in node.inputs) {
                const nodeInput = node.inputs[inputName];
                if (tensorsFromX[nodeInput.id]) {
                    prunedInputs[inputName] = nodeInput;
                }
            }
            // Copy the node and overwrite inputsAndArgs to the pruned version.
            const prunedNode = Object.assign({}, node);
            prunedNode.inputs = prunedInputs;
            prunedNode.outputs = node.outputs;
            filteredTape.push(prunedNode);
        }
    }
    return filteredTape;
}
/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */
function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {
    // Walk the tape backward and keep a map of Tensor to its gradient.
    for (let i = filteredTape.length - 1; i >= 0; i--) {
        const node = filteredTape[i];
        const dys = [];
        node.outputs.forEach(o => {
            const gradTensor = tensorAccumulatedGradientMap[o.id];
            if (gradTensor != null) {
                dys.push(gradTensor);
            }
            else {
                // This particular output is not in the back-propagation subgraph, so it
                // does not affect the final output, thus we put null for its dy.
                dys.push(null);
            }
        });
        if (node.gradient == null) {
            throw new Error(`Cannot compute gradient: gradient function not found ` +
                `for ${node.kernelName}.`);
        }
        // Backprop dy through this node and accumulate gradients over the inputs.
        const inputGradients = node.gradient(dys);
        for (const inputName in node.inputs) {
            if (!(inputName in inputGradients)) {
                throw new Error(`Cannot backprop through input ${inputName}. ` +
                    `Available gradients found: ${Object.keys(inputGradients)}.`);
            }
            // Call the gradient function.
            const dx = tidy(() => inputGradients[inputName]());
            if (dx.dtype !== 'float32') {
                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                    `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
            }
            const x = node.inputs[inputName];
            if (!_util__WEBPACK_IMPORTED_MODULE_0__["arraysEqual"](dx.shape, x.shape)) {
                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                    `'${inputName}' has shape '${dx.shape}', which does not match ` +
                    `the shape of the input '${x.shape}'`);
            }
            if (tensorAccumulatedGradientMap[x.id] == null) {
                tensorAccumulatedGradientMap[x.id] = dx;
            }
            else {
                const curGradient = tensorAccumulatedGradientMap[x.id];
                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);
                curGradient.dispose();
            }
        }
    }
}
//# sourceMappingURL=tape.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor.js ***!
  \***********************************************************/
/*! exports provided: TensorBuffer, setTensorTracker, setOpHandler, setDeprecationWarningFn, Tensor, Variable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TensorBuffer", function() { return TensorBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTensorTracker", function() { return setTensorTracker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOpHandler", function() { return setOpHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDeprecationWarningFn", function() { return setDeprecationWarningFn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tensor", function() { return Tensor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return Variable; });
/* harmony import */ var _tensor_format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tensor_format */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * A mutable object, similar to `tf.Tensor`, that allows users to set values
 * at locations before converting to an immutable `tf.Tensor`.
 *
 * See `tf.buffer` for creating a tensor buffer.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class TensorBuffer {
    constructor(shape, dtype, values) {
        this.dtype = dtype;
        this.shape = shape.slice();
        this.size = _util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"](shape);
        if (values != null) {
            const n = values.length;
            _util__WEBPACK_IMPORTED_MODULE_1__["assert"](n === this.size, () => `Length of values '${n}' does not match the size ` +
                `inferred by the shape '${this.size}'.`);
        }
        if (dtype === 'complex64') {
            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +
                `a TensorBuffer for the real and imaginary parts separately and ` +
                `call tf.complex(real, imag).`);
        }
        this.values = values || _util__WEBPACK_IMPORTED_MODULE_1__["getArrayFromDType"](dtype, this.size);
        this.strides = Object(_util__WEBPACK_IMPORTED_MODULE_1__["computeStrides"])(shape);
    }
    /**
     * Sets a value in the buffer at a given location.
     *
     * @param value The value to set.
     * @param locs  The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    set(value, ...locs) {
        if (locs.length === 0) {
            locs = [0];
        }
        _util__WEBPACK_IMPORTED_MODULE_1__["assert"](locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +
            `match the rank (${this.rank})`);
        const index = this.locToIndex(locs);
        this.values[index] = value;
    }
    /**
     * Returns the value in the buffer at the provided location.
     *
     * @param locs The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    get(...locs) {
        if (locs.length === 0) {
            locs = [0];
        }
        let i = 0;
        for (const loc of locs) {
            if (loc < 0 || loc >= this.shape[i]) {
                const msg = `Requested out of range element at ${locs}. ` +
                    `  Buffer shape=${this.shape}`;
                throw new Error(msg);
            }
            i++;
        }
        let index = locs[locs.length - 1];
        for (let i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return this.values[index];
    }
    locToIndex(locs) {
        if (this.rank === 0) {
            return 0;
        }
        else if (this.rank === 1) {
            return locs[0];
        }
        let index = locs[locs.length - 1];
        for (let i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return index;
    }
    indexToLoc(index) {
        if (this.rank === 0) {
            return [];
        }
        else if (this.rank === 1) {
            return [index];
        }
        const locs = new Array(this.shape.length);
        for (let i = 0; i < locs.length - 1; ++i) {
            locs[i] = Math.floor(index / this.strides[i]);
            index -= locs[i] * this.strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Creates an immutable `tf.Tensor` object from the buffer.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    toTensor() {
        return trackerFn().makeTensor(this.values, this.shape, this.dtype);
    }
}
// For tracking tensor creation and disposal.
let trackerFn = null;
// Used by chaining methods to call into ops.
let opHandler = null;
// Used to warn about deprecated methods.
let deprecationWarningFn = null;
// This here so that we can use this method on dev branches and keep the
// functionality at master.
// tslint:disable-next-line:no-unused-expression
[deprecationWarningFn];
/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */
function setTensorTracker(fn) {
    trackerFn = fn;
}
/**
 * An external consumer can register itself as the op handler. This way the
 * Tensor class can have chaining methods that call into ops via the op
 * handler.
 */
function setOpHandler(handler) {
    opHandler = handler;
}
/**
 * Sets the deprecation warning function to be used by this file. This way the
 * Tensor class can be a leaf but still use the environment.
 */
function setDeprecationWarningFn(fn) {
    deprecationWarningFn = fn;
}
/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class Tensor {
    constructor(shape, dtype, dataId, id) {
        /** Whether this tensor has been globally kept. */
        this.kept = false;
        this.isDisposedInternal = false;
        this.shape = shape.slice();
        this.dtype = dtype || 'float32';
        this.size = _util__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"](shape);
        this.strides = Object(_util__WEBPACK_IMPORTED_MODULE_1__["computeStrides"])(shape);
        this.dataId = dataId;
        this.id = id;
        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async buffer() {
        const vals = await this.data();
        return opHandler.buffer(this.shape, this.dtype, vals);
    }
    /**
     * Returns a `tf.TensorBuffer` that holds the underlying data.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    bufferSync() {
        return opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * asynchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async array() {
        const vals = await this.data();
        return Object(_util__WEBPACK_IMPORTED_MODULE_1__["toNestedArray"])(this.shape, vals);
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * synchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    arraySync() {
        return Object(_util__WEBPACK_IMPORTED_MODULE_1__["toNestedArray"])(this.shape, this.dataSync());
    }
    /**
     * Asynchronously downloads the values from the `tf.Tensor`. Returns a
     * promise of `TypedArray` that resolves when the computation has finished.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async data() {
        this.throwIfDisposed();
        const data = trackerFn().read(this.dataId);
        if (this.dtype === 'string') {
            const bytes = await data;
            try {
                return bytes.map(b => _util__WEBPACK_IMPORTED_MODULE_1__["decodeString"](b));
            }
            catch (_a) {
                throw new Error('Failed to decode the string bytes into utf-8. ' +
                    'To get the original bytes, call tensor.bytes().');
            }
        }
        return data;
    }
    /**
     * Synchronously downloads the values from the `tf.Tensor`. This blocks the
     * UI thread until the values are ready, which can cause performance issues.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dataSync() {
        this.throwIfDisposed();
        const data = trackerFn().readSync(this.dataId);
        if (this.dtype === 'string') {
            try {
                return data.map(b => _util__WEBPACK_IMPORTED_MODULE_1__["decodeString"](b));
            }
            catch (_a) {
                throw new Error('Failed to decode the string bytes into utf-8. ' +
                    'To get the original bytes, call tensor.bytes().');
            }
        }
        return data;
    }
    /** Returns the underlying bytes of the tensor's data. */
    async bytes() {
        this.throwIfDisposed();
        const data = await trackerFn().read(this.dataId);
        if (this.dtype === 'string') {
            return data;
        }
        else {
            return new Uint8Array(data.buffer);
        }
    }
    /**
     * Disposes `tf.Tensor` from memory.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dispose() {
        if (this.isDisposed) {
            return;
        }
        trackerFn().disposeTensor(this);
        this.isDisposedInternal = true;
    }
    get isDisposed() {
        return this.isDisposedInternal;
    }
    throwIfDisposed() {
        if (this.isDisposed) {
            throw new Error(`Tensor is disposed.`);
        }
    }
    /**
     * Prints the `tf.Tensor`. See `tf.print` for details.
     *
     * @param verbose Whether to print verbose information about the tensor,
     *    including dtype and size.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    print(verbose = false) {
        return opHandler.print(this, verbose);
    }
    /**
     * Returns a copy of the tensor. See `tf.clone` for details.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    clone() {
        this.throwIfDisposed();
        return opHandler.clone(this);
    }
    /**
     * Returns a human-readable description of the tensor. Useful for logging.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    toString(verbose = false) {
        const vals = this.dataSync();
        return Object(_tensor_format__WEBPACK_IMPORTED_MODULE_0__["tensorToString"])(vals, this.shape, this.dtype, verbose);
    }
    cast(dtype) {
        this.throwIfDisposed();
        return opHandler.cast(this, dtype);
    }
    variable(trainable = true, name, dtype) {
        this.throwIfDisposed();
        return trackerFn().makeVariable(this, trainable, name, dtype);
    }
}
Object.defineProperty(Tensor, Symbol.hasInstance, {
    value: (instance) => {
        // Implementation note: we should use properties of the object that will be
        // defined before the constructor body has finished executing (methods).
        // This is because when this code is transpiled by babel, babel will call
        // classCallCheck before the constructor body is run.
        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.
        return !!instance && instance.data != null && instance.dataSync != null &&
            instance.throwIfDisposed != null;
    }
});
/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class Variable extends Tensor {
    constructor(initialValue, trainable, name, tensorId) {
        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
        this.trainable = trainable;
        this.name = name;
    }
    /**
     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
     * the same shape and dtype as the old `tf.Tensor`.
     *
     * @param newValue New tensor to be assigned to this variable.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    assign(newValue) {
        if (newValue.dtype !== this.dtype) {
            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +
                `previous value (${this.dtype}) must match`);
        }
        if (!_util__WEBPACK_IMPORTED_MODULE_1__["arraysEqual"](newValue.shape, this.shape)) {
            throw new Error(`shape of the new value (${newValue.shape}) and ` +
                `previous value (${this.shape}) must match`);
        }
        trackerFn().disposeTensor(this);
        this.dataId = newValue.dataId;
        trackerFn().incRef(this, null /* backend */);
    }
    dispose() {
        trackerFn().disposeVariable(this);
        this.isDisposedInternal = true;
    }
}
Object.defineProperty(Variable, Symbol.hasInstance, {
    value: (instance) => {
        return instance instanceof Tensor && instance.assign != null &&
            instance.assign instanceof Function;
    }
});
//# sourceMappingURL=tensor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js ***!
  \******************************************************************/
/*! exports provided: tensorToString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tensorToString", function() { return tensorToString; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// Maximum number of values before we decide to show ellipsis.
const FORMAT_LIMIT_NUM_VALS = 20;
// Number of first and last values to show when displaying a, b,...,y, z.
const FORMAT_NUM_FIRST_LAST_VALS = 3;
// Number of significant digits to show.
const FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(vals, shape, dtype, verbose) {
    const strides = Object(_util__WEBPACK_IMPORTED_MODULE_0__["computeStrides"])(shape);
    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
    const rank = shape.length;
    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
    const lines = ['Tensor'];
    if (verbose) {
        lines.push(`  dtype: ${dtype}`);
        lines.push(`  rank: ${rank}`);
        lines.push(`  shape: [${shape}]`);
        lines.push(`  values:`);
    }
    lines.push(valsLines.map(l => '    ' + l).join('\n'));
    return lines.join('\n');
}
function computeMaxSizePerColumn(vals, shape, dtype, strides) {
    const n = Object(_util__WEBPACK_IMPORTED_MODULE_0__["sizeFromShape"])(shape);
    const numCols = strides[strides.length - 1];
    const padPerCol = new Array(numCols).fill(0);
    const rank = shape.length;
    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;
    if (rank > 1) {
        for (let row = 0; row < n / numCols; row++) {
            const offset = row * numCols;
            for (let j = 0; j < numCols; j++) {
                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
            }
        }
    }
    return padPerCol;
}
function valToString(val, pad, dtype) {
    let valStr;
    if (Array.isArray(val)) {
        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +
            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
    }
    else if (Object(_util__WEBPACK_IMPORTED_MODULE_0__["isString"])(val)) {
        valStr = `'${val}'`;
    }
    else if (dtype === 'bool') {
        valStr = boolNumToString(val);
    }
    else {
        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
    }
    return Object(_util__WEBPACK_IMPORTED_MODULE_0__["rightPad"])(valStr, pad);
}
function boolNumToString(v) {
    return v === 0 ? 'false' : 'true';
}
function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
    const storagePerElement = dtype === 'complex64' ? 2 : 1;
    const size = shape[0];
    const rank = shape.length;
    if (rank === 0) {
        if (dtype === 'complex64') {
            const complexTuple = createComplexTuples(vals);
            return [valToString(complexTuple[0], 0, dtype)];
        }
        if (dtype === 'bool') {
            return [boolNumToString(vals[0])];
        }
        return [vals[0].toString()];
    }
    if (rank === 1) {
        if (size > FORMAT_LIMIT_NUM_VALS) {
            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
            let firstVals = Array.from(vals.slice(0, firstValsSize));
            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));
            if (dtype === 'complex64') {
                firstVals = createComplexTuples(firstVals);
                lastVals = createComplexTuples(lastVals);
            }
            return [
                '[' +
                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                        .join(', ') +
                    ', ..., ' +
                    lastVals
                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))
                        .join(', ') +
                    ']'
            ];
        }
        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :
            Array.from(vals);
        return [
            '[' +
                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                    .join(', ') +
                ']'
        ];
    }
    // The array is rank 2 or more.
    const subshape = shape.slice(1);
    const substrides = strides.slice(1);
    const stride = strides[0] * storagePerElement;
    const lines = [];
    if (size > FORMAT_LIMIT_NUM_VALS) {
        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));
        }
        lines.push('...');
        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
        }
    }
    else {
        for (let i = 0; i < size; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
        }
    }
    const sep = rank === 2 ? ',' : '';
    lines[0] = '[' + lines[0] + sep;
    for (let i = 1; i < lines.length - 1; i++) {
        lines[i] = ' ' + lines[i] + sep;
    }
    let newLineSep = ',\n';
    for (let i = 2; i < rank; i++) {
        newLineSep += '\n';
    }
    lines[lines.length - 1] =
        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
    return lines;
}
function createComplexTuples(vals) {
    const complexTuples = [];
    for (let i = 0; i < vals.length; i += 2) {
        complexTuples.push([vals[i], vals[i + 1]]);
    }
    return complexTuples;
}
//# sourceMappingURL=tensor_format.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js ***!
  \****************************************************************/
/*! exports provided: makeTypesMatch, assertTypesMatch, isTensorInList, getTensorsInContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeTypesMatch", function() { return makeTypesMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertTypesMatch", function() { return assertTypesMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTensorInList", function() { return isTensorInList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTensorsInContainer", function() { return getTensorsInContainer; });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/types.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function makeTypesMatch(a, b) {
    if (a.dtype === b.dtype) {
        return [a, b];
    }
    const dtype = Object(_types__WEBPACK_IMPORTED_MODULE_1__["upcastType"])(a.dtype, b.dtype);
    return [a.cast(dtype), b.cast(dtype)];
}
function assertTypesMatch(a, b) {
    Object(_util__WEBPACK_IMPORTED_MODULE_2__["assert"])(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +
        ` second(${b.dtype}) input must match`);
}
function isTensorInList(tensor, tensorList) {
    return tensorList.some(x => x.id === tensor.id);
}
/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */
function getTensorsInContainer(result) {
    const list = [];
    const seen = new Set();
    walkTensorContainer(result, list, seen);
    return list;
}
function walkTensorContainer(container, list, seen) {
    if (container == null) {
        return;
    }
    if (container instanceof _tensor__WEBPACK_IMPORTED_MODULE_0__["Tensor"]) {
        list.push(container);
        return;
    }
    if (!isIterable(container)) {
        return;
    }
    // Iteration over keys works also for arrays.
    const iterable = container;
    for (const k in iterable) {
        const val = iterable[k];
        if (!seen.has(val)) {
            seen.add(val);
            walkTensorContainer(val, list, seen);
        }
    }
}
// tslint:disable-next-line:no-any
function isIterable(obj) {
    return Array.isArray(obj) || typeof obj === 'object';
}
//# sourceMappingURL=tensor_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js ***!
  \********************************************************************/
/*! exports provided: inferShape, convertToTensor, convertToTensorArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inferShape", function() { return inferShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToTensor", function() { return convertToTensor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToTensorArray", function() { return convertToTensorArray; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function inferShape(val, dtype) {
    let firstElem = val;
    if (Object(_util__WEBPACK_IMPORTED_MODULE_3__["isTypedArray"])(val)) {
        return dtype === 'string' ? [] : [val.length];
    }
    if (!Array.isArray(val)) {
        return []; // Scalar.
    }
    const shape = [];
    while (Array.isArray(firstElem) ||
        Object(_util__WEBPACK_IMPORTED_MODULE_3__["isTypedArray"])(firstElem) && dtype !== 'string') {
        shape.push(firstElem.length);
        firstElem = firstElem[0];
    }
    if (Array.isArray(val) &&
        Object(_environment__WEBPACK_IMPORTED_MODULE_1__["env"])().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {
        deepAssertShapeConsistency(val, shape, []);
    }
    return shape;
}
function deepAssertShapeConsistency(val, shape, indices) {
    indices = indices || [];
    if (!(Array.isArray(val)) && !Object(_util__WEBPACK_IMPORTED_MODULE_3__["isTypedArray"])(val)) {
        Object(_util__WEBPACK_IMPORTED_MODULE_3__["assert"])(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +
            `but should be an array/TypedArray of ${shape[0]} elements`);
        return;
    }
    Object(_util__WEBPACK_IMPORTED_MODULE_3__["assert"])(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +
        `but is an array of ${val.length} elements`);
    Object(_util__WEBPACK_IMPORTED_MODULE_3__["assert"])(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +
        `elements, but has ${val.length} elements`);
    const subShape = shape.slice(1);
    for (let i = 0; i < val.length; ++i) {
        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
    }
}
function assertDtype(expectedDtype, actualDType, argName, functionName) {
    if (expectedDtype == null) {
        return;
    }
    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||
        expectedDtype === 'numeric' && actualDType === 'string') {
        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +
            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
    }
}
function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {
    if (x instanceof _tensor__WEBPACK_IMPORTED_MODULE_2__["Tensor"]) {
        assertDtype(parseAsDtype, x.dtype, argName, functionName);
        return x;
    }
    let inferredDtype = Object(_util__WEBPACK_IMPORTED_MODULE_3__["inferDtype"])(x);
    // If the user expects a bool/int/float, use that info to update the
    // inferredDtype when it is not a string.
    if (inferredDtype !== 'string' &&
        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {
        inferredDtype = parseAsDtype;
    }
    assertDtype(parseAsDtype, inferredDtype, argName, functionName);
    if ((x == null) ||
        (!Object(_util__WEBPACK_IMPORTED_MODULE_3__["isTypedArray"])(x) && !Array.isArray(x) && typeof x !== 'number' &&
            typeof x !== 'boolean' && typeof x !== 'string')) {
        const type = x == null ? 'null' : x.constructor.name;
        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +
            `Tensor or TensorLike, but got '${type}'`);
    }
    const inferredShape = inferShape(x, inferredDtype);
    if (!Object(_util__WEBPACK_IMPORTED_MODULE_3__["isTypedArray"])(x) && !Array.isArray(x)) {
        x = [x];
    }
    const skipTypedArray = true;
    const values = inferredDtype !== 'string' ?
        Object(_util__WEBPACK_IMPORTED_MODULE_3__["toTypedArray"])(x, inferredDtype) :
        Object(_util__WEBPACK_IMPORTED_MODULE_3__["flatten"])(x, [], skipTypedArray);
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].makeTensor(values, inferredShape, inferredDtype);
}
function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {
    if (!Array.isArray(arg)) {
        throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +
            '`Tensor[]` or `TensorLike[]`');
    }
    const tensors = arg;
    return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName), parseAsDtype);
}
//# sourceMappingURL=tensor_util_env.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/test_util.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/test_util.js ***!
  \**************************************************************/
/*! exports provided: TEST_EPSILON_FLOAT16, expectArraysClose, testEpsilon, expectPromiseToFail, expectArraysEqual, expectNumbersClose, expectValuesInRange, expectArrayBuffersEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEST_EPSILON_FLOAT16", function() { return TEST_EPSILON_FLOAT16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectArraysClose", function() { return expectArraysClose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "testEpsilon", function() { return testEpsilon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectPromiseToFail", function() { return expectPromiseToFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectArraysEqual", function() { return expectArraysEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectNumbersClose", function() { return expectNumbersClose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectValuesInRange", function() { return expectValuesInRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectArrayBuffersEqual", function() { return expectArrayBuffersEqual; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const TEST_EPSILON_FLOAT32 = 1e-3;
const TEST_EPSILON_FLOAT16 = 1e-1;
function expectArraysClose(actual, expected, epsilon) {
    if (epsilon == null) {
        epsilon = testEpsilon();
    }
    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));
}
function testEpsilon() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__["ENGINE"].backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :
        TEST_EPSILON_FLOAT16;
}
function expectArraysPredicate(actual, expected, predicate) {
    let checkClassType = true;
    if (Object(_util__WEBPACK_IMPORTED_MODULE_2__["isTypedArray"])(actual) || Object(_util__WEBPACK_IMPORTED_MODULE_2__["isTypedArray"])(expected)) {
        checkClassType = false;
    }
    if (Object(_util__WEBPACK_IMPORTED_MODULE_2__["isTypedArray"])(actual) && Object(_util__WEBPACK_IMPORTED_MODULE_2__["isTypedArray"])(expected)) {
        checkClassType = true;
    }
    if (checkClassType) {
        const aType = actual.constructor.name;
        const bType = expected.constructor.name;
        if (aType !== bType) {
            throw new Error(`Arrays are of different type. Actual: ${aType}. ` +
                `Expected: ${bType}`);
        }
    }
    if (Array.isArray(actual) && Array.isArray(expected)) {
        const actualShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["inferShape"])(actual);
        const expectedShape = Object(_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__["inferShape"])(expected);
        if (!Object(_util__WEBPACK_IMPORTED_MODULE_2__["arraysEqual"])(actualShape, expectedShape)) {
            throw new Error(`Arrays have different shapes. ` +
                `Actual: [${actualShape}]. Expected: [${expectedShape}]`);
        }
    }
    const actualFlat = Object(_util__WEBPACK_IMPORTED_MODULE_2__["isTypedArray"])(actual) ? actual : Object(_util__WEBPACK_IMPORTED_MODULE_2__["flatten"])(actual);
    const expectedFlat = Object(_util__WEBPACK_IMPORTED_MODULE_2__["isTypedArray"])(expected) ?
        expected :
        Object(_util__WEBPACK_IMPORTED_MODULE_2__["flatten"])(expected);
    if (actualFlat.length !== expectedFlat.length) {
        throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` +
            `expected: ${expectedFlat.length}.\n` +
            `Actual:   ${actualFlat}.\n` +
            `Expected: ${expectedFlat}.`);
    }
    for (let i = 0; i < expectedFlat.length; ++i) {
        const a = actualFlat[i];
        const e = expectedFlat[i];
        if (!predicate(a, e)) {
            throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\n` +
                `Actual:   ${actualFlat}.\n` +
                `Expected: ${expectedFlat}.`);
        }
    }
}
function expectPromiseToFail(fn, done) {
    fn().then(() => done.fail(), () => done());
}
function expectArraysEqual(actual, expected) {
    const exp = typeof expected === 'string' || typeof expected === 'number' ||
        typeof expected === 'boolean' ?
        [expected] :
        expected;
    if (Object(_util__WEBPACK_IMPORTED_MODULE_2__["isString"])(actual) || Object(_util__WEBPACK_IMPORTED_MODULE_2__["isString"])(actual[0]) ||
        Object(_util__WEBPACK_IMPORTED_MODULE_2__["isString"])(expected) || Object(_util__WEBPACK_IMPORTED_MODULE_2__["isString"])(expected[0])) {
        // tslint:disable-next-line: triple-equals
        return expectArraysPredicate(actual, exp, (a, b) => a == b);
    }
    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));
}
function expectNumbersClose(a, e, epsilon) {
    if (epsilon == null) {
        epsilon = testEpsilon();
    }
    if (!areClose(a, e, epsilon)) {
        throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);
    }
}
function areClose(a, e, epsilon) {
    if (!isFinite(a) && !isFinite(e)) {
        return true;
    }
    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
        return false;
    }
    return true;
}
function expectValuesInRange(actual, low, high) {
    for (let i = 0; i < actual.length; i++) {
        if (actual[i] < low || actual[i] > high) {
            throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);
        }
    }
}
function expectArrayBuffersEqual(actual, expected) {
    // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in
    // a Float32Array solves this issue.
    expect(new Float32Array(actual)).toEqual(new Float32Array(expected));
}
//# sourceMappingURL=test_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/train.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/train.js ***!
  \**********************************************************/
/*! exports provided: train */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "train", function() { return train; });
/* harmony import */ var _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./optimizers/adadelta_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js");
/* harmony import */ var _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizers/adagrad_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js");
/* harmony import */ var _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./optimizers/adam_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js");
/* harmony import */ var _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./optimizers/adamax_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js");
/* harmony import */ var _optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./optimizers/momentum_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js");
/* harmony import */ var _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimizers/optimizer_constructors */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js");
/* harmony import */ var _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./optimizers/rmsprop_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js");
/* harmony import */ var _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./optimizers/sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// So typings can propagate.








// tslint:disable-next-line:no-unused-expression
[_optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_4__["MomentumOptimizer"], _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_7__["SGDOptimizer"], _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_0__["AdadeltaOptimizer"], _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_1__["AdagradOptimizer"],
    _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_6__["RMSPropOptimizer"], _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_3__["AdamaxOptimizer"], _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_2__["AdamOptimizer"]];
const train = {
    sgd: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__["OptimizerConstructors"].sgd,
    momentum: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__["OptimizerConstructors"].momentum,
    adadelta: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__["OptimizerConstructors"].adadelta,
    adagrad: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__["OptimizerConstructors"].adagrad,
    rmsprop: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__["OptimizerConstructors"].rmsprop,
    adamax: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__["OptimizerConstructors"].adamax,
    adam: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_5__["OptimizerConstructors"].adam
};
//# sourceMappingURL=train.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/types.js ***!
  \**********************************************************/
/*! exports provided: Rank, upcastType, sumOutType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rank", function() { return Rank; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upcastType", function() { return upcastType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sumOutType", function() { return sumOutType; });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Rank;
(function (Rank) {
    Rank["R0"] = "R0";
    Rank["R1"] = "R1";
    Rank["R2"] = "R2";
    Rank["R3"] = "R3";
    Rank["R4"] = "R4";
    Rank["R5"] = "R5";
    Rank["R6"] = "R6";
})(Rank || (Rank = {}));
// Looks for upcasting types. Used, for example, in operations with mixed dtype
// inputs.
var UpcastInt32AndMap;
(function (UpcastInt32AndMap) {
    UpcastInt32AndMap["float32"] = "float32";
    UpcastInt32AndMap["int32"] = "int32";
    UpcastInt32AndMap["bool"] = "int32";
    UpcastInt32AndMap["complex64"] = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function (UpcastBoolAndMap) {
    UpcastBoolAndMap["float32"] = "float32";
    UpcastBoolAndMap["int32"] = "int32";
    UpcastBoolAndMap["bool"] = "bool";
    UpcastBoolAndMap["complex64"] = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function (UpcastFloat32AndMap) {
    UpcastFloat32AndMap["float32"] = "float32";
    UpcastFloat32AndMap["int32"] = "float32";
    UpcastFloat32AndMap["bool"] = "float32";
    UpcastFloat32AndMap["complex64"] = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var UpcastComplex64AndMap;
(function (UpcastComplex64AndMap) {
    UpcastComplex64AndMap["float32"] = "complex64";
    UpcastComplex64AndMap["int32"] = "complex64";
    UpcastComplex64AndMap["bool"] = "complex64";
    UpcastComplex64AndMap["complex64"] = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
const upcastTypeMap = {
    'float32': UpcastFloat32AndMap,
    'int32': UpcastInt32AndMap,
    'bool': UpcastBoolAndMap,
    'complex64': UpcastComplex64AndMap
};
function upcastType(typeA, typeB) {
    if (typeA === 'string' || typeB === 'string') {
        if (typeA === 'string' && typeB === 'string') {
            return 'string';
        }
        throw new Error(`Can not upcast ${typeA} with ${typeB}`);
    }
    return upcastTypeMap[typeA][typeB];
}
/** Returns the output type after summation. */
function sumOutType(type) {
    return upcastType(type, 'int32');
}
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/util.js ***!
  \*********************************************************/
/*! exports provided: shuffle, clamp, nearestLargerEven, sum, randUniform, distSquared, assert, assertShapesMatch, assertNonNull, flatten, sizeFromShape, isScalarShape, arraysEqual, isInt, tanh, sizeToSquarishShape, createShuffledIndices, rightPad, repeatedTry, inferFromImplicitShape, parseAxisParam, squeezeShape, getTypedArrayFromDType, getArrayFromDType, checkConversionForErrors, isValidDtype, hasEncodingLoss, isTypedArray, bytesPerElement, bytesFromStringArray, isString, isBoolean, isNumber, inferDtype, isFunction, nearestDivisor, computeStrides, toNestedArray, makeOnesTypedArray, makeZerosTypedArray, makeZerosNestedTypedArray, assertNonNegativeIntegerDimensions, locToIndex, indexToLoc, isPromise, createScalarValue, toTypedArray, now, fetch, encodeString, decodeString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createScalarValue", function() { return createScalarValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toTypedArray", function() { return toTypedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "now", function() { return now; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetch", function() { return fetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeString", function() { return encodeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeString", function() { return decodeString; });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util_base */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shuffle", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["shuffle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["clamp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nearestLargerEven", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["nearestLargerEven"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["sum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randUniform", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["randUniform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "distSquared", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["distSquared"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assert", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["assert"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertShapesMatch", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["assertShapesMatch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertNonNull", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["assertNonNull"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["flatten"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sizeFromShape", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["sizeFromShape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isScalarShape", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isScalarShape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arraysEqual", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["arraysEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInt", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isInt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tanh", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["tanh"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sizeToSquarishShape", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["sizeToSquarishShape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createShuffledIndices", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["createShuffledIndices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rightPad", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["rightPad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "repeatedTry", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["repeatedTry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inferFromImplicitShape", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["inferFromImplicitShape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseAxisParam", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["parseAxisParam"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "squeezeShape", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["squeezeShape"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getTypedArrayFromDType", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["getTypedArrayFromDType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getArrayFromDType", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["getArrayFromDType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "checkConversionForErrors", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["checkConversionForErrors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isValidDtype", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isValidDtype"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasEncodingLoss", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["hasEncodingLoss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isTypedArray", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isTypedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bytesPerElement", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["bytesPerElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bytesFromStringArray", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["bytesFromStringArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isBoolean", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isBoolean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inferDtype", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["inferDtype"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nearestDivisor", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["nearestDivisor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStrides", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["computeStrides"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toNestedArray", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["toNestedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeOnesTypedArray", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["makeOnesTypedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeZerosTypedArray", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["makeZerosTypedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeZerosNestedTypedArray", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["makeZerosNestedTypedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertNonNegativeIntegerDimensions", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["assertNonNegativeIntegerDimensions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "locToIndex", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["locToIndex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "indexToLoc", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["indexToLoc"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return _util_base__WEBPACK_IMPORTED_MODULE_1__["isPromise"]; });

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Create typed array for scalar value. Used for storing in `DataStorage`.
 */
function createScalarValue(value, dtype) {
    if (dtype === 'string') {
        return encodeString(value);
    }
    return toTypedArray([value], dtype);
}
function noConversionNeeded(a, dtype) {
    return (a instanceof Float32Array && dtype === 'float32') ||
        (a instanceof Int32Array && dtype === 'int32') ||
        (a instanceof Uint8Array && dtype === 'bool');
}
function toTypedArray(a, dtype) {
    if (dtype === 'string') {
        throw new Error('Cannot convert a string[] to a TypedArray');
    }
    if (Array.isArray(a)) {
        a = _util_base__WEBPACK_IMPORTED_MODULE_1__["flatten"](a);
    }
    if (Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().getBool('DEBUG')) {
        _util_base__WEBPACK_IMPORTED_MODULE_1__["checkConversionForErrors"](a, dtype);
    }
    if (noConversionNeeded(a, dtype)) {
        return a;
    }
    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
        return new Float32Array(a);
    }
    else if (dtype === 'int32') {
        return new Int32Array(a);
    }
    else if (dtype === 'bool') {
        const bool = new Uint8Array(a.length);
        for (let i = 0; i < bool.length; ++i) {
            if (Math.round(a[i]) !== 0) {
                bool[i] = 1;
            }
        }
        return bool;
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function now() {
    return Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().platform.now();
}
/**
 * Returns a platform-specific implementation of
 * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 *
 * If `fetch` is defined on the global object (`window`, `process`, etc.),
 * `tf.util.fetch` returns that function.
 *
 * If not, `tf.util.fetch` returns a platform-specific solution.
 *
 * ```js
 * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
 * // handle response
 * ```
 *
 * @doc {heading: 'Util'}
 */
function fetch(path, requestInits) {
    return Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().platform.fetch(path, requestInits);
}
/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */
function encodeString(s, encoding = 'utf-8') {
    encoding = encoding || 'utf-8';
    return Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().platform.encode(s, encoding);
}
/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */
function decodeString(bytes, encoding = 'utf-8') {
    encoding = encoding || 'utf-8';
    return Object(_environment__WEBPACK_IMPORTED_MODULE_0__["env"])().platform.decode(bytes, encoding);
}
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/util_base.js ***!
  \**************************************************************/
/*! exports provided: shuffle, clamp, nearestLargerEven, sum, randUniform, distSquared, assert, assertShapesMatch, assertNonNull, flatten, sizeFromShape, isScalarShape, arraysEqual, isInt, tanh, sizeToSquarishShape, createShuffledIndices, rightPad, repeatedTry, inferFromImplicitShape, parseAxisParam, squeezeShape, getTypedArrayFromDType, getArrayFromDType, checkConversionForErrors, isValidDtype, hasEncodingLoss, isTypedArray, bytesPerElement, bytesFromStringArray, isString, isBoolean, isNumber, inferDtype, isFunction, nearestDivisor, computeStrides, toNestedArray, makeOnesTypedArray, makeZerosTypedArray, makeZerosNestedTypedArray, assertNonNegativeIntegerDimensions, locToIndex, indexToLoc, isPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shuffle", function() { return shuffle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nearestLargerEven", function() { return nearestLargerEven; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sum", function() { return sum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randUniform", function() { return randUniform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distSquared", function() { return distSquared; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assert", function() { return assert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertShapesMatch", function() { return assertShapesMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertNonNull", function() { return assertNonNull; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sizeFromShape", function() { return sizeFromShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isScalarShape", function() { return isScalarShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arraysEqual", function() { return arraysEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInt", function() { return isInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tanh", function() { return tanh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sizeToSquarishShape", function() { return sizeToSquarishShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createShuffledIndices", function() { return createShuffledIndices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rightPad", function() { return rightPad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "repeatedTry", function() { return repeatedTry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inferFromImplicitShape", function() { return inferFromImplicitShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseAxisParam", function() { return parseAxisParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squeezeShape", function() { return squeezeShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTypedArrayFromDType", function() { return getTypedArrayFromDType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getArrayFromDType", function() { return getArrayFromDType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkConversionForErrors", function() { return checkConversionForErrors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidDtype", function() { return isValidDtype; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasEncodingLoss", function() { return hasEncodingLoss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTypedArray", function() { return isTypedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesPerElement", function() { return bytesPerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytesFromStringArray", function() { return bytesFromStringArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoolean", function() { return isBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inferDtype", function() { return inferDtype; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nearestDivisor", function() { return nearestDivisor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeStrides", function() { return computeStrides; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toNestedArray", function() { return toNestedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeOnesTypedArray", function() { return makeOnesTypedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeZerosTypedArray", function() { return makeZerosTypedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeZerosNestedTypedArray", function() { return makeZerosNestedTypedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertNonNegativeIntegerDimensions", function() { return assertNonNegativeIntegerDimensions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "locToIndex", function() { return locToIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexToLoc", function() { return indexToLoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return isPromise; });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
// tslint:disable-next-line:no-any
function shuffle(array) {
    let counter = array.length;
    let temp = 0;
    let index = 0;
    // While there are elements in the array
    while (counter > 0) {
        // Pick a random index
        index = (Math.random() * counter) | 0;
        // Decrease counter by 1
        counter--;
        // And swap the last element with it
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
}
/** Clamps a value to a specified range. */
function clamp(min, x, max) {
    return Math.max(min, Math.min(x, max));
}
function nearestLargerEven(val) {
    return val % 2 === 0 ? val : val + 1;
}
function sum(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i];
    }
    return sum;
}
/**
 * Returns a sample from a uniform [a, b) distribution.
 *
 * @param a The minimum support (inclusive).
 * @param b The maximum support (exclusive).
 * @return A pseudorandom number on the half-open interval [a,b).
 */
function randUniform(a, b) {
    const r = Math.random();
    return (b * r) + (1 - r) * a;
}
/** Returns the squared Euclidean distance between two vectors. */
function distSquared(a, b) {
    let result = 0;
    for (let i = 0; i < a.length; i++) {
        const diff = Number(a[i]) - Number(b[i]);
        result += diff * diff;
    }
    return result;
}
/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function assert(expr, msg) {
    if (!expr) {
        throw new Error(typeof msg === 'string' ? msg : msg());
    }
}
function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {
    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}
function assertNonNull(a) {
    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);
}
// NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().
/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function flatten(arr, result = [], skipTypedArray = false) {
    if (result == null) {
        result = [];
    }
    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {
        for (let i = 0; i < arr.length; ++i) {
            flatten(arr[i], result, skipTypedArray);
        }
    }
    else {
        result.push(arr);
    }
    return result;
}
/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function sizeFromShape(shape) {
    if (shape.length === 0) {
        // Scalar.
        return 1;
    }
    let size = shape[0];
    for (let i = 1; i < shape.length; i++) {
        size *= shape[i];
    }
    return size;
}
function isScalarShape(shape) {
    return shape.length === 0;
}
function arraysEqual(n1, n2) {
    if (n1 === n2) {
        return true;
    }
    if (n1 == null || n2 == null) {
        return false;
    }
    if (n1.length !== n2.length) {
        return false;
    }
    for (let i = 0; i < n1.length; i++) {
        if (n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
function isInt(a) {
    return a % 1 === 0;
}
function tanh(x) {
    // tslint:disable-next-line:no-any
    if (Math.tanh != null) {
        // tslint:disable-next-line:no-any
        return Math.tanh(x);
    }
    if (x === Infinity) {
        return 1;
    }
    else if (x === -Infinity) {
        return -1;
    }
    else {
        const e2x = Math.exp(2 * x);
        return (e2x - 1) / (e2x + 1);
    }
}
function sizeToSquarishShape(size) {
    const width = Math.ceil(Math.sqrt(size));
    return [width, Math.ceil(size / width)];
}
/**
 * Creates a new array with randomized indicies to a given quantity.
 *
 * ```js
 * const randomTen = tf.util.createShuffledIndices(10);
 * console.log(randomTen);
 * ```
 *
 * @param number Quantity of how many shuffled indicies to create.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function createShuffledIndices(n) {
    const shuffledIndices = new Uint32Array(n);
    for (let i = 0; i < n; ++i) {
        shuffledIndices[i] = i;
    }
    shuffle(shuffledIndices);
    return shuffledIndices;
}
function rightPad(a, size) {
    if (size <= a.length) {
        return a;
    }
    return a + ' '.repeat(size - a.length);
}
function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {
    return new Promise((resolve, reject) => {
        let tryCount = 0;
        const tryFn = () => {
            if (checkFn()) {
                resolve();
                return;
            }
            tryCount++;
            const nextBackoff = delayFn(tryCount);
            if (maxCounter != null && tryCount >= maxCounter) {
                reject();
                return;
            }
            setTimeout(tryFn, nextBackoff);
        };
        tryFn();
    });
}
/**
 * Given the full size of the array and a shape that may contain -1 as the
 * implicit dimension, returns the inferred shape where -1 is replaced.
 * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
 *
 * @param shape The shape, which may contain -1 in some dimension.
 * @param size The full size (number of elements) of the array.
 * @return The inferred shape where -1 is replaced with the inferred size.
 */
function inferFromImplicitShape(shape, size) {
    let shapeProd = 1;
    let implicitIdx = -1;
    for (let i = 0; i < shape.length; ++i) {
        if (shape[i] >= 0) {
            shapeProd *= shape[i];
        }
        else if (shape[i] === -1) {
            if (implicitIdx !== -1) {
                throw Error(`Shapes can only have 1 implicit size. ` +
                    `Found -1 at dim ${implicitIdx} and dim ${i}`);
            }
            implicitIdx = i;
        }
        else if (shape[i] < 0) {
            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);
        }
    }
    if (implicitIdx === -1) {
        if (size > 0 && size !== shapeProd) {
            throw Error(`Size(${size}) must match the product of shape ${shape}`);
        }
        return shape;
    }
    if (shapeProd === 0) {
        throw Error(`Cannot infer the missing size in [${shape}] when ` +
            `there are 0 elements`);
    }
    if (size % shapeProd !== 0) {
        throw Error(`The implicit shape can't be a fractional number. ` +
            `Got ${size} / ${shapeProd}`);
    }
    const newShape = shape.slice();
    newShape[implicitIdx] = size / shapeProd;
    return newShape;
}
function parseAxisParam(axis, shape) {
    const rank = shape.length;
    // Normalize input
    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);
    // Check for valid range
    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +
        `got axis ${axis}`);
    // Check for only integers
    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +
        `got axis ${axis}`);
    // Handle negative axis.
    return axis.map(a => a < 0 ? rank + a : a);
}
/** Reduces the shape by removing all dimensions of shape 1. */
function squeezeShape(shape, axis) {
    const newShape = [];
    const keptDims = [];
    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
    const axes = (axis == null || isEmptyArray) ?
        null :
        parseAxisParam(axis, shape).sort();
    let j = 0;
    for (let i = 0; i < shape.length; ++i) {
        if (axes != null) {
            if (axes[j] === i && shape[i] !== 1) {
                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
            }
            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axes[j] <= i) {
                j++;
            }
        }
        if (shape[i] !== 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return { newShape, keptDims };
}
function getTypedArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    }
    else if (dtype === 'int32') {
        values = new Int32Array(size);
    }
    else if (dtype === 'bool') {
        values = new Uint8Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
    return values;
}
function getArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    }
    else if (dtype === 'int32') {
        values = new Int32Array(size);
    }
    else if (dtype === 'bool') {
        values = new Uint8Array(size);
    }
    else if (dtype === 'string') {
        values = new Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
    return values;
}
function checkConversionForErrors(vals, dtype) {
    for (let i = 0; i < vals.length; i++) {
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
        }
    }
}
/** Returns true if the dtype is valid. */
function isValidDtype(dtype) {
    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||
        dtype === 'int32' || dtype === 'string';
}
/**
 * Returns true if the new type can't encode the old type without loss of
 * precision.
 */
function hasEncodingLoss(oldType, newType) {
    if (newType === 'complex64') {
        return false;
    }
    if (newType === 'float32' && oldType !== 'complex64') {
        return false;
    }
    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {
        return false;
    }
    if (newType === 'bool' && oldType === 'bool') {
        return false;
    }
    return true;
}
function isTypedArray(a) {
    return a instanceof Float32Array || a instanceof Int32Array ||
        a instanceof Uint8Array;
}
function bytesPerElement(dtype) {
    if (dtype === 'float32' || dtype === 'int32') {
        return 4;
    }
    else if (dtype === 'complex64') {
        return 8;
    }
    else if (dtype === 'bool') {
        return 1;
    }
    else {
        throw new Error(`Unknown dtype ${dtype}`);
    }
}
/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS is
 * not possible since it depends on the encoding of the html page that serves
 * the website.
 */
function bytesFromStringArray(arr) {
    if (arr == null) {
        return 0;
    }
    let bytes = 0;
    arr.forEach(x => bytes += x.length);
    return bytes;
}
/** Returns true if the value is a string. */
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
function isBoolean(value) {
    return typeof value === 'boolean';
}
function isNumber(value) {
    return typeof value === 'number';
}
function inferDtype(values) {
    if (Array.isArray(values)) {
        return inferDtype(values[0]);
    }
    if (values instanceof Float32Array) {
        return 'float32';
    }
    else if (values instanceof Int32Array || values instanceof Uint8Array) {
        return 'int32';
    }
    else if (isNumber(values)) {
        return 'float32';
    }
    else if (isString(values)) {
        return 'string';
    }
    else if (isBoolean(values)) {
        return 'bool';
    }
    return 'float32';
}
function isFunction(f) {
    return !!(f && f.constructor && f.call && f.apply);
}
function nearestDivisor(size, start) {
    for (let i = start; i < size; ++i) {
        if (size % i === 0) {
            return i;
        }
    }
    return size;
}
function computeStrides(shape) {
    const rank = shape.length;
    if (rank < 2) {
        return [];
    }
    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
    // strides.
    const strides = new Array(rank - 1);
    strides[rank - 2] = shape[rank - 1];
    for (let i = rank - 3; i >= 0; --i) {
        strides[i] = strides[i + 1] * shape[i + 1];
    }
    return strides;
}
function createNestedArray(offset, shape, a) {
    const ret = new Array();
    if (shape.length === 1) {
        const d = shape[0];
        for (let i = 0; i < d; i++) {
            ret[i] = a[offset + i];
        }
    }
    else {
        const d = shape[0];
        const rest = shape.slice(1);
        const len = rest.reduce((acc, c) => acc * c);
        for (let i = 0; i < d; i++) {
            ret[i] = createNestedArray(offset + i * len, rest, a);
        }
    }
    return ret;
}
// Provide a nested array of TypedArray in given shape.
function toNestedArray(shape, a) {
    if (shape.length === 0) {
        // Scalar type should return a single number.
        return a[0];
    }
    const size = shape.reduce((acc, c) => acc * c);
    if (size === 0) {
        // A tensor with shape zero should be turned into empty list.
        return [];
    }
    if (size !== a.length) {
        throw new Error(`[${shape}] does not match the input size ${a.length}.`);
    }
    return createNestedArray(0, shape, a);
}
function makeOnesTypedArray(size, dtype) {
    const array = makeZerosTypedArray(size, dtype);
    for (let i = 0; i < array.length; i++) {
        array[i] = 1;
    }
    return array;
}
function makeZerosTypedArray(size, dtype) {
    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
        return new Float32Array(size);
    }
    else if (dtype === 'int32') {
        return new Int32Array(size);
    }
    else if (dtype === 'bool') {
        return new Uint8Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
/**
 * Make nested `TypedArray` filled with zeros.
 * @param shape The shape information for the nested array.
 * @param dtype dtype of the array element.
 */
function makeZerosNestedTypedArray(shape, dtype) {
    const size = shape.reduce((prev, curr) => prev * curr, 1);
    if (dtype == null || dtype === 'float32') {
        return toNestedArray(shape, new Float32Array(size));
    }
    else if (dtype === 'int32') {
        return toNestedArray(shape, new Int32Array(size));
    }
    else if (dtype === 'bool') {
        return toNestedArray(shape, new Uint8Array(size));
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
function assertNonNegativeIntegerDimensions(shape) {
    shape.forEach(dimSize => {
        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +
            `shape [${shape}].`);
    });
}
/**
 * Computes flat index for a given location (multidimentionsal index) in a
 * Tensor/multidimensional array.
 *
 * @param locs Location in the tensor.
 * @param rank Rank of the tensor.
 * @param strides Tensor strides.
 */
function locToIndex(locs, rank, strides) {
    if (rank === 0) {
        return 0;
    }
    else if (rank === 1) {
        return locs[0];
    }
    let index = locs[locs.length - 1];
    for (let i = 0; i < locs.length - 1; ++i) {
        index += strides[i] * locs[i];
    }
    return index;
}
/**
 * Computes the location (multidimensional index) in a tensor/multidimentional
 * array for a given flat index.
 *
 * @param index Index in flat array.
 * @param rank Rank of tensor.
 * @param strides Strides of tensor.
 */
function indexToLoc(index, rank, strides) {
    if (rank === 0) {
        return [];
    }
    else if (rank === 1) {
        return [index];
    }
    const locs = new Array(rank);
    for (let i = 0; i < locs.length - 1; ++i) {
        locs[i] = Math.floor(index / strides[i]);
        index -= locs[i] * strides[i];
    }
    locs[locs.length - 1] = index;
    return locs;
}
/**
 * This method asserts whether an object is a Promise instance.
 * @param object
 */
// tslint:disable-next-line: no-any
function isPromise(object) {
    //  We chose to not use 'obj instanceOf Promise' for two reasons:
    //  1. It only reliably works for es6 Promise, not other Promise
    //  implementations.
    //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch
    //  the async calls, so it is possible the obj (patched) is comparing to a
    //  pre-patched Promise.
    return object && object.then && typeof object.then === 'function';
}
//# sourceMappingURL=util_base.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/version.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/version.js ***!
  \************************************************************/
/*! exports provided: version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '2.7.0';

//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/seedrandom/index.js":
/*!******************************************!*\
  !*** ./node_modules/seedrandom/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = __webpack_require__(/*! ./lib/alea */ "./node_modules/seedrandom/lib/alea.js");

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = __webpack_require__(/*! ./lib/xor128 */ "./node_modules/seedrandom/lib/xor128.js");

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = __webpack_require__(/*! ./lib/xorwow */ "./node_modules/seedrandom/lib/xorwow.js");

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = __webpack_require__(/*! ./lib/xorshift7 */ "./node_modules/seedrandom/lib/xorshift7.js");

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = __webpack_require__(/*! ./lib/xor4096 */ "./node_modules/seedrandom/lib/xor4096.js");

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = __webpack_require__(/*! ./lib/tychei */ "./node_modules/seedrandom/lib/tychei.js");

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = __webpack_require__(/*! ./seedrandom */ "./node_modules/seedrandom/seedrandom.js");

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;


/***/ }),

/***/ "./node_modules/seedrandom/lib/alea.js":
/*!*********************************************!*\
  !*** ./node_modules/seedrandom/lib/alea.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.alea = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/tychei.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/tychei.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.tychei = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xor128.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xor128.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor128 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xor4096.js":
/*!************************************************!*\
  !*** ./node_modules/seedrandom/lib/xor4096.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xorshift7.js":
/*!**************************************************!*\
  !*** ./node_modules/seedrandom/lib/xorshift7.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorshift7 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xorwow.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xorwow.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorwow = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/seedrandom.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/seedrandom.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ( true && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = __webpack_require__(/*! crypto */ 5);
  } catch (ex) {}
} else if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return seedrandom; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-define.js":
/*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ 3:
/*!****************************!*\
  !*** node-fetch (ignored) ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 4:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 5:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=default~mobilenet-mobilenet-module~object-detection-object-detection-module~posenet-posenet-module.js.map